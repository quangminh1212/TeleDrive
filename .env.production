# ================================================================
# TELEDRIVE PRODUCTION ENVIRONMENT CONFIGURATION
# ================================================================
# 
# IMPORTANT: This file contains production settings
# - Copy to .env and customize for your environment
# - Never commit actual credentials to version control
# - Use secure values for all secrets
#
# ================================================================

# ENVIRONMENT SETTINGS
# ================================================================
ENVIRONMENT=production
DEBUG=false
TESTING=false

# SECURITY CONFIGURATION
# ================================================================
# Generate with: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=your-super-secure-secret-key-here-change-this

# Session timeout in seconds (default: 1 hour)
SESSION_TIMEOUT=3600

# Login security
MAX_LOGIN_ATTEMPTS=5
LOCKOUT_DURATION=900

# CSRF and Rate Limiting
CSRF_ENABLED=true
RATE_LIMIT_ENABLED=true
RATE_LIMIT_PER_MINUTE=60

# DATABASE CONFIGURATION
# ================================================================
# Production database URL (PostgreSQL recommended)
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://teledrive_user:secure_password@localhost:5432/teledrive_prod

# Connection pool settings
DB_POOL_SIZE=10
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600
DB_ECHO=false

# REDIS CONFIGURATION (for caching and sessions)
# ================================================================
REDIS_ENABLED=true
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=your-redis-password
REDIS_MAX_CONNECTIONS=20
REDIS_SOCKET_TIMEOUT=5

# TELEGRAM API CREDENTIALS (REQUIRED)
# ================================================================
# Get from https://my.telegram.org/apps
TELEGRAM_API_ID=your_api_id_here
TELEGRAM_API_HASH=your_api_hash_here
TELEGRAM_PHONE=+84xxxxxxxxx

# Telegram connection settings
TELEGRAM_SESSION_NAME=teledrive_production_session
TELEGRAM_CONNECTION_TIMEOUT=30
TELEGRAM_REQUEST_TIMEOUT=60

# SERVER CONFIGURATION
# ================================================================
HOST=0.0.0.0
PORT=5000

# Gunicorn settings
WORKERS=4
WORKER_CLASS=sync
TIMEOUT=30
KEEPALIVE=2
MAX_REQUESTS=1000
MAX_REQUESTS_JITTER=100

# LOGGING CONFIGURATION
# ================================================================
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_FILE=logs/teledrive.log
LOG_MAX_BYTES=10485760
LOG_BACKUP_COUNT=5
LOG_CONSOLE=false

# SSL/HTTPS CONFIGURATION
# ================================================================
HTTPS_ENABLED=true
SSL_CERT_PATH=/path/to/ssl/cert.pem
SSL_KEY_PATH=/path/to/ssl/key.pem

# MONITORING & HEALTH CHECKS
# ================================================================
HEALTH_CHECK_ENABLED=true
METRICS_ENABLED=true
METRICS_PORT=9090

# BACKUP CONFIGURATION
# ================================================================
BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30
BACKUP_S3_BUCKET=teledrive-backups
BACKUP_S3_REGION=us-east-1

# EMAIL CONFIGURATION (for notifications)
# ================================================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_USE_TLS=true
ADMIN_EMAIL=admin@yourdomain.com

# EXTERNAL SERVICES
# ================================================================
# Sentry for error tracking
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# New Relic for monitoring
NEW_RELIC_LICENSE_KEY=your-new-relic-license-key
NEW_RELIC_APP_NAME=TeleDrive-Production

# ================================================================
# DEPLOYMENT NOTES
# ================================================================
#
# 1. Database Setup:
#    - Create PostgreSQL database and user
#    - Run database migrations
#    - Set up connection pooling
#
# 2. Redis Setup:
#    - Install and configure Redis server
#    - Set up authentication
#    - Configure persistence
#
# 3. SSL/TLS:
#    - Obtain SSL certificates (Let's Encrypt recommended)
#    - Configure reverse proxy (Nginx recommended)
#    - Set up automatic certificate renewal
#
# 4. Monitoring:
#    - Set up log aggregation (ELK stack or similar)
#    - Configure alerting for critical errors
#    - Set up uptime monitoring
#
# 5. Backup:
#    - Configure automated database backups
#    - Set up file storage backups
#    - Test backup restoration procedures
#
# 6. Security:
#    - Configure firewall rules
#    - Set up fail2ban for intrusion prevention
#    - Regular security updates
#
# ================================================================
