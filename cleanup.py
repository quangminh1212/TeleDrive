#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TeleDrive Cleanup Script
Script t·ª± ƒë·ªông d·ªçn d·∫πp c√°c file d∆∞ th·ª´a trong d·ª± √°n
"""

import os
import shutil
import glob
from pathlib import Path
from datetime import datetime, timedelta

def cleanup_pycache():
    """X√≥a t·∫•t c·∫£ th∆∞ m·ª•c __pycache__"""
    print("üßπ D·ªçn d·∫πp __pycache__ directories...")
    count = 0
    for root, dirs, files in os.walk('.'):
        if '__pycache__' in dirs:
            pycache_path = os.path.join(root, '__pycache__')
            try:
                shutil.rmtree(pycache_path)
                print(f"   ‚úÖ ƒê√£ x√≥a: {pycache_path}")
                count += 1
            except Exception as e:
                print(f"   ‚ùå L·ªói x√≥a {pycache_path}: {e}")
    print(f"   üìä ƒê√£ x√≥a {count} th∆∞ m·ª•c __pycache__")

def cleanup_logs():
    """D·ªçn d·∫πp log files c≈©"""
    print("üìù D·ªçn d·∫πp log files...")
    logs_dir = Path("logs")
    if logs_dir.exists():
        for log_file in logs_dir.glob("*.log"):
            try:
                # Ch·ªâ x√≥a n·ªôi dung, gi·ªØ l·∫°i file
                with open(log_file, 'w') as f:
                    f.write("")
                print(f"   ‚úÖ ƒê√£ l√†m tr·ªëng: {log_file}")
            except Exception as e:
                print(f"   ‚ùå L·ªói l√†m tr·ªëng {log_file}: {e}")

def cleanup_old_outputs(days=7):
    """X√≥a c√°c file output c≈© h∆°n X ng√†y"""
    print(f"üìÅ D·ªçn d·∫πp output files c≈© h∆°n {days} ng√†y...")
    output_dir = Path("output")
    if output_dir.exists():
        cutoff_date = datetime.now() - timedelta(days=days)
        count = 0

        for file in output_dir.glob("*"):
            if file.is_file() and file.name != '.gitkeep':
                try:
                    file_time = datetime.fromtimestamp(file.stat().st_mtime)
                    if file_time < cutoff_date:
                        file.unlink()
                        print(f"   ‚úÖ ƒê√£ x√≥a: {file}")
                        count += 1
                except Exception as e:
                    print(f"   ‚ùå L·ªói x√≥a {file}: {e}")

        print(f"   üìä ƒê√£ x√≥a {count} file output c≈©")

def cleanup_temp_files():
    """X√≥a c√°c file t·∫°m th·ªùi"""
    print("üóëÔ∏è D·ªçn d·∫πp temp files...")
    patterns = ['*.tmp', '*.bak', '*.old', '*~', '*.swp', '*.swo']
    count = 0

    for pattern in patterns:
        for file in glob.glob(pattern, recursive=True):
            try:
                os.remove(file)
                print(f"   ‚úÖ ƒê√£ x√≥a: {file}")
                count += 1
            except Exception as e:
                print(f"   ‚ùå L·ªói x√≥a {file}: {e}")

    print(f"   üìä ƒê√£ x√≥a {count} temp files")

def cleanup_old_backups(keep_latest=2):
    """Gi·ªØ l·∫°i ch·ªâ N backup database m·ªõi nh·∫•t"""
    print(f"üíæ D·ªçn d·∫πp database backups (gi·ªØ {keep_latest} file m·ªõi nh·∫•t)...")
    instance_dir = Path("instance")
    if instance_dir.exists():
        backup_files = list(instance_dir.glob("*_backup_*.db"))
        backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)

        files_to_remove = backup_files[keep_latest:]
        for file in files_to_remove:
            try:
                file.unlink()
                print(f"   ‚úÖ ƒê√£ x√≥a backup c≈©: {file}")
            except Exception as e:
                print(f"   ‚ùå L·ªói x√≥a {file}: {e}")

        print(f"   üìä ƒê√£ x√≥a {len(files_to_remove)} backup files c≈©")

def main():
    """Main cleanup function"""
    print("üöÄ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp d·ª± √°n TeleDrive...")
    print("=" * 50)

    cleanup_pycache()
    print()

    cleanup_logs()
    print()

    cleanup_old_outputs(days=7)
    print()

    cleanup_temp_files()
    print()

    cleanup_old_backups(keep_latest=2)
    print()

    print("=" * 50)
    print("‚úÖ Ho√†n th√†nh d·ªçn d·∫πp d·ª± √°n!")

if __name__ == '__main__':
    main()
