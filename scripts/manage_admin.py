#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script qu·∫£n l√Ω admin users trong TeleDrive
"""

import os
import sys
from flask import Flask

# Th√™m th∆∞ m·ª•c src v√†o Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from app.database import init_database
from app.auth import auth_manager
from app.auth.models import User

def setup_app():
    """Kh·ªüi t·∫°o Flask app v√† database"""
    app = Flask(__name__)
    
    # C·∫•u h√¨nh database
    basedir = os.path.abspath(os.path.dirname(__file__))
    basedir = os.path.dirname(basedir)  # L√™n th∆∞ m·ª•c cha (TeleDrive)
    instance_dir = os.path.join(basedir, 'instance')
    os.makedirs(instance_dir, exist_ok=True)
    db_path = os.path.join(instance_dir, 'teledrive.db')
    app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SECRET_KEY'] = 'teledrive-secret-key-change-in-production'
    
    # Kh·ªüi t·∫°o database v√† auth
    init_database(app)
    auth_manager.init_app(app)
    
    return app

def list_all_users():
    """Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ users"""
    users = auth_manager.get_all_users()
    
    print("\n" + "="*60)
    print("üìä DANH S√ÅCH T·∫§T C·∫¢ USERS")
    print("="*60)
    
    if not users:
        print("‚ùå Kh√¥ng c√≥ user n√†o trong h·ªá th·ªëng")
        return []
    
    admin_users = []
    regular_users = []
    
    for user in users:
        if user.is_admin:
            admin_users.append(user)
        else:
            regular_users.append(user)
    
    # Hi·ªÉn th·ªã admin users
    print(f"\nüëë ADMIN USERS ({len(admin_users)}):")
    if admin_users:
        for i, user in enumerate(admin_users, 1):
            status = "‚úÖ Active" if user.is_active else "‚ùå Inactive"
            print(f"   {i}. ID: {user.id} | {user.username} | {user.phone_number} | {status}")
            if user.email:
                print(f"      Email: {user.email}")
            print(f"      T·∫°o l√∫c: {user.created_at}")
    else:
        print("   Kh√¥ng c√≥ admin user n√†o")
    
    # Hi·ªÉn th·ªã regular users
    print(f"\nüë§ REGULAR USERS ({len(regular_users)}):")
    if regular_users:
        for i, user in enumerate(regular_users, 1):
            status = "‚úÖ Active" if user.is_active else "‚ùå Inactive"
            print(f"   {i}. ID: {user.id} | {user.username} | {user.phone_number} | {status}")
    else:
        print("   Kh√¥ng c√≥ regular user n√†o")
    
    return admin_users

def remove_admin_privilege(user_id):
    """G·ª° quy·ªÅn admin c·ªßa user"""
    try:
        from app.database import db
        
        user = User.query.get(user_id)
        if not user:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi ID: {user_id}")
            return False
        
        if not user.is_admin:
            print(f"‚ùå User {user.username} kh√¥ng ph·∫£i l√† admin")
            return False
        
        # G·ª° quy·ªÅn admin
        user.is_admin = False
        db.session.commit()
        
        print(f"‚úÖ ƒê√£ g·ª° quy·ªÅn admin c·ªßa user: {user.username}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª° quy·ªÅn admin: {str(e)}")
        return False

def delete_user(user_id):
    """X√≥a user kh·ªèi h·ªá th·ªëng"""
    try:
        from app.database import db
        
        user = User.query.get(user_id)
        if not user:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi ID: {user_id}")
            return False
        
        username = user.username
        
        # X√≥a user
        db.session.delete(user)
        db.session.commit()
        
        print(f"‚úÖ ƒê√£ x√≥a user: {username}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi x√≥a user: {str(e)}")
        return False

def main():
    """H√†m ch√≠nh"""
    print("üöÄ TeleDrive Admin Management Tool")
    print("="*50)
    
    app = setup_app()
    
    with app.app_context():
        while True:
            admin_users = list_all_users()
            
            print("\n" + "="*60)
            print("üõ†Ô∏è  CH·ªåN H√ÄNH ƒê·ªòNG:")
            print("1. L√†m m·ªõi danh s√°ch")
            print("2. G·ª° quy·ªÅn admin c·ªßa user")
            print("3. X√≥a user kh·ªèi h·ªá th·ªëng")
            print("0. Tho√°t")
            print("="*60)
            
            choice = input("\nNh·∫≠p l·ª±a ch·ªçn (0-3): ").strip()
            
            if choice == "0":
                print("üëã T·∫°m bi·ªát!")
                break
            elif choice == "1":
                continue
            elif choice == "2":
                if not admin_users:
                    print("‚ùå Kh√¥ng c√≥ admin user n√†o ƒë·ªÉ g·ª° quy·ªÅn")
                    continue
                
                try:
                    user_id = int(input("Nh·∫≠p ID c·ªßa user c·∫ßn g·ª° quy·ªÅn admin: ").strip())
                    
                    # Ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c g·ª° quy·ªÅn admin cu·ªëi c√πng
                    if len(admin_users) == 1:
                        print("‚ùå Kh√¥ng th·ªÉ g·ª° quy·ªÅn admin cu·ªëi c√πng trong h·ªá th·ªëng!")
                        continue
                    
                    confirm = input(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ª° quy·ªÅn admin c·ªßa user ID {user_id}? (y/N): ").strip().lower()
                    if confirm == 'y':
                        remove_admin_privilege(user_id)
                    else:
                        print("‚ùå ƒê√£ h·ªßy thao t√°c")
                        
                except ValueError:
                    print("‚ùå ID kh√¥ng h·ª£p l·ªá")
                    
            elif choice == "3":
                try:
                    user_id = int(input("Nh·∫≠p ID c·ªßa user c·∫ßn x√≥a: ").strip())
                    
                    # T√¨m user ƒë·ªÉ ki·ªÉm tra
                    user = User.query.get(user_id)
                    if user and user.is_admin and len(admin_users) == 1:
                        print("‚ùå Kh√¥ng th·ªÉ x√≥a admin user cu·ªëi c√πng trong h·ªá th·ªëng!")
                        continue
                    
                    confirm = input(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën X√ìA user ID {user_id}? (y/N): ").strip().lower()
                    if confirm == 'y':
                        delete_user(user_id)
                    else:
                        print("‚ùå ƒê√£ h·ªßy thao t√°c")
                        
                except ValueError:
                    print("‚ùå ID kh√¥ng h·ª£p l·ªá")
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
            
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

if __name__ == "__main__":
    main()
