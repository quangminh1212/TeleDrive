const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');
const mime = require('mime-types');

// Kh·ªüi t·∫°o bot
const bot = new Telegraf(process.env.BOT_TOKEN);

// ƒê∆∞·ªùng d·∫´n file l∆∞u tr·ªØ
const DATA_FILE = path.join(__dirname, '.data', 'filestore.json');

// T·∫°o th∆∞ m·ª•c .data n·∫øu ch∆∞a t·ªìn t·∫°i
if (!fs.existsSync(path.dirname(DATA_FILE))) {
  fs.mkdirSync(path.dirname(DATA_FILE), { recursive: true });
}

// L∆∞u tr·ªØ th√¥ng tin file
let fileStore = {
  files: [],
  folders: []
};

// Load d·ªØ li·ªáu t·ª´ file
try {
  if (fs.existsSync(DATA_FILE)) {
    const data = fs.readFileSync(DATA_FILE, 'utf8');
    fileStore = JSON.parse(data);
    console.log(`[Bot] ƒê√£ t·∫£i ${fileStore.files.length} file v√† ${fileStore.folders.length} th∆∞ m·ª•c`);
  }
} catch (error) {
  console.error('[Bot] L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
}

// H√†m l∆∞u d·ªØ li·ªáu
function saveData() {
  try {
    fs.writeFileSync(DATA_FILE, JSON.stringify(fileStore, null, 2));
    console.log('[Bot] ƒê√£ l∆∞u d·ªØ li·ªáu');
  } catch (error) {
    console.error('[Bot] L·ªói khi l∆∞u d·ªØ li·ªáu:', error);
  }
}

// L∆∞u d·ªØ li·ªáu ƒë·ªãnh k·ª≥ (5 ph√∫t)
setInterval(saveData, 5 * 60 * 1000);

// L∆∞u d·ªØ li·ªáu khi c√≥ thay ƒë·ªïi
function saveOnChange() {
  clearTimeout(saveOnChange.timer);
  saveOnChange.timer = setTimeout(saveData, 1000);
}

// H√†m t·∫°o menu inline keyboard
function createFileMenu(currentPath = '/') {
  const items = [...fileStore.folders, ...fileStore.files].filter(item => 
    path.dirname(item.path) === currentPath
  );
  
  const buttons = items.map(item => [{
    text: item.name,
    callback_data: `view_${item.type}_${item.id}`
  }]);
  
  // Th√™m n√∫t quay l·∫°i n·∫øu kh√¥ng ·ªü th∆∞ m·ª•c g·ªëc
  if (currentPath !== '/') {
    buttons.push([{
      text: '‚¨ÖÔ∏è Quay l·∫°i',
      callback_data: `back_${path.dirname(currentPath)}`
    }]);
  }
  
  return {
    reply_markup: {
      inline_keyboard: buttons
    }
  };
}

// X·ª≠ l√Ω l·ªánh /start
bot.command('start', (ctx) => {
  ctx.reply(
    'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Bot qu·∫£n l√Ω file! üìÅ\n\n' +
    'C√°c l·ªánh c√≥ s·∫µn:\n' +
    '/files - Xem danh s√°ch file\n' +
    '/upload - Upload file m·ªõi\n' +
    '/mkdir - T·∫°o th∆∞ m·ª•c m·ªõi\n' +
    '/search - T√¨m ki·∫øm file\n' +
    '/clean - D·ªçn d·∫πp file r√°c'
  );
});

// X·ª≠ l√Ω l·ªánh /files
bot.command('files', async (ctx) => {
  const menu = createFileMenu();
  await ctx.reply('üìÅ Danh s√°ch file c·ªßa b·∫°n:', menu);
});

// X·ª≠ l√Ω l·ªánh /upload
bot.command('upload', (ctx) => {
  ctx.reply(
    'ƒê·ªÉ upload file:\n' +
    '1. G·ª≠i file tr·ª±c ti·∫øp cho bot\n' +
    '2. Ho·∫∑c forward tin nh·∫Øn ch·ª©a file t·ª´ chat kh√°c'
  );
});

// X·ª≠ l√Ω khi nh·∫≠n file m·ªõi
bot.on(['document', 'photo', 'video', 'audio'], async (ctx) => {
  try {
    const file = ctx.message.document || ctx.message.photo?.[0] || ctx.message.video || ctx.message.audio;
    if (!file) return;

    const fileId = file.file_id;
    const fileName = file.file_name || `file_${Date.now()}${mime.extension(file.mime_type)}`;
    
    // L∆∞u th√¥ng tin file
    const fileInfo = {
      id: fileId,
      name: fileName,
      type: 'file',
      path: '/' + fileName,
      size: file.file_size,
      mime_type: file.mime_type,
      date: new Date(),
      telegram_file_id: fileId
    };
    
    fileStore.files.push(fileInfo);
    saveOnChange(); // L∆∞u khi c√≥ thay ƒë·ªïi
    
    await ctx.reply(
      `‚úÖ ƒê√£ l∆∞u file: ${fileName}\n` +
      `üì¶ K√≠ch th∆∞·ªõc: ${Math.round(file.file_size / 1024)} KB\n` +
      `üìé Lo·∫°i file: ${file.mime_type || 'Kh√¥ng x√°c ƒë·ªãnh'}`
    );
  } catch (error) {
    console.error('Error handling file:', error);
    ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file');
  }
});

// X·ª≠ l√Ω l·ªánh /mkdir
bot.command('mkdir', (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply('Vui l√≤ng nh·∫≠p t√™n th∆∞ m·ª•c. V√≠ d·ª•: /mkdir Photos');
  }
  
  const folderName = args[1];
  const folderId = Date.now().toString();
  
  fileStore.folders.push({
    id: folderId,
    name: folderName,
    type: 'folder',
    path: '/' + folderName,
    date: new Date()
  });
  
  saveOnChange(); // L∆∞u khi c√≥ thay ƒë·ªïi
  ctx.reply(`üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: ${folderName}`);
});

// X·ª≠ l√Ω l·ªánh /search
bot.command('search', async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply('Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm. V√≠ d·ª•: /search photo');
  }
  
  const keyword = args[1].toLowerCase();
  const results = [...fileStore.files, ...fileStore.folders].filter(item =>
    item.name.toLowerCase().includes(keyword)
  );
  
  if (results.length === 0) {
    return ctx.reply('‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o');
  }
  
  const message = results.map(item => 
    `${item.type === 'folder' ? 'üìÅ' : 'üìÑ'} ${item.name}`
  ).join('\n');
  
  await ctx.reply(`üîç K·∫øt qu·∫£ t√¨m ki·∫øm:\n\n${message}`);
});

// X·ª≠ l√Ω l·ªánh /clean
bot.command('clean', async (ctx) => {
  const now = new Date();
  const oldFiles = fileStore.files.filter(file => {
    const fileDate = new Date(file.date);
    const diffDays = (now - fileDate) / (1000 * 60 * 60 * 24);
    return diffDays > 30; // File c≈© h∆°n 30 ng√†y
  });
  
  if (oldFiles.length === 0) {
    return ctx.reply('‚ú® Kh√¥ng c√≥ file n√†o c·∫ßn d·ªçn d·∫πp');
  }
  
  const totalSize = oldFiles.reduce((sum, file) => sum + (file.size || 0), 0);
  const message = 
    `üóë C√°c file c√≥ th·ªÉ x√≥a:\n\n` +
    oldFiles.map(file => `- ${file.name}`).join('\n') +
    `\n\nT·ªïng dung l∆∞·ª£ng c√≥ th·ªÉ gi·∫£i ph√≥ng: ${Math.round(totalSize / 1024 / 1024)} MB`;
  
  await ctx.reply(message, {
    reply_markup: {
      inline_keyboard: [[
        { text: 'üóë X√≥a t·∫•t c·∫£', callback_data: 'clean_all' },
        { text: '‚ùå H·ªßy', callback_data: 'clean_cancel' }
      ]]
    }
  });
});

// X·ª≠ l√Ω c√°c callback query
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  
  if (data.startsWith('view_file_')) {
    const fileId = data.replace('view_file_', '');
    const file = fileStore.files.find(f => f.id === fileId);
    if (file) {
      await ctx.reply(
        `üìÑ Chi ti·∫øt file:\n\n` +
        `T√™n: ${file.name}\n` +
        `K√≠ch th∆∞·ªõc: ${Math.round(file.size / 1024)} KB\n` +
        `Lo·∫°i: ${file.mime_type || 'Kh√¥ng x√°c ƒë·ªãnh'}\n` +
        `Ng√†y t·∫°o: ${file.date.toLocaleDateString()}`
      );
    }
  }
  else if (data.startsWith('view_folder_')) {
    const folderId = data.replace('view_folder_', '');
    const folder = fileStore.folders.find(f => f.id === folderId);
    if (folder) {
      const menu = createFileMenu(folder.path);
      await ctx.editMessageText(`üìÅ ${folder.name}:`, menu);
    }
  }
  else if (data.startsWith('back_')) {
    const targetPath = data.replace('back_', '');
    const menu = createFileMenu(targetPath);
    await ctx.editMessageText('üìÅ Quay l·∫°i:', menu);
  }
  else if (data === 'clean_all') {
    const now = new Date();
    const oldFiles = fileStore.files.filter(file => {
      const fileDate = new Date(file.date);
      const diffDays = (now - fileDate) / (1000 * 60 * 60 * 24);
      return diffDays > 30;
    });
    
    // X√≥a c√°c file c≈©
    fileStore.files = fileStore.files.filter(file => {
      const fileDate = new Date(file.date);
      const diffDays = (now - fileDate) / (1000 * 60 * 60 * 24);
      return diffDays <= 30;
    });
    
    await ctx.editMessageText(
      `‚úÖ ƒê√£ x√≥a ${oldFiles.length} file\n` +
      `üóë ƒê√£ gi·∫£i ph√≥ng: ${Math.round(oldFiles.reduce((sum, file) => sum + (file.size || 0), 0) / 1024 / 1024)} MB`
    );
  }
  else if (data === 'clean_cancel') {
    await ctx.editMessageText('‚ùå ƒê√£ h·ªßy thao t√°c d·ªçn d·∫πp');
  }
  
  // X√≥a d·∫•u loading c·ªßa n√∫t
  await ctx.answerCbQuery();
});

// Th√™m l·ªánh /help
bot.command('help', (ctx) => {
  ctx.reply(
    'ü§ñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot:\n\n' +
    '1. Qu·∫£n l√Ω file:\n' +
    '   /files - Xem danh s√°ch file v√† th∆∞ m·ª•c\n' +
    '   /upload - H∆∞·ªõng d·∫´n upload file\n' +
    '   /mkdir <t√™n> - T·∫°o th∆∞ m·ª•c m·ªõi\n' +
    '   /mv <file> <th∆∞ m·ª•c> - Di chuy·ªÉn file\n' +
    '   /rm <file> - X√≥a file\n\n' +
    '2. T√¨m ki·∫øm v√† s·∫Øp x·∫øp:\n' +
    '   /search <t·ª´ kh√≥a> - T√¨m file/th∆∞ m·ª•c\n' +
    '   /sort size - S·∫Øp x·∫øp theo k√≠ch th∆∞·ªõc\n' +
    '   /sort date - S·∫Øp x·∫øp theo ng√†y\n' +
    '   /sort name - S·∫Øp x·∫øp theo t√™n\n\n' +
    '3. D·ªçn d·∫πp v√† b·∫£o tr√¨:\n' +
    '   /clean - D·ªçn d·∫πp file r√°c\n' +
    '   /stats - Xem th·ªëng k√™ dung l∆∞·ª£ng\n' +
    '   /zip <th∆∞ m·ª•c> - N√©n th∆∞ m·ª•c\n' +
    '   /unzip <file> - Gi·∫£i n√©n file\n\n' +
    '4. Chia s·∫ª:\n' +
    '   /share <file> - T·∫°o link chia s·∫ª\n' +
    '   /unshare <file> - H·ªßy chia s·∫ª\n' +
    '   /shared - Xem c√°c file ƒë√£ chia s·∫ª'
  );
});

// Th√™m l·ªánh /mv ƒë·ªÉ di chuy·ªÉn file
bot.command('mv', async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 3) {
    return ctx.reply('C√∫ ph√°p: /mv <t√™n file> <th∆∞ m·ª•c ƒë√≠ch>');
  }
  
  const fileName = args[1];
  const targetFolder = args[2];
  
  const file = fileStore.files.find(f => f.name === fileName);
  const folder = fileStore.folders.find(f => f.name === targetFolder);
  
  if (!file) {
    return ctx.reply(`‚ùå Kh√¥ng t√¨m th·∫•y file: ${fileName}`);
  }
  if (!folder) {
    return ctx.reply(`‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: ${targetFolder}`);
  }
  
  // Di chuy·ªÉn file
  file.path = path.join(folder.path, file.name);
  
  await ctx.reply(`‚úÖ ƒê√£ di chuy·ªÉn file ${fileName} v√†o th∆∞ m·ª•c ${targetFolder}`);
});

// Th√™m l·ªánh /rm ƒë·ªÉ x√≥a file
bot.command('rm', async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply('C√∫ ph√°p: /rm <t√™n file>');
  }
  
  const fileName = args[1];
  const fileIndex = fileStore.files.findIndex(f => f.name === fileName);
  
  if (fileIndex === -1) {
    return ctx.reply(`‚ùå Kh√¥ng t√¨m th·∫•y file: ${fileName}`);
  }
  
  // X√≥a file
  fileStore.files.splice(fileIndex, 1);
  saveOnChange(); // L∆∞u khi c√≥ thay ƒë·ªïi
  
  await ctx.reply(`üóë ƒê√£ x√≥a file: ${fileName}`);
});

// Th√™m l·ªánh /stats ƒë·ªÉ xem th·ªëng k√™
bot.command('stats', async (ctx) => {
  const totalFiles = fileStore.files.length;
  const totalFolders = fileStore.folders.length;
  const totalSize = fileStore.files.reduce((sum, file) => sum + (file.size || 0), 0);
  
  const fileTypes = {};
  fileStore.files.forEach(file => {
    const type = file.mime_type?.split('/')[0] || 'unknown';
    fileTypes[type] = (fileTypes[type] || 0) + 1;
  });
  
  const statsMessage = 
    `üìä Th·ªëng k√™ l∆∞u tr·ªØ:\n\n` +
    `T·ªïng s·ªë file: ${totalFiles}\n` +
    `T·ªïng s·ªë th∆∞ m·ª•c: ${totalFolders}\n` +
    `T·ªïng dung l∆∞·ª£ng: ${Math.round(totalSize / 1024 / 1024)} MB\n\n` +
    `üìù Ph√¢n lo·∫°i:\n` +
    Object.entries(fileTypes)
      .map(([type, count]) => `${type}: ${count} file`)
      .join('\n');
  
  await ctx.reply(statsMessage);
});

// Th√™m l·ªánh /sort ƒë·ªÉ s·∫Øp x·∫øp file
bot.command('sort', async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply(
      'C√∫ ph√°p: /sort <ti√™u ch√≠>\n' +
      'Ti√™u ch√≠: size, date, name'
    );
  }
  
  const criterion = args[1].toLowerCase();
  let sortedFiles = [...fileStore.files];
  
  switch (criterion) {
    case 'size':
      sortedFiles.sort((a, b) => (b.size || 0) - (a.size || 0));
      break;
    case 'date':
      sortedFiles.sort((a, b) => new Date(b.date) - new Date(a.date));
      break;
    case 'name':
      sortedFiles.sort((a, b) => a.name.localeCompare(b.name));
      break;
    default:
      return ctx.reply('‚ùå Ti√™u ch√≠ kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: size, date, name');
  }
  
  const message = 
    `üìã Danh s√°ch file (s·∫Øp x·∫øp theo ${criterion}):\n\n` +
    sortedFiles.map(file => 
      `üìÑ ${file.name}\n` +
      `   K√≠ch th∆∞·ªõc: ${Math.round(file.size / 1024)} KB\n` +
      `   Ng√†y t·∫°o: ${new Date(file.date).toLocaleDateString()}`
    ).join('\n\n');
  
  await ctx.reply(message);
});

// Th√™m l·ªánh /share ƒë·ªÉ chia s·∫ª file
bot.command('share', async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply('C√∫ ph√°p: /share <t√™n file>');
  }
  
  const fileName = args[1];
  const file = fileStore.files.find(f => f.name === fileName);
  
  if (!file) {
    return ctx.reply(`‚ùå Kh√¥ng t√¨m th·∫•y file: ${fileName}`);
  }
  
  // T·∫°o link chia s·∫ª
  const shareId = Math.random().toString(36).substring(7);
  file.shareId = shareId;
  file.shareDate = new Date();
  
  await ctx.reply(
    `üîó Link chia s·∫ª cho file ${fileName}:\n` +
    `https://t.me/your_bot?start=share_${shareId}\n\n` +
    `Link c√≥ hi·ªáu l·ª±c trong 7 ng√†y`
  );
});

// Th√™m l·ªánh /shared ƒë·ªÉ xem file ƒë√£ chia s·∫ª
bot.command('shared', async (ctx) => {
  const sharedFiles = fileStore.files.filter(f => f.shareId);
  
  if (sharedFiles.length === 0) {
    return ctx.reply('Kh√¥ng c√≥ file n√†o ƒëang ƒë∆∞·ª£c chia s·∫ª');
  }
  
  const message = 
    `üîó C√°c file ƒëang chia s·∫ª:\n\n` +
    sharedFiles.map(file => 
      `üìÑ ${file.name}\n` +
      `   Link: https://t.me/your_bot?start=share_${file.shareId}\n` +
      `   Ng√†y chia s·∫ª: ${new Date(file.shareDate).toLocaleDateString()}`
    ).join('\n\n');
  
  await ctx.reply(message);
});

// Th√™m l·ªánh /unshare ƒë·ªÉ h·ªßy chia s·∫ª
bot.command('unshare', async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply('C√∫ ph√°p: /unshare <t√™n file>');
  }
  
  const fileName = args[1];
  const file = fileStore.files.find(f => f.name === fileName);
  
  if (!file) {
    return ctx.reply(`‚ùå Kh√¥ng t√¨m th·∫•y file: ${fileName}`);
  }
  
  if (!file.shareId) {
    return ctx.reply(`‚ùå File ${fileName} ch∆∞a ƒë∆∞·ª£c chia s·∫ª`);
  }
  
  // H·ªßy chia s·∫ª
  delete file.shareId;
  delete file.shareDate;
  
  await ctx.reply(`‚úÖ ƒê√£ h·ªßy chia s·∫ª file: ${fileName}`);
});

// Th√™m l·ªánh /backup ƒë·ªÉ sao l∆∞u file l√™n Telegram
bot.command('backup', async (ctx) => {
  try {
    // Ki·ªÉm tra xem c√≥ file n√†o kh√¥ng
    if (fileStore.files.length === 0) {
      return ctx.reply('‚ùå Kh√¥ng c√≥ file n√†o ƒë·ªÉ sao l∆∞u');
    }

    // T·∫°o tin nh·∫Øn sao l∆∞u
    const backupMessage = 
      `üì¶ B·∫Øt ƒë·∫ßu sao l∆∞u ${fileStore.files.length} file\n` +
      `‚è± Th·ªùi gian: ${new Date().toLocaleString()}`;
    
    await ctx.reply(backupMessage);

    // Sao l∆∞u t·ª´ng file
    let successCount = 0;
    let errorCount = 0;

    for (const file of fileStore.files) {
      try {
        if (file.telegram_file_id) {
          // G·ª≠i file ƒë√£ c√≥ tr√™n Telegram
          await ctx.telegram.copyMessage(
            ctx.chat.id,
            ctx.chat.id,
            file.telegram_file_id,
            {
              caption: `üìÑ ${file.name}\nüìÖ ${new Date(file.date).toLocaleString()}`
            }
          );
          successCount++;
        }
      } catch (error) {
        console.error(`[Bot] L·ªói sao l∆∞u file ${file.name}:`, error);
        errorCount++;
      }
    }

    // G·ª≠i th·ªëng k√™ k·∫øt qu·∫£
    await ctx.reply(
      `‚úÖ ƒê√£ sao l∆∞u xong:\n` +
      `- Th√†nh c√¥ng: ${successCount} file\n` +
      `- L·ªói: ${errorCount} file`
    );
  } catch (error) {
    console.error('[Bot] L·ªói khi sao l∆∞u:', error);
    ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra khi sao l∆∞u');
  }
});

// Th√™m l·ªánh /restore ƒë·ªÉ kh√¥i ph·ª•c file t·ª´ Telegram
bot.command('restore', async (ctx) => {
  try {
    // Ki·ªÉm tra tin nh·∫Øn ƒë∆∞·ª£c reply
    if (!ctx.message.reply_to_message) {
      return ctx.reply(
        '‚ùå Vui l√≤ng reply tin nh·∫Øn ch·ª©a file c·∫ßn kh√¥i ph·ª•c\n' +
        'Ho·∫∑c s·ª≠ d·ª•ng /restore all ƒë·ªÉ kh√¥i ph·ª•c t·∫•t c·∫£ file t·ª´ tin nh·∫Øn ƒë√£ l∆∞u'
      );
    }

    const message = ctx.message.reply_to_message;
    
    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ file kh√¥ng
    if (!message.document && !message.photo && !message.video && !message.audio) {
      return ctx.reply('‚ùå Tin nh·∫Øn n√†y kh√¥ng ch·ª©a file');
    }

    // L·∫•y th√¥ng tin file
    const file = message.document || message.photo?.[0] || message.video || message.audio;
    const fileName = file.file_name || `file_${Date.now()}${mime.extension(file.mime_type)}`;

    // Th√™m v√†o fileStore n·∫øu ch∆∞a c√≥
    if (!fileStore.files.find(f => f.telegram_file_id === file.file_id)) {
      fileStore.files.push({
        id: file.file_id,
        name: fileName,
        type: 'file',
        path: '/' + fileName,
        size: file.file_size,
        mime_type: file.mime_type,
        date: new Date(),
        telegram_file_id: file.file_id
      });
      saveOnChange();
    }

    await ctx.reply(
      `‚úÖ ƒê√£ kh√¥i ph·ª•c file: ${fileName}\n` +
      `üì¶ K√≠ch th∆∞·ªõc: ${Math.round(file.file_size / 1024)} KB`
    );
  } catch (error) {
    console.error('[Bot] L·ªói khi kh√¥i ph·ª•c:', error);
    ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra khi kh√¥i ph·ª•c file');
  }
});

// Th√™m l·ªánh /restore all ƒë·ªÉ kh√¥i ph·ª•c t·∫•t c·∫£ file
bot.command('restore_all', async (ctx) => {
  try {
    // L·∫•y 100 tin nh·∫Øn g·∫ßn nh·∫•t
    const messages = await ctx.telegram.getChatHistory(ctx.chat.id, {
      limit: 100
    });

    let restoredCount = 0;
    let skipCount = 0;

    // Duy·ªát qua t·ª´ng tin nh·∫Øn
    for (const message of messages) {
      const file = message.document || message.photo?.[0] || message.video || message.audio;
      if (!file) continue;

      // Ki·ªÉm tra xem file ƒë√£ c√≥ trong fileStore ch∆∞a
      if (fileStore.files.find(f => f.telegram_file_id === file.file_id)) {
        skipCount++;
        continue;
      }

      // Th√™m file m·ªõi
      const fileName = file.file_name || `file_${Date.now()}${mime.extension(file.mime_type)}`;
      fileStore.files.push({
        id: file.file_id,
        name: fileName,
        type: 'file',
        path: '/' + fileName,
        size: file.file_size,
        mime_type: file.mime_type,
        date: new Date(message.date * 1000),
        telegram_file_id: file.file_id
      });
      restoredCount++;
    }

    saveOnChange();

    await ctx.reply(
      `‚úÖ ƒê√£ qu√©t xong:\n` +
      `- Kh√¥i ph·ª•c: ${restoredCount} file m·ªõi\n` +
      `- B·ªè qua: ${skipCount} file ƒë√£ c√≥`
    );
  } catch (error) {
    console.error('[Bot] L·ªói khi kh√¥i ph·ª•c t·∫•t c·∫£:', error);
    ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra khi kh√¥i ph·ª•c');
  }
});

// X·ª≠ l√Ω khi bot d·ª´ng
bot.stop = () => {
  saveData(); // L∆∞u d·ªØ li·ªáu tr∆∞·ªõc khi d·ª´ng
  bot.telegram.close();
};

module.exports = bot; 