#!/usr/bin/env python3
"""
Run Config Manager cho Telegram File Scanner
Qu·∫£n l√Ω c·∫•u h√¨nh tham s·ªë ƒë·∫ßu v√†o cho run.bat
"""

import json
import os
import sys
from datetime import datetime
from typing import Dict, Any, Optional


class RunConfigManager:
    """Qu·∫£n l√Ω c·∫•u h√¨nh run_config.json"""
    
    def __init__(self, config_file: str = 'run_config.json'):
        self.config_file = config_file
        self.config = {}
        self.load_config()
    
    def load_config(self) -> bool:
        """T·∫£i c·∫•u h√¨nh t·ª´ file"""
        try:
            if not os.path.exists(self.config_file):
                print(f"‚ùå File {self.config_file} kh√¥ng t·ªìn t·∫°i!")
                return False
            
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
            
            print(f"‚úÖ ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {self.config_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i c·∫•u h√¨nh: {e}")
            return False
    
    def save_config(self) -> bool:
        """L∆∞u c·∫•u h√¨nh v√†o file"""
        try:
            # Backup file c≈©
            if os.path.exists(self.config_file):
                backup_file = f"{self.config_file}.backup"
                with open(self.config_file, 'r', encoding='utf-8') as src:
                    with open(backup_file, 'w', encoding='utf-8') as dst:
                        dst.write(src.read())
            
            # L∆∞u config m·ªõi
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh v√†o {self.config_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u c·∫•u h√¨nh: {e}")
            return False
    
    def get_setting(self, section: str, key: str, default: Any = None) -> Any:
        """L·∫•y gi√° tr·ªã c·∫•u h√¨nh"""
        return self.config.get(section, {}).get(key, default)
    
    def set_setting(self, section: str, key: str, value: Any) -> None:
        """ƒê·∫∑t gi√° tr·ªã c·∫•u h√¨nh"""
        if section not in self.config:
            self.config[section] = {}
        self.config[section][key] = value
    
    def get_channel_to_scan(self) -> str:
        """L·∫•y channel c·∫ßn scan"""
        return self.config.get('channel', '@duongtinhchat92')
    
    def apply_to_main_config(self) -> bool:
        """√Åp d·ª•ng run_config v√†o config.json ch√≠nh"""
        try:
            # ƒê·ªçc config.json hi·ªán t·∫°i
            if not os.path.exists('config.json'):
                print("‚ùå File config.json kh√¥ng t·ªìn t·∫°i!")
                return False

            with open('config.json', 'r', encoding='utf-8') as f:
                main_config = json.load(f)

            # √Åp d·ª•ng c√°c thi·∫øt l·∫≠p t·ª´ run_config (c·∫•u tr√∫c t·ªëi gi·∫£n)

            # Channel
            channel = self.config.get('channel')
            if channel:
                main_config['channels']['use_default_channel'] = True
                main_config['channels']['default_channel'] = channel

            # Scanning settings
            max_messages = self.config.get('max_messages')
            if max_messages:
                main_config['scanning']['max_messages'] = max_messages

            batch_size = self.config.get('batch_size')
            if batch_size:
                main_config['scanning']['batch_size'] = batch_size

            # File types
            file_types = self.config.get('file_types', {})
            for file_type, enabled in file_types.items():
                if file_type in main_config['scanning']['file_types']:
                    main_config['scanning']['file_types'][file_type] = enabled

            # Output formats
            output_formats = self.config.get('output_formats', {})
            for format_name, enabled in output_formats.items():
                if format_name in main_config['output']['formats']:
                    main_config['output']['formats'][format_name]['enabled'] = enabled

            # Display
            show_progress = self.config.get('show_progress')
            if show_progress is not None:
                main_config['display']['show_progress'] = show_progress

            language = self.config.get('language')
            if language:
                main_config['display']['language'] = language

            # L∆∞u config.json ƒë√£ c·∫≠p nh·∫≠t
            with open('config.json', 'w', encoding='utf-8') as f:
                json.dump(main_config, f, indent=2, ensure_ascii=False)

            print("‚úÖ ƒê√£ √°p d·ª•ng run_config v√†o config.json")
            return True

        except Exception as e:
            print(f"‚ùå L·ªói khi √°p d·ª•ng c·∫•u h√¨nh: {e}")
            return False
    
    def show_current_settings(self) -> None:
        """Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i"""
        print("\n" + "="*50)
        print("        C·∫§U H√åNH HI·ªÜN T·∫†I")
        print("="*50)

        # Channel
        print(f"\nüì∫ CHANNEL:")
        print(f"   {self.config.get('channel', 'Ch∆∞a ƒë·∫∑t')}")

        # Scan settings
        print(f"\nüîç THI·∫æT L·∫¨P QU√âT:")
        print(f"   S·ªë tin nh·∫Øn t·ªëi ƒëa: {self.config.get('max_messages', 'Kh√¥ng gi·ªõi h·∫°n')}")
        print(f"   Batch size: {self.config.get('batch_size', 50)}")

        # File types
        file_types = self.config.get('file_types', {})
        enabled_types = [k for k, v in file_types.items() if v]
        print(f"   Lo·∫°i file: {', '.join(enabled_types) if enabled_types else 'T·∫•t c·∫£'}")

        # Output
        print(f"\nüìÅ ƒê·∫¶U RA:")
        output_formats = self.config.get('output_formats', {})
        enabled_formats = [k for k, v in output_formats.items() if v]
        print(f"   ƒê·ªãnh d·∫°ng: {', '.join(enabled_formats) if enabled_formats else 'M·∫∑c ƒë·ªãnh'}")

        # Display
        print(f"\nüñ•Ô∏è HI·ªÇN TH·ªä:")
        print(f"   Hi·ªán progress: {self.config.get('show_progress', True)}")
        print(f"   Ng√¥n ng·ªØ: {self.config.get('language', 'vi')}")

        print("\n" + "="*50)


def main():
    """Ch∆∞∆°ng tr√¨nh ch√≠nh"""
    print("üîß Run Config Manager - Telegram File Scanner")
    print("=" * 50)
    
    manager = RunConfigManager()
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'show':
            manager.show_current_settings()
        elif command == 'apply':
            if manager.apply_to_main_config():
                print("‚úÖ ƒê√£ √°p d·ª•ng c·∫•u h√¨nh th√†nh c√¥ng!")
            else:
                print("‚ùå Kh√¥ng th·ªÉ √°p d·ª•ng c·∫•u h√¨nh!")
                sys.exit(1)
        else:
            print(f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: {command}")
            print("S·ª≠ d·ª•ng: python run_config_manager.py [show|apply]")
            sys.exit(1)
    else:
        # Interactive mode
        manager.show_current_settings()
        
        print("\nB·∫°n c√≥ mu·ªën √°p d·ª•ng c·∫•u h√¨nh n√†y v√†o config.json? (y/n): ", end="")
        choice = input().lower().strip()
        
        if choice in ['y', 'yes', 'c√≥']:
            if manager.apply_to_main_config():
                print("‚úÖ ƒê√£ √°p d·ª•ng c·∫•u h√¨nh th√†nh c√¥ng!")
            else:
                print("‚ùå Kh√¥ng th·ªÉ √°p d·ª•ng c·∫•u h√¨nh!")
                sys.exit(1)
        else:
            print("H·ªßy b·ªè.")


if __name__ == "__main__":
    main()
