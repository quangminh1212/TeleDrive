#!/usr/bin/env python3
"""
Demo script ƒë·ªÉ show logging system trong action
M√¥ ph·ªèng qu√° tr√¨nh scan channel v·ªõi logging chi ti·∫øt
"""

import asyncio
import json
import time
from logger import setup_detailed_logging, log_step, log_config_change, log_api_call, log_file_operation, log_progress, log_error

async def demo_scan_process():
    """Demo qu√° tr√¨nh scan v·ªõi logging chi ti·∫øt"""
    
    # Load config v√† setup logging
    with open('config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    logging_config = config.get('logging', {})
    setup_detailed_logging(logging_config)
    
    print("üé¨ DEMO: Telegram File Scanner v·ªõi Logging Chi Ti·∫øt")
    print("=" * 60)
    
    # B∆∞·ªõc 1: Kh·ªüi t·∫°o
    log_step("KH·ªûI ƒê·ªòNG ·ª®NG D·ª§NG", "B·∫Øt ƒë·∫ßu demo qu√° tr√¨nh scan")
    await asyncio.sleep(1)
    
    # B∆∞·ªõc 2: Load config
    log_step("LOAD CONFIGURATION", "ƒêang t·∫£i c·∫•u h√¨nh t·ª´ config.json")
    log_config_change("LOAD", {
        "file": "config.json",
        "telegram_api_id": config.get('telegram', {}).get('api_id', 'N/A'),
        "logging_enabled": config.get('logging', {}).get('enabled', False)
    })
    await asyncio.sleep(1)
    
    # B∆∞·ªõc 3: Kh·ªüi t·∫°o client
    log_step("KH·ªûI T·∫†O CLIENT", "ƒêang t·∫°o Telegram client")
    log_api_call("TelegramClient.__init__", {
        "session_name": "demo_session",
        "api_id": config.get('telegram', {}).get('api_id', 'demo'),
        "api_hash": "demo_hash"
    })
    await asyncio.sleep(1)
    
    # B∆∞·ªõc 4: ƒêƒÉng nh·∫≠p
    log_step("ƒêƒÇNG NH·∫¨P", "ƒêang ƒëƒÉng nh·∫≠p v√†o Telegram")
    log_api_call("client.start", {
        "phone": config.get('telegram', {}).get('phone_number', '+84xxxxxxxxx')
    }, "success")
    await asyncio.sleep(1)
    
    # B∆∞·ªõc 5: L·∫•y th√¥ng tin channel
    log_step("L·∫§Y TH√îNG TIN CHANNEL", "ƒêang l·∫•y entity c·ªßa channel")
    log_api_call("client.get_entity", {
        "channel": "@demo_channel"
    }, "entity_found")
    await asyncio.sleep(1)
    
    # B∆∞·ªõc 6: ƒê·∫øm tin nh·∫Øn
    log_step("ƒê·∫æM TIN NH·∫ÆN", "ƒêang ƒë·∫øm t·ªïng s·ªë tin nh·∫Øn trong channel")
    total_messages = 1500  # Demo
    log_api_call("client.iter_messages", {
        "entity": "@demo_channel",
        "limit": None
    }, f"{total_messages} messages found")
    await asyncio.sleep(1)
    
    # B∆∞·ªõc 7: Qu√©t file
    log_step("B·∫ÆT ƒê·∫¶U QU√âT FILE", f"ƒêang qu√©t {total_messages:,} tin nh·∫Øn ƒë·ªÉ t√¨m file")
    
    files_found = 0
    for i in range(1, total_messages + 1):
        # M√¥ ph·ªèng t√¨m file
        if i % 10 == 0:  # Gi·∫£ s·ª≠ c·ª© 10 message c√≥ 1 file
            files_found += 1
            if files_found % 5 == 0:  # Log progress m·ªói 5 file
                log_progress(files_found, total_messages // 10, "files found")
        
        # Log progress t·ªïng th·ªÉ m·ªói 100 message
        if i % 100 == 0:
            log_progress(i, total_messages, "messages processed")
            await asyncio.sleep(0.1)  # T·∫°m d·ª´ng ƒë·ªÉ th·∫•y progress
    
    log_step("HO√ÄN TH√ÄNH QU√âT", f"ƒê√£ qu√©t {total_messages:,} tin nh·∫Øn, t√¨m th·∫•y {files_found} file")
    
    # B∆∞·ªõc 8: L∆∞u k·∫øt qu·∫£
    log_step("L∆ØU K·∫æT QU·∫¢", f"ƒêang l∆∞u {files_found} file v√†o c√°c ƒë·ªãnh d·∫°ng")
    
    # L∆∞u CSV
    log_file_operation("CREATE", "output/demo_files.csv", f"CSV v·ªõi {files_found} records")
    await asyncio.sleep(0.5)
    
    # L∆∞u Excel
    log_file_operation("CREATE", "output/demo_files.xlsx", f"Excel v·ªõi {files_found} records")
    await asyncio.sleep(0.5)
    
    # L∆∞u JSON
    log_file_operation("CREATE", "output/demo_files.json", f"JSON chi ti·∫øt v·ªõi {files_found} files")
    await asyncio.sleep(0.5)
    
    # L∆∞u Simple JSON
    log_file_operation("CREATE", "output/demo_simple.json", f"JSON ƒë∆°n gi·∫£n v·ªõi {files_found} files")
    await asyncio.sleep(0.5)
    
    # B∆∞·ªõc 9: Th·ªëng k√™
    log_step("TH·ªêNG K√ä", "T·∫°o b√°o c√°o th·ªëng k√™")
    stats = {
        "total_messages": total_messages,
        "files_found": files_found,
        "success_rate": f"{(files_found/total_messages*100):.1f}%",
        "file_types": {
            "documents": files_found // 2,
            "photos": files_found // 3,
            "videos": files_found // 4
        }
    }
    log_config_change("STATS", stats)
    
    # B∆∞·ªõc 10: Ho√†n th√†nh
    log_step("HO√ÄN TH√ÄNH", "Demo qu√° tr√¨nh scan ƒë√£ ho√†n th√†nh th√†nh c√¥ng")
    
    print("\n‚úÖ Demo ho√†n th√†nh!")
    print("üìÅ Ki·ªÉm tra th∆∞ m·ª•c logs/ ƒë·ªÉ xem chi ti·∫øt logging:")
    print("   - logs/scanner.log   (log ch√≠nh)")
    print("   - logs/config.log    (thay ƒë·ªïi config)")
    print("   - logs/api.log       (API calls)")
    print("   - logs/files.log     (file operations)")
    print("   - logs/errors.log    (errors n·∫øu c√≥)")

async def demo_with_error():
    """Demo v·ªõi l·ªói ƒë·ªÉ test error logging"""
    log_step("DEMO L·ªñI", "M√¥ ph·ªèng l·ªói ƒë·ªÉ test error logging")
    
    try:
        # M√¥ ph·ªèng l·ªói API
        raise ConnectionError("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Telegram API")
    except Exception as e:
        log_error(e, "Demo connection error")
    
    try:
        # M√¥ ph·ªèng l·ªói file
        raise FileNotFoundError("Kh√¥ng t√¨m th·∫•y file config")
    except Exception as e:
        log_error(e, "Demo file error")

if __name__ == "__main__":
    print("Ch·ªçn demo:")
    print("1. Demo qu√° tr√¨nh scan b√¨nh th∆∞·ªùng")
    print("2. Demo v·ªõi l·ªói")
    print("3. C·∫£ hai")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
    
    if choice in ['1', '3']:
        asyncio.run(demo_scan_process())
    
    if choice in ['2', '3']:
        print("\n" + "="*60)
        asyncio.run(demo_with_error())
