#!/usr/bin/env python3
"""
Script ƒë∆°n gi·∫£n ƒë·ªÉ test h·ªá th·ªëng logging
Ch·∫°y: python test_logs.py
"""

import sys
import os
from pathlib import Path

# Th√™m source v√†o path
sys.path.insert(0, 'source')

def test_logging():
    """Test logging system"""
    print("üß™ Testing TeleDrive Logging System")
    print("=" * 50)
    
    try:
        # T·∫°o th∆∞ m·ª•c logs
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)
        print(f"‚úÖ Logs directory: {logs_dir.absolute()}")
        
        # Test import
        from logger import setup_detailed_logging, log_step, log_api_call, log_file_operation
        print("‚úÖ Logger modules imported successfully")
        
        # Load config
        import json
        config_path = Path("source/config.json")
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            logging_config = config.get('logging', {})
            print(f"‚úÖ Logging config loaded: enabled={logging_config.get('enabled', False)}")
        else:
            print("‚ö†Ô∏è Config file not found, using default logging config")
            logging_config = {"enabled": True, "level": "INFO", "console_output": True}
        
        # Setup logging
        setup_detailed_logging(logging_config)
        print("‚úÖ Detailed logging setup complete")
        
        # Test logging functions
        log_step("TEST LOGGING", "ƒêang test h·ªá th·ªëng logging")
        log_api_call("test_api", {"test": "value"}, "success")
        log_file_operation("TEST", "test_file.txt", "Test file operation")
        
        print("‚úÖ All logging functions tested successfully")
        
        # Check log files
        print("\nüìÅ Log files created:")
        for log_file in logs_dir.glob("*.log"):
            size = log_file.stat().st_size
            print(f"   üìÑ {log_file.name} ({size} bytes)")
        
        print("\nüéâ Logging system test completed successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_logging()
    if success:
        print("\n‚úÖ Logging system is working correctly!")
    else:
        print("\n‚ùå Logging system has issues!")
    
    input("\nPress Enter to exit...")
