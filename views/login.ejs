<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Đăng nhập | TeleDrive</title>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .error-message {
      color: #dc3545;
      background-color: #f8d7da;
      border: 1px solid #f5c6cb;
      border-radius: 4px;
      padding: 10px;
      margin-bottom: 20px;
      display: none;
    }
    
    .success-message {
      color: #28a745;
      background-color: #d4edda;
      border: 1px solid #c3e6cb;
      border-radius: 4px;
      padding: 10px;
      margin-bottom: 20px;
      display: none;
    }

    .auth-code {
      font-family: monospace;
      font-size: 16px;
      background-color: #f8f9fa;
      padding: 12px 15px;
      border-radius: 4px;
      border: 1px solid #6c757d;
      display: block;
      margin: 15px 0;
      font-weight: bold;
      word-break: break-all;
      cursor: pointer;
      transition: background-color 0.2s;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .auth-code:hover {
      background-color: #e9ecef;
    }

    .auth-code:active {
      background-color: #dee2e6;
    }

    .login-instructions {
      background-color: #f8f9fa;
      border-left: 4px solid #0088cc;
      padding: 15px;
      margin: 20px 0;
      border-radius: 4px;
    }

    .login-instructions ol {
      margin: 10px 0 0 20px;
      padding: 0;
    }

    .login-instructions li {
      margin-bottom: 8px;
    }

    .auth-code-container {
      margin: 15px 0;
      display: none;
      background-color: #fff;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
      border: 1px solid #e9ecef;
    }

    .login-methods {
      margin-top: 20px;
    }

    .command-title {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
      font-weight: bold;
      color: #0088cc;
    }

    .command-title svg {
      margin-right: 5px;
    }

    .copy-feedback {
      font-size: 13px;
      color: #28a745;
      margin-top: 5px;
      display: none;
    }

    .copy-btn-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 8px;
    }

    #qr-container-error {
      text-align: center;
      padding: 20px;
      background-color: #f8f9fa;
      border-radius: 8px;
      margin: 10px 0;
      display: none;
    }
    
    .refresh-token {
      margin-top: 15px;
      text-align: center;
    }
    
    .refresh-token button {
      background-color: transparent;
      border: 1px solid #0088cc;
      color: #0088cc;
      padding: 6px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s;
    }
    
    .refresh-token button:hover {
      background-color: #e3f2fd;
    }
    
    .token-expiry {
      font-size: 12px;
      color: #6c757d;
      margin-top: 5px;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="logo">
        <h1>TeleDrive</h1>
      </div>
      <nav>
        <ul>
          <li><a href="/">Trang chủ</a></li>
        </ul>
      </nav>
    </header>

    <main>
      <div class="login-container">
        <div class="login-box">
          <h2>Đăng nhập bằng Telegram</h2>
          <p>Quét mã QR hoặc nhấp vào nút đăng nhập để kết nối với tài khoản Telegram của bạn.</p>
          
          <div id="error-message" class="error-message"></div>
          <div id="success-message" class="success-message"></div>
          
          <div class="login-instructions">
            <strong>Hướng dẫn đăng nhập:</strong>
            <ol>
              <li>Quét mã QR hoặc nhấn vào nút "Đăng nhập với Telegram"</li>
              <li>Khi Telegram mở ra, nhấn vào nút <strong>START</strong> hoặc gõ lệnh <strong>/start</strong></li>
              <li>Nếu bot không phản hồi, hãy sao chép lệnh bên dưới và dán vào chat với bot</li>
              <li>Đợi hệ thống xác thực và chuyển hướng tự động</li>
            </ol>
          </div>

          <div id="auth-code-container" class="auth-code-container">
            <div class="command-title">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                <path d="M6.854 4.646a.5.5 0 0 1 0 .708L4.207 8l2.647 2.646a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 0 1 .708 0zm2.292 0a.5.5 0 0 0 0 .708L11.793 8l-2.647 2.646a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708 0z"/>
              </svg>
              Sao chép và dán lệnh này vào Telegram:
            </div>
            <div id="full-command" class="auth-code">/start</div>
            <div class="copy-btn-container">
              <div id="copy-feedback" class="copy-feedback">Đã sao chép thành công!</div>
              <button id="copy-code" class="btn btn-secondary">Sao chép lệnh</button>
            </div>
            <div class="token-expiry">
              <span id="token-expiry-time">Lệnh hết hạn sau 30 phút</span>
            </div>
            <div class="refresh-token">
              <button id="refresh-token-btn">Làm mới mã xác thực</button>
            </div>
          </div>
          
          <div class="login-methods">
            <div id="qr-code-container">
              <div id="qr-code"></div>
              <div id="qr-container-error">
                <p>Không thể tải mã QR. Vui lòng sử dụng nút đăng nhập bên dưới.</p>
              </div>
              <p class="qr-help">Quét mã QR bằng ứng dụng Telegram</p>
            </div>
            
            <div class="login-separator">
              <span>hoặc</span>
            </div>
            
            <div class="login-button-container">
              <button id="telegram-login-button" class="btn btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="#ffffff">
                  <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.562 8.248l-1.43 6.69c-.104.487-.401.674-.813.419l-2.265-1.66-1.099 1.06c-.124.12-.226.22-.452.22l.163-2.279 4.151-3.738c.18-.163-.039-.253-.28-.09L8.36 11.883l-2.32-.726c-.506-.156-.514-.506.106-.748l9.073-3.5c.42-.156.785.096.646.6l-.052.027.001.012z"/>
                </svg>
                Đăng nhập với Telegram
              </button>
            </div>
          </div>
          
          <div id="login-status" class="login-status hidden">
            <div class="spinner"></div>
            <p>Đang xác thực...</p>
          </div>
        </div>
      </div>
    </main>

    <!-- Debug log section -->
    <div id="debug-section" style="display: none; margin: 20px; padding: 15px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px;">
      <h3>Debug Log</h3>
      <div id="debug-log" style="max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; background: #212529; color: #f8f9fa; padding: 10px; border-radius: 4px;"></div>
      <div style="margin-top: 10px;">
        <button id="clear-log-btn" class="btn btn-secondary">Clear Log</button>
        <button id="test-login-btn" class="btn btn-primary">Test Login Check</button>
        <div style="margin-top: 10px;">
          <strong>Current Token:</strong> <span id="current-token-display"></span>
        </div>
      </div>
    </div>

    <footer>
      <p>&copy; 2025 TeleDrive. Tất cả các quyền được bảo lưu.</p>
    </footer>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.0/build/qrcode.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const qrCodeContainer = document.getElementById('qr-code');
      const qrContainerError = document.getElementById('qr-container-error');
      const telegramLoginButton = document.getElementById('telegram-login-button');
      const loginStatus = document.getElementById('login-status');
      const errorMessage = document.getElementById('error-message');
      const successMessage = document.getElementById('success-message');
      const authCodeContainer = document.getElementById('auth-code-container');
      const fullCommand = document.getElementById('full-command');
      const copyCodeButton = document.getElementById('copy-code');
      const copyFeedback = document.getElementById('copy-feedback');
      const refreshTokenBtn = document.getElementById('refresh-token-btn');
      const tokenExpiryTime = document.getElementById('token-expiry-time');
      
      // Debug mode - kiểm tra URL params
      const urlParams = new URLSearchParams(window.location.search);
      const debugMode = urlParams.get('debug') === 'true';
      
      let loginCheckInterval;
      let tokenExpiryInterval;
      let tokenExpiry;
      let currentToken = '';

      // Hàm debug log
      function debugLog(message) {
        if (debugMode) {
          console.log(`[DEBUG] ${message}`);
          // Hiển thị log trên UI khi ở debug mode
          const debugLog = document.getElementById('debug-log');
          if (debugLog) {
            const logEntry = document.createElement('div');
            logEntry.textContent = `${new Date().toLocaleTimeString()}: ${message}`;
            debugLog.prepend(logEntry);
            if (debugLog.children.length > 10) {
              debugLog.removeChild(debugLog.lastChild);
            }
          }
        }
      }

      function showError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        setTimeout(() => {
          errorMessage.style.display = 'none';
        }, 8000);
      }
      
      function showSuccess(message) {
        successMessage.textContent = message;
        successMessage.style.display = 'block';
        setTimeout(() => {
          successMessage.style.display = 'none';
        }, 8000);
      }

      // Copy full command to clipboard
      function copyToClipboard() {
        const commandText = fullCommand.textContent;
        navigator.clipboard.writeText(commandText)
          .then(() => {
            copyFeedback.style.display = 'block';
            copyCodeButton.textContent = 'Đã sao chép';
            
            setTimeout(() => {
              copyFeedback.style.display = 'none';
              copyCodeButton.textContent = 'Sao chép lệnh';
            }, 3000);
          })
          .catch(err => {
            console.error('Lỗi khi sao chép: ', err);
            showError('Không thể sao chép lệnh. Vui lòng tự chép.');
          });
      }

      copyCodeButton.addEventListener('click', copyToClipboard);
      fullCommand.addEventListener('click', copyToClipboard);
      
      // Refresh token functionality
      refreshTokenBtn.addEventListener('click', function() {
        // Clear existing intervals
        if (loginCheckInterval) {
          clearInterval(loginCheckInterval);
        }
        if (tokenExpiryInterval) {
          clearInterval(tokenExpiryInterval);
        }
        
        refreshTokenBtn.textContent = 'Đang làm mới...';
        refreshTokenBtn.disabled = true;
        
        // Fetch new login link
        fetchLoginLink();
      });
      
      // Update token expiry time display
      function updateExpiryTimeDisplay() {
        if (!tokenExpiry) return;
        
        const now = Date.now();
        const timeLeft = tokenExpiry - now;
        
        if (timeLeft <= 0) {
          tokenExpiryTime.textContent = 'Mã xác thực đã hết hạn! Vui lòng làm mới.';
          tokenExpiryTime.style.color = '#dc3545';
          
          if (tokenExpiryInterval) {
            clearInterval(tokenExpiryInterval);
          }
          
          return;
        }
        
        // Format remaining time
        const minutes = Math.floor(timeLeft / (60 * 1000));
        const seconds = Math.floor((timeLeft % (60 * 1000)) / 1000);
        
        let timeString = 'Lệnh hết hạn sau ';
        if (minutes > 0) {
          timeString += `${minutes} phút `;
        }
        timeString += `${seconds} giây`;
        
        tokenExpiryTime.textContent = timeString;
        
        // Change color when close to expiry
        if (timeLeft < 60 * 1000) { // less than 1 minute
          tokenExpiryTime.style.color = '#dc3545';
        } else if (timeLeft < 5 * 60 * 1000) { // less than 5 minutes
          tokenExpiryTime.style.color = '#fd7e14';
        } else {
          tokenExpiryTime.style.color = '#6c757d';
        }
      }
      
      // Fetch login link and handle initialization
      function fetchLoginLink() {
        debugLog('Đang yêu cầu link đăng nhập mới...');
        
        fetch('/api/auth/login-link')
          .then(response => response.json())
          .then(data => {
            debugLog(`Nhận được token: ${data.token.substring(0, 10)}...`);
            
            // Reset refresh button
            refreshTokenBtn.textContent = 'Làm mới mã xác thực';
            refreshTokenBtn.disabled = false;
            
            if (!data.deepLink || !data.token) {
              showError('Không thể tạo liên kết đăng nhập, vui lòng thử lại sau.');
              return;
            }

            // Set token expiry
            tokenExpiry = data.expiresAt;
            currentToken = data.token;
            
            // Hiển thị token trong debug mode
            if (debugMode) {
              document.getElementById('current-token-display').textContent = currentToken;
            }
            
            // Start updating expiry time display
            updateExpiryTimeDisplay();
            if (tokenExpiryInterval) {
              clearInterval(tokenExpiryInterval);
            }
            tokenExpiryInterval = setInterval(updateExpiryTimeDisplay, 1000);

            // Hiển thị đầy đủ lệnh với token
            const command = `/start login_${data.token}`;
            fullCommand.textContent = command;
            authCodeContainer.style.display = 'block';
            
            // Generate QR code
            QRCode.toCanvas(qrCodeContainer, data.deepLink, {
              width: 200,
              margin: 2,
              color: {
                dark: '#0088cc',
                light: '#ffffff'
              }
            }).then(() => {
              qrContainerError.style.display = 'none';
              qrCodeContainer.style.display = 'block';
            }).catch(err => {
              console.error('Error generating QR code:', err);
              qrContainerError.style.display = 'block';
              qrCodeContainer.style.display = 'none';
            });
            
            // Set login button
            if (!telegramLoginButton.hasEventListener) {
              telegramLoginButton.addEventListener('click', function() {
                const currentCommand = fullCommand.textContent;
                showSuccess('Đang mở Telegram... Nhấn nút START hoặc dán lệnh đã sao chép');
                
                // Mở cửa sổ Telegram nhỏ hơn và ở giữa màn hình
                const width = 600;
                const height = 600;
                const left = (window.screen.width - width) / 2;
                const top = (window.screen.height - height) / 2;
                const options = `width=${width},height=${height},left=${left},top=${top}`;
                
                window.open(data.deepLink, '_blank', options);
                startLoginCheck(data.token);
              });
              telegramLoginButton.hasEventListener = true;
            }
            
            // Start checking for login
            startLoginCheck(data.token);
          })
          .catch(error => {
            console.error('Error fetching login link:', error);
            showError('Lỗi kết nối đến máy chủ. Vui lòng thử lại sau.');
            qrContainerError.style.display = 'block';
            qrCodeContainer.style.display = 'none';
            
            // Reset refresh button
            refreshTokenBtn.textContent = 'Làm mới mã xác thực';
            refreshTokenBtn.disabled = false;
          });
      }
      
      // Thêm function yêu cầu đăng nhập bắt buộc khi có lỗi
      function forceLogin(token) {
        debugLog('Đang thực hiện đăng nhập bắt buộc với token: ' + token.substring(0, 10) + '...');
        
        fetch('/api/auth/force-login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ token: token })
        })
        .then(response => response.json())
        .then(data => {
          debugLog('Kết quả đăng nhập bắt buộc: ' + JSON.stringify(data));
          
          if (data.success) {
            showSuccess('Đăng nhập thành công! Đang chuyển hướng...');
            setTimeout(() => {
              window.location.href = data.redirectUrl || '/dashboard';
            }, 1000);
          } else {
            showError('Không thể đăng nhập bắt buộc: ' + data.message);
          }
        })
        .catch(error => {
          debugLog('Lỗi đăng nhập bắt buộc: ' + error.message);
          showError('Lỗi kết nối khi đăng nhập bắt buộc');
        });
      }

      // Thêm function kiểm tra debug thông tin token
      function checkTokenDebug(token) {
        debugLog('Đang kiểm tra debug token: ' + token.substring(0, 10) + '...');
        
        fetch(`/api/auth/debug?token=${token}`)
          .then(response => response.json())
          .then(data => {
            debugLog('Kết quả debug token: ' + JSON.stringify(data));
            
            // Nếu token có user nhưng chưa đăng nhập web
            if (data.status === 'success' && data.tokenInfo.hasUser) {
              debugLog('PHÁT HIỆN: Token đã xác thực qua Telegram nhưng chưa đăng nhập web');
              showSuccess('Đã phát hiện xác thực Telegram thành công. Đang khôi phục đăng nhập...');
              
              // Thêm nút khôi phục đăng nhập
              const recoverButton = document.createElement('button');
              recoverButton.textContent = 'Khôi phục đăng nhập';
              recoverButton.className = 'btn btn-success';
              recoverButton.style.marginTop = '10px';
              recoverButton.addEventListener('click', () => forceLogin(token));
              
              loginStatus.innerHTML = `
                <p>Phát hiện xác thực Telegram thành công nhưng chưa đăng nhập web.</p>
              `;
              loginStatus.appendChild(recoverButton);
              
              // Tự động khôi phục sau 2 giây
              setTimeout(() => {
                forceLogin(token);
              }, 2000);
            }
          })
          .catch(error => {
            debugLog('Lỗi kiểm tra debug: ' + error.message);
          });
      }

      // Cập nhật hàm startLoginCheck để thực hiện kiểm tra debug và phục hồi sau một số lần thử
      function startLoginCheck(token) {
        loginStatus.classList.remove('hidden');
        debugLog(`Bắt đầu kiểm tra đăng nhập với token: ${token.substring(0, 10)}...`);
        
        // Clear existing interval
        if (loginCheckInterval) {
          clearInterval(loginCheckInterval);
        }
        
        let attempts = 0;
        const maxAttempts = 60; // 3 minutes max (60 * 3s)
        const checkInterval = debugMode ? 1000 : 3000; // Giảm interval khi debug
        
        // Check login status every 3 seconds (or 1 second in debug mode)
        loginCheckInterval = setInterval(() => {
          attempts++;
          
          // Kiểm tra debug sau 5 lần thử và sau đó cứ 10 lần thử một
          if (attempts === 5 || (attempts > 5 && attempts % 10 === 0)) {
            checkTokenDebug(token);
          }
          
          // Stop checking after max attempts
          if (attempts >= maxAttempts) {
            clearInterval(loginCheckInterval);
            loginStatus.innerHTML = '<p>Hết thời gian đăng nhập. Vui lòng làm mới trang để thử lại.</p>';
            showError('Hết thời gian đăng nhập. Vui lòng làm mới mã xác thực và thử lại.');
            debugLog('Hết thời gian kiểm tra đăng nhập sau ' + attempts + ' lần thử');
            
            // Thử kiểm tra debug một lần cuối
            checkTokenDebug(token);
            return;
          }
          
          debugLog(`Kiểm tra đăng nhập lần thứ ${attempts}...`);
          
          fetch(`/api/auth/check-login?token=${token}`)
            .then(response => response.json())
            .then(data => {
              debugLog(`Kết quả kiểm tra: ${JSON.stringify(data)}`);
              
              if (data.loggedIn) {
                clearInterval(loginCheckInterval);
                loginStatus.innerHTML = '<p>Đăng nhập thành công! Đang chuyển hướng...</p>';
                showSuccess('Đăng nhập thành công! Đang chuyển hướng...');
                debugLog('Đăng nhập thành công, đang chuyển hướng...');
                setTimeout(() => {
                  window.location.href = data.redirectUrl || '/dashboard';
                }, 1000);
              } else if (data.waitingForTelegram) {
                // Token valid but waiting for Telegram action
                loginStatus.innerHTML = `
                  <div class="spinner"></div>
                  <p>Đang chờ xác thực từ Telegram... Vui lòng mở Telegram và nhập lệnh</p>
                `;
                debugLog('Đang chờ xác thực từ Telegram...');
              } else if (data.error) {
                // Show specific error from API
                showError(data.error);
                debugLog(`Lỗi: ${data.error}`);
              }
            })
            .catch(error => {
              console.error('Error checking login status:', error);
              debugLog(`Lỗi khi kiểm tra: ${error.message}`);
            });
        }, checkInterval);
      }
      
      // Khởi tạo debug UI nếu ở debug mode
      if (debugMode) {
        document.getElementById('debug-section').style.display = 'block';
        
        // Thêm event listeners cho các nút debug
        document.getElementById('clear-log-btn').addEventListener('click', function() {
          document.getElementById('debug-log').innerHTML = '';
        });
        
        document.getElementById('test-login-btn').addEventListener('click', function() {
          if (currentToken) {
            debugLog(`Test kiểm tra đăng nhập với token: ${currentToken.substring(0, 10)}...`);
            fetch(`/api/auth/check-login?token=${currentToken}`)
              .then(response => response.json())
              .then(data => {
                debugLog(`Kết quả test: ${JSON.stringify(data)}`);
              })
              .catch(error => {
                debugLog(`Lỗi test: ${error.message}`);
              });
          } else {
            debugLog('Không có token hiện tại để test');
          }
        });
        
        // Thêm nút debug token và force login
        const debugSection = document.getElementById('debug-section');
        
        // Button debug token
        const debugTokenBtn = document.createElement('button');
        debugTokenBtn.textContent = 'Debug Token';
        debugTokenBtn.className = 'btn btn-info';
        debugTokenBtn.style.marginLeft = '10px';
        debugTokenBtn.addEventListener('click', function() {
          if (currentToken) {
            debugLog(`Đang gọi API debug token...`);
            checkTokenDebug(currentToken);
          } else {
            debugLog('Không có token hiện tại để debug');
          }
        });
        
        // Button force login
        const forceLoginBtn = document.createElement('button');
        forceLoginBtn.textContent = 'Force Login';
        forceLoginBtn.className = 'btn btn-warning';
        forceLoginBtn.style.marginLeft = '10px';
        forceLoginBtn.addEventListener('click', function() {
          if (currentToken) {
            debugLog(`Đang gọi API force login...`);
            forceLogin(currentToken);
          } else {
            debugLog('Không có token hiện tại để force login');
          }
        });
        
        // Thêm các nút vào section
        document.getElementById('debug-section').querySelector('div').appendChild(debugTokenBtn);
        document.getElementById('debug-section').querySelector('div').appendChild(forceLoginBtn);
        
        debugLog('Debug mode được kích hoạt');
      }
      
      // Initialize
      fetchLoginLink();
    });
  </script>
</body>
</html> 