<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Đăng nhập - TeleDrive</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }
    .login-container {
      max-width: 400px;
      width: 100%;
      padding: 20px;
    }
    .login-card {
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      padding: 30px;
    }
    .login-header {
      text-align: center;
      margin-bottom: 30px;
    }
    .login-logo {
      font-size: 48px;
      color: #0d6efd;
      margin-bottom: 15px;
    }
    .login-title {
      font-weight: 600;
      margin-bottom: 5px;
    }
    .login-subtitle {
      color: #6c757d;
      font-size: 14px;
    }
    .login-btn {
      width: 100%;
      padding: 15px;
      font-weight: 500;
      font-size: 16px;
      margin-bottom: 15px;
      border-radius: 10px;
      background-color: #0088cc;
      border-color: #0088cc;
    }
    .login-btn:hover {
      background-color: #0077b5;
      border-color: #0077b5;
    }
    .login-btn i {
      font-size: 20px;
      margin-right: 10px;
    }
    .login-footer {
      text-align: center;
      margin-top: 20px;
      font-size: 14px;
      color: #6c757d;
    }
    .alert {
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <div class="login-container">
    <div class="login-card">
      <div class="login-header">
        <div class="login-logo">
          <i class="bi bi-telegram"></i>
        </div>
        <h4 class="login-title">TeleDrive</h4>
        <p class="login-subtitle">Đăng nhập bằng Telegram để quản lý file của bạn</p>
      </div>
      
      <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-triangle-fill me-2"></i>
          <%= error %>
        </div>
      <% } %>
      
      <!-- Nút đăng nhập Telegram đơn giản -->
      <button id="telegramLoginBtn" class="btn btn-primary login-btn">
        <i class="bi bi-telegram"></i> Đăng nhập với Telegram
      </button>
      
      <div class="login-footer">
        <p class="mb-0">
          <i class="bi bi-info-circle me-1"></i>
          Đăng nhập bằng Telegram để bắt đầu quản lý file
        </p>
        <% if (typeof botUsername !== 'undefined' && botUsername) { %>
          <p class="mt-2 mb-0 text-muted">
            <small>Bot Telegram: @<%= botUsername %></small>
          </p>
        <% } %>
        <div id="statusMessage" class="mt-3 text-center" style="display: none;"></div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const loginBtn = document.getElementById('telegramLoginBtn');
      const statusMessage = document.getElementById('statusMessage');
      let authCode = '';
      let checkInterval = null;
      
      // Xử lý đăng nhập Telegram
      loginBtn.addEventListener('click', async function() {
        try {
          // Lấy mã xác thực từ server
          const authResponse = await fetch('/api/auth/get-auth-code');
          const authData = await authResponse.json();
          
          if (!authData.success) {
            showStatus('Không thể tạo mã xác thực. Vui lòng thử lại.', 'danger');
            return;
          }
          
          // Lưu mã xác thực để kiểm tra sau
          authCode = authData.authCode;
          
          // Mở tab mới để xác thực
          const botUsername = '<%= botUsername %>';
          const authUrl = `https://telegram.me/${botUsername}?start=auth_${authCode}`;
          window.open(authUrl, '_blank');
          
          // Hiển thị trạng thái và bắt đầu kiểm tra
          showStatus('Đang đợi xác thực từ Telegram...', 'info');
          
          // Bắt đầu kiểm tra trạng thái xác thực
          if (checkInterval) {
            clearInterval(checkInterval);
          }
          
          checkInterval = setInterval(checkAuthStatus, 3000);
        } catch (error) {
          console.error('Lỗi khi bắt đầu xác thực:', error);
          showStatus('Đã xảy ra lỗi. Vui lòng thử lại.', 'danger');
        }
      });
      
      // Kiểm tra trạng thái xác thực
      async function checkAuthStatus() {
        try {
          if (!authCode) return;
          
          const response = await fetch('/api/auth/verify', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ authCode: authCode })
          });
          
          const data = await response.json();
          
          if (data.success) {
            // Xác thực thành công
            clearInterval(checkInterval);
            showStatus('Xác thực thành công! Đang chuyển hướng...', 'success');
            
            // Chuyển hướng đến trang chính
            setTimeout(() => {
              window.location.href = '/';
            }, 1000);
          }
        } catch (error) {
          console.error('Lỗi khi kiểm tra trạng thái:', error);
        }
      }
      
      // Hiển thị thông báo trạng thái
      function showStatus(message, type) {
        statusMessage.textContent = message;
        statusMessage.style.display = 'block';
        
        // Loại bỏ tất cả các class màu
        statusMessage.classList.remove('text-danger', 'text-success', 'text-info', 'text-warning');
        
        // Thêm class tương ứng
        switch (type) {
          case 'danger':
            statusMessage.classList.add('text-danger');
            break;
          case 'success':
            statusMessage.classList.add('text-success');
            break;
          case 'info':
            statusMessage.classList.add('text-info');
            break;
          case 'warning':
            statusMessage.classList.add('text-warning');
            break;
        }
      }
    });
  </script>
</body>
</html> 