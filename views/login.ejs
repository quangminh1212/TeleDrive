<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Đăng nhập - TeleDrive</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
  <script src="https://telegram.org/js/telegram-widget.js"></script>
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }
    .login-container {
      max-width: 450px;
      width: 100%;
      padding: 20px;
    }
    .login-card {
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      padding: 30px;
    }
    .login-header {
      text-align: center;
      margin-bottom: 30px;
    }
    .login-logo {
      font-size: 48px;
      color: #0d6efd;
      margin-bottom: 15px;
    }
    .login-title {
      font-weight: 600;
      margin-bottom: 5px;
    }
    .login-subtitle {
      color: #6c757d;
      font-size: 14px;
    }
    .login-btn {
      width: 100%;
      padding: 15px;
      font-weight: 500;
      font-size: 16px;
      margin-bottom: 15px;
      border-radius: 10px;
      background-color: #0088cc;
      border-color: #0088cc;
    }
    .login-btn:hover {
      background-color: #0077b5;
      border-color: #0077b5;
    }
    .login-btn i {
      font-size: 20px;
      margin-right: 10px;
    }
    .login-footer {
      text-align: center;
      margin-top: 20px;
      font-size: 14px;
      color: #6c757d;
    }
    .alert {
      margin-bottom: 20px;
    }
    .divider {
      display: flex;
      align-items: center;
      margin: 20px 0;
      color: #6c757d;
    }
    .divider::before, .divider::after {
      content: "";
      flex-grow: 1;
      background: rgba(0,0,0,0.1);
      height: 1px;
      margin: 0 10px;
    }
    .telegram-login-box {
      display: flex;
      justify-content: center;
      margin: 20px 0;
    }
    #telegram-login-teledrive_bot {
      overflow: hidden;
    }
    .step {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
    .step-number {
      background-color: #0088cc;
      color: white;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
      font-weight: bold;
      margin-right: 10px;
    }
    .auth-method {
      border: 1px solid #dee2e6;
      border-radius: 10px;
      padding: 15px;
      margin-bottom: 15px;
    }
    .auth-method-title {
      font-weight: 600;
      margin-bottom: 10px;
      color: #0088cc;
    }
    #manual-login-tab {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="login-container">
    <div class="login-card">
      <div class="login-header">
        <div class="login-logo">
          <i class="bi bi-telegram"></i>
        </div>
        <h4 class="login-title">TeleDrive</h4>
        <p class="login-subtitle">Đăng nhập bằng Telegram để quản lý file của bạn</p>
      </div>
      
      <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-triangle-fill me-2"></i>
          <%= error %>
        </div>
      <% } %>
      
      <!-- Phương thức 1: Widget Telegram -->
      <div class="auth-method">
        <div class="auth-method-title">
          <i class="bi bi-1-circle-fill me-1"></i> Đăng nhập nhanh
        </div>
        <p class="small mb-3">Đăng nhập trực tiếp bằng tài khoản Telegram của bạn:</p>
        <div class="telegram-login-box">
          <script async src="https://telegram.org/js/telegram-widget.js?22" 
            data-telegram-login="<%= botUsername %>" 
            data-size="large" 
            data-radius="10"
            data-auth-url="/api/auth/telegram/callback" 
            data-request-access="write">
          </script>
        </div>
      </div>
      
      <div class="divider">hoặc</div>
      
      <!-- Phương thức 2: Đăng nhập thủ công -->
      <div class="auth-method">
        <div class="auth-method-title">
          <i class="bi bi-2-circle-fill me-1"></i> Đăng nhập thủ công
        </div>
        
        <!-- Nút đăng nhập Telegram đơn giản -->
        <button id="telegramLoginBtn" class="btn btn-primary login-btn">
          <i class="bi bi-telegram"></i> Kết nối với Telegram Bot
        </button>
        
        <div id="instructions" class="mt-3" style="display: none;">
          <div class="step">
            <div class="step-number">1</div>
            <div>Nhấn nút <strong>START</strong> khi kết nối với bot</div>
          </div>
          <div class="step">
            <div class="step-number">2</div>
            <div>Nhập mã xác thực: <span id="authCode" class="fw-bold text-primary"></span></div>
          </div>
          <div class="step">
            <div class="step-number">3</div>
            <div>Đợi hệ thống xác thực</div>
          </div>
          
          <div class="mt-3 p-2 bg-light rounded" id="authCodeDisplay">
            <p class="small mb-1">Sao chép lệnh này và gửi cho bot nếu không tự mở được Telegram:</p>
            <div class="d-flex">
              <code class="flex-grow-1" id="authCommand" style="word-break: break-all;"></code>
              <button class="btn btn-sm btn-outline-secondary ms-2" id="copyAuthBtn" title="Sao chép"><i class="bi bi-clipboard"></i></button>
            </div>
          </div>
        </div>
        <div id="statusMessage" class="mt-3 text-center" style="display: none;"></div>
      </div>
    </div>
    
    <div class="login-footer mt-3">
      <p class="mb-0">
        <i class="bi bi-info-circle me-1"></i>
        Bot Telegram: @<%= botUsername %>
      </p>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const loginBtn = document.getElementById('telegramLoginBtn');
      const statusMessage = document.getElementById('statusMessage');
      const instructions = document.getElementById('instructions');
      const authCodeDisplay = document.getElementById('authCodeDisplay');
      const authCommand = document.getElementById('authCommand');
      const authCodeSpan = document.getElementById('authCode');
      const copyAuthBtn = document.getElementById('copyAuthBtn');
      let authCode = '';
      let checkInterval = null;
      
      // Xử lý sao chép mã xác thực
      copyAuthBtn.addEventListener('click', function() {
        const commandText = authCommand.textContent;
        navigator.clipboard.writeText(commandText).then(() => {
          copyAuthBtn.innerHTML = '<i class="bi bi-check"></i>';
          setTimeout(() => {
            copyAuthBtn.innerHTML = '<i class="bi bi-clipboard"></i>';
          }, 2000);
        }).catch(err => {
          console.error('Lỗi khi sao chép vào clipboard:', err);
        });
      });
      
      // Kiểm tra trạng thái xác thực
      async function checkAuthStatus() {
        try {
          if (!authCode) return;
          
          console.log('Đang kiểm tra mã xác thực:', authCode);
          
          // Sử dụng API check-status để kiểm tra trạng thái xác thực
          const response = await fetch('/api/auth/check-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ authCode: authCode })
          });
          
          if (!response.ok) {
            console.error('Lỗi khi kiểm tra trạng thái:', response.status);
            return;
          }
          
          const data = await response.json();
          console.log('Kết quả kiểm tra trạng thái:', data);
          
          if (data.success) {
            // Xác thực thành công
            clearInterval(checkInterval);
            showStatus('✅ Xác thực thành công! Đang chuyển hướng...', 'success');
            
            // Chuyển hướng đến trang chính
            setTimeout(() => {
              window.location.href = '/';
            }, 1500);
          } else if (data.status === 'pending') {
            // Đang đợi xác thực
            showStatus('⏳ Đang đợi xác thực từ Telegram... Vui lòng gửi mã xác thực cho bot.', 'info');
          } else if (data.status === 'not_found') {
            // Mã không tồn tại
            showStatus('⚠️ Mã xác thực không hợp lệ. Vui lòng thử lại.', 'warning');
          } else {
            showStatus('⏳ Đang kiểm tra xác thực...', 'info');
          }
        } catch (error) {
          console.error('Lỗi khi kiểm tra trạng thái:', error);
        }
      }
      
      // Xử lý đăng nhập Telegram
      loginBtn.addEventListener('click', async function() {
        try {
          loginBtn.disabled = true;
          loginBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Đang kết nối...';
          
          // Lấy mã xác thực từ server
          const authResponse = await fetch('/api/auth/get-auth-code');
          const authData = await authResponse.json();
          
          if (!authData.success) {
            showStatus('❌ Không thể tạo mã xác thực. Vui lòng thử lại.', 'danger');
            loginBtn.disabled = false;
            loginBtn.innerHTML = '<i class="bi bi-telegram"></i> Kết nối với Telegram Bot';
            return;
          }
          
          // Lưu mã xác thực để kiểm tra sau
          authCode = authData.authCode;
          
          // Hiển thị hướng dẫn và mã
          instructions.style.display = 'block';
          authCodeSpan.textContent = authCode;
          
          // Hiển thị mã xác thực để sao chép
          authCommand.textContent = `/auth ${authCode}`;
          
          // Mở tab mới để xác thực
          const botUsername = '<%= botUsername %>';
          const authUrl = `tg://resolve?domain=${botUsername}`;
          window.open(authUrl, '_blank');
          
          // Nếu không mở được với protocol tg://, thử với https://t.me/
          setTimeout(() => {
            // Thử mở lại nếu chưa mở được
            const fallbackUrl = `https://t.me/${botUsername}`;
            const fallbackWindow = window.open(fallbackUrl, '_blank');
            
            if (!fallbackWindow || fallbackWindow.closed || typeof fallbackWindow.closed === 'undefined') {
              // Hiển thị hướng dẫn sao chép lệnh nếu không mở được
              showStatus(`Không thể mở Telegram tự động. Vui lòng sao chép mã xác thực và gửi cho @${botUsername}`, 'warning');
            }
          }, 1000);
          
          // Hiển thị trạng thái và bắt đầu kiểm tra
          showStatus('🔄 Đang đợi xác thực từ Telegram...', 'info');
          
          // Bắt đầu kiểm tra trạng thái xác thực
          if (checkInterval) {
            clearInterval(checkInterval);
          }
          
          // Đợi 2 giây trước khi bắt đầu kiểm tra để đảm bảo bot đã nhận được yêu cầu
          setTimeout(() => {
            // Kiểm tra trạng thái ngay lập tức trước khi bắt đầu interval
            checkAuthStatus();
            checkInterval = setInterval(checkAuthStatus, 3000);
          }, 2000);
        } catch (error) {
          console.error('Lỗi khi bắt đầu xác thực:', error);
          showStatus('❌ Đã xảy ra lỗi. Vui lòng thử lại.', 'danger');
          loginBtn.disabled = false;
          loginBtn.innerHTML = '<i class="bi bi-telegram"></i> Kết nối với Telegram Bot';
        }
      });
      
      // Hiển thị thông báo trạng thái
      function showStatus(message, type) {
        statusMessage.textContent = message;
        statusMessage.style.display = 'block';
        
        // Loại bỏ tất cả các class màu
        statusMessage.classList.remove('text-danger', 'text-success', 'text-info', 'text-warning');
        
        // Thêm class tương ứng
        switch (type) {
          case 'danger':
            statusMessage.classList.add('text-danger');
            break;
          case 'success':
            statusMessage.classList.add('text-success');
            break;
          case 'info':
            statusMessage.classList.add('text-info');
            break;
          case 'warning':
            statusMessage.classList.add('text-warning');
            break;
        }
      }
    });
  </script>
</body>
</html> 