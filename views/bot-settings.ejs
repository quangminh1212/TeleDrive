<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bot Settings - TeleDrive</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .status-indicator {
      display: inline-block;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      margin-right: 8px;
    }
    .status-online {
      background-color: #28a745;
    }
    .status-offline {
      background-color: #dc3545;
    }
    .status-unknown {
      background-color: #ffc107;
    }
    .bot-info-card {
      transition: all 0.3s ease;
      border: 1px solid #dee2e6;
    }
    .bot-info-card:hover {
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .loading {
      opacity: 0.6;
      pointer-events: none;
    }
    #debug-log {
      max-height: 300px;
      overflow-y: auto;
      font-family: monospace;
      font-size: 0.8rem;
      background: #f8f9fa;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid #dee2e6;
    }
    .log-info {
      color: #0d6efd;
    }
    .log-error {
      color: #dc3545;
    }
    .log-success {
      color: #198754;
    }
    .log-warning {
      color: #ffc107;
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>

  <div class="container py-4">
    <div class="row mb-4">
      <div class="col">
        <h1>Bot Settings</h1>
        <p class="text-muted">Configure and manage your Telegram bot</p>
      </div>
    </div>

    <div class="row">
      <div class="col-lg-8">
        <div class="card bot-info-card mb-4">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Bot Status</h5>
            <div id="status-container">
              <span class="status-indicator status-unknown" id="status-indicator"></span>
              <span id="status-text">Checking...</span>
            </div>
          </div>
          <div class="card-body">
            <div id="bot-info">Loading...</div>
            <div class="mt-3">
              <button class="btn btn-primary" id="refresh-status">
                <i class="fas fa-sync-alt"></i> Refresh Status
              </button>
              <button class="btn btn-warning" id="restart-bot">
                <i class="fas fa-power-off"></i> Restart Bot
              </button>
            </div>
          </div>
        </div>

        <div class="card mb-4">
          <div class="card-header">
            <h5 class="mb-0">Bot Configuration</h5>
          </div>
          <div class="card-body">
            <form id="token-form">
              <div class="mb-3">
                <label for="bot-token" class="form-label">Telegram Bot Token</label>
                <div class="input-group">
                  <input type="password" class="form-control" id="bot-token" placeholder="Enter your Telegram Bot Token" required>
                  <button class="btn btn-outline-secondary" type="button" id="toggle-token">
                    <i class="fas fa-eye"></i>
                  </button>
                </div>
                <div class="form-text">
                  Get your bot token from <a href="https://t.me/BotFather" target="_blank">@BotFather</a> on Telegram
                </div>
              </div>
              <button type="submit" class="btn btn-success" id="save-token">
                <i class="fas fa-save"></i> Save and Apply
              </button>
            </form>
          </div>
        </div>
      </div>

      <div class="col-lg-4">
        <div class="card mb-4">
          <div class="card-header">
            <h5 class="mb-0">Debug Information</h5>
          </div>
          <div class="card-body">
            <div id="debug-log"></div>
          </div>
        </div>

        <div class="card mb-4">
          <div class="card-header">
            <h5 class="mb-0">Quick Help</h5>
          </div>
          <div class="card-body">
            <h6>Troubleshooting</h6>
            <ul>
              <li>Make sure your bot token is valid</li>
              <li>Check if your bot is blocked by Telegram</li>
              <li>Try restarting the bot</li>
              <li>Verify your internet connection</li>
            </ul>
            <h6>Bot Commands</h6>
            <ul>
              <li><code>/start</code> - Start the bot</li>
              <li><code>/help</code> - Get help information</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%- include('partials/footer') %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const statusIndicator = document.getElementById('status-indicator');
      const statusText = document.getElementById('status-text');
      const botInfoDiv = document.getElementById('bot-info');
      const refreshStatusBtn = document.getElementById('refresh-status');
      const restartBotBtn = document.getElementById('restart-bot');
      const tokenForm = document.getElementById('token-form');
      const botTokenInput = document.getElementById('bot-token');
      const toggleTokenBtn = document.getElementById('toggle-token');
      const debugLog = document.getElementById('debug-log');
      
      function addLogMessage(message, type = 'info') {
        const logEntry = document.createElement('div');
        logEntry.className = `log-${type}`;
        const timestamp = new Date().toLocaleTimeString();
        logEntry.textContent = `[${timestamp}] ${message}`;
        debugLog.appendChild(logEntry);
        debugLog.scrollTop = debugLog.scrollHeight;
      }
      
      function updateBotStatus() {
        addLogMessage('Checking bot status...', 'info');
        
        fetch('/api/bot-status')
          .then(response => response.json())
          .then(data => {
            if (data.isLaunched) {
              statusIndicator.className = 'status-indicator status-online';
              statusText.textContent = 'Online';
              addLogMessage('Bot is online!', 'success');
            } else {
              statusIndicator.className = 'status-indicator status-offline';
              statusText.textContent = 'Offline';
              addLogMessage(`Bot is offline: ${data.error || 'Unknown error'}`, 'error');
            }
            
            // Create a formatted info display
            let html = '';
            if (data.botInfo) {
              html += `<div class="row">
                <div class="col-md-6">
                  <p><strong>Username:</strong> @${data.botInfo.username}</p>
                  <p><strong>Name:</strong> ${data.botInfo.first_name}</p>
                  <p><strong>Bot ID:</strong> ${data.botInfo.id}</p>
                </div>
                <div class="col-md-6">
                  <p><strong>Start Time:</strong> ${data.startTime ? new Date(data.startTime).toLocaleString() : 'N/A'}</p>
                  <p><strong>Uptime:</strong> ${data.uptime ? formatUptime(data.uptime) : 'N/A'}</p>
                  <p><strong>Last Check:</strong> ${data.lastCheck ? new Date(data.lastCheck).toLocaleString() : 'N/A'}</p>
                </div>
              </div>`;
              
              if (data.token) {
                html += `<div class="mt-2"><strong>Token:</strong> ${data.token}</div>`;
              }
            } else {
              html = `<div class="alert alert-warning">
                Bot is not running or cannot be contacted.
                <br>Error: ${data.error || 'No specific error information'}
              </div>`;
            }
            
            botInfoDiv.innerHTML = html;
          })
          .catch(error => {
            statusIndicator.className = 'status-indicator status-unknown';
            statusText.textContent = 'Error';
            botInfoDiv.innerHTML = `<div class="alert alert-danger">Failed to check bot status: ${error.message}</div>`;
            addLogMessage(`Failed to check bot status: ${error.message}`, 'error');
          });
      }
      
      function formatUptime(seconds) {
        const days = Math.floor(seconds / 86400);
        const hours = Math.floor((seconds % 86400) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        
        let result = '';
        if (days > 0) result += `${days}d `;
        if (hours > 0) result += `${hours}h `;
        if (minutes > 0) result += `${minutes}m `;
        result += `${secs}s`;
        
        return result;
      }
      
      function testBotConnection() {
        addLogMessage('Testing bot connection...', 'info');
        
        fetch('/api/test-bot')
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              addLogMessage(`Bot test successful: @${data.botInfo.username}`, 'success');
            } else {
              addLogMessage(`Bot test failed: ${data.message}`, 'error');
              if (data.error) {
                addLogMessage(`Error details: ${data.error}`, 'error');
              }
            }
          })
          .catch(error => {
            addLogMessage(`Exception during bot test: ${error.message}`, 'error');
          });
      }
      
      // Initial status check
      updateBotStatus();
      
      // Setup event listeners
      refreshStatusBtn.addEventListener('click', function() {
        updateBotStatus();
        testBotConnection();
      });
      
      restartBotBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to restart the bot?')) {
          restartBotBtn.disabled = true;
          restartBotBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Restarting...';
          addLogMessage('Attempting to restart bot...', 'warning');
          
          fetch('/api/restart-bot', {
            method: 'POST'
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                addLogMessage(`Bot restarted successfully: @${data.botInfo?.username || 'unknown'}`, 'success');
              } else {
                addLogMessage(`Failed to restart bot: ${data.message}`, 'error');
              }
              updateBotStatus();
            })
            .catch(error => {
              addLogMessage(`Exception during bot restart: ${error.message}`, 'error');
            })
            .finally(() => {
              restartBotBtn.disabled = false;
              restartBotBtn.innerHTML = '<i class="fas fa-power-off"></i> Restart Bot';
            });
        }
      });
      
      toggleTokenBtn.addEventListener('click', function() {
        if (botTokenInput.type === 'password') {
          botTokenInput.type = 'text';
          toggleTokenBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
        } else {
          botTokenInput.type = 'password';
          toggleTokenBtn.innerHTML = '<i class="fas fa-eye"></i>';
        }
      });
      
      tokenForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const token = botTokenInput.value.trim();
        if (!token) {
          alert('Please enter a valid bot token');
          return;
        }
        
        if (!confirm('Are you sure you want to update the bot token? This will restart the bot.')) {
          return;
        }
        
        const saveBtn = document.getElementById('save-token');
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
        addLogMessage('Updating bot token...', 'warning');
        
        fetch('/api/update-token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ token })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              addLogMessage(`Bot token updated successfully: @${data.botInfo?.username || 'unknown'}`, 'success');
              updateBotStatus();
            } else {
              addLogMessage(`Failed to update bot token: ${data.message}`, 'error');
              if (data.error) {
                addLogMessage(`Error details: ${data.error}`, 'error');
              }
            }
          })
          .catch(error => {
            addLogMessage(`Exception during token update: ${error.message}`, 'error');
          })
          .finally(() => {
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Save and Apply';
          });
      });
      
      // Test the bot connection after initial status check
      setTimeout(testBotConnection, 1000);
      
      // Set up periodic status updates (every 60 seconds)
      setInterval(updateBotStatus, 60000);
    });
  </script>
</body>
</html> 