<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TeleDrive - Lưu trữ file trên Telegram</title>
  <link rel="stylesheet" href="/css/styles.css">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      margin: 0;
      padding: 0;
      color: #333;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      min-height: 100vh;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 1rem;
    }
    
    header {
      background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
      padding: 1.5rem 0;
      color: white;
      text-align: center;
      border-radius: 8px;
      margin-bottom: 2rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease;
    }
    
    header:hover {
      transform: translateY(-2px);
    }
    
    header h1 {
      margin: 0;
      font-size: 2.8rem;
      font-weight: 700;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    main {
      background-color: rgba(255, 255, 255, 0.95);
      border-radius: 8px;
      padding: 2.5rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      backdrop-filter: blur(10px);
    }
    
    .hero {
      text-align: center;
      margin-bottom: 4rem;
    }
    
    .hero h2 {
      font-size: 2.4rem;
      margin-bottom: 1.5rem;
      color: #1a73e8;
      font-weight: 500;
    }
    
    .hero p {
      font-size: 1.3rem;
      color: #5f6368;
      margin-bottom: 2.5rem;
      line-height: 1.6;
    }
    
    .features {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2.5rem;
      margin-bottom: 4rem;
    }
    
    .feature {
      text-align: center;
      padding: 2rem;
      border-radius: 8px;
      background-color: white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .feature:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }
    
    .feature h3 {
      color: #1a73e8;
      margin-bottom: 1rem;
      font-size: 1.5rem;
      font-weight: 500;
    }
    
    .feature p {
      color: #5f6368;
      line-height: 1.6;
    }
    
    .cta {
      text-align: center;
      margin: 3rem 0;
    }
    
    .button {
      display: inline-block;
      padding: 1rem 2rem;
      background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
      color: white;
      border-radius: 25px;
      text-decoration: none;
      font-weight: 500;
      margin: 0 1rem;
      transition: all 0.3s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .button.secondary {
      background: white;
      color: #4285f4;
      border: 2px solid #4285f4;
    }
    
    .button.secondary:hover {
      background-color: #f8f9fa;
      color: #1a73e8;
      border-color: #1a73e8;
    }
    
    footer {
      text-align: center;
      margin-top: 4rem;
      padding: 2rem 0;
      color: #5f6368;
      font-size: 0.9rem;
    }
    
    .status-badge {
      display: inline-block;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.9rem;
      margin-left: 1rem;
      font-weight: 500;
      transition: all 0.3s ease;
    }
    
    .status-badge.online {
      background-color: #34a853;
      color: white;
      box-shadow: 0 2px 4px rgba(52, 168, 83, 0.2);
    }
    
    .status-badge.offline {
      background-color: #ea4335;
      color: white;
      box-shadow: 0 2px 4px rgba(234, 67, 53, 0.2);
    }

    .tdlib-status {
      margin-top: 1rem;
      font-size: 1.1rem;
      font-weight: 500;
    }

    @media (max-width: 768px) {
      header h1 {
        font-size: 2rem;
      }
      
      .hero h2 {
        font-size: 1.8rem;
      }
      
      .features {
        grid-template-columns: 1fr;
      }
      
      .button {
        display: block;
        margin: 1rem auto;
        max-width: 300px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>TeleDrive</h1>
      <% if (typeof tdlibAvailable !== 'undefined') { %>
        <div class="tdlib-status">
          TDLib: 
          <span class="status-badge <%= tdlibAvailable ? 'online' : 'offline' %>">
            <%= tdlibAvailable ? 'Hoạt động' : 'Không hoạt động' %>
          </span>
        </div>
      <% } %>
    </header>

    <main>
      <section class="hero">
        <div class="hero-content">
          <h1 class="title">TeleDrive</h1>
          <p class="subtitle">Lưu trữ file không giới hạn với Telegram</p>
          <div class="cta-buttons">
            <a href="/login" class="button primary">Đăng nhập</a>
            <a href="#features" class="button secondary">Tìm hiểu thêm</a>
          </div>
        </div>
      </section>

      <!-- Form đăng nhập Telegram -->
      <div class="login-container" id="telegram-login" style="display: none;">
        <div class="login-form">
          <h2>Đăng nhập Telegram</h2>
          
          <div class="login-tabs">
            <button id="tab-phone" class="tab-button active">Số điện thoại</button>
            <button id="tab-qrcode" class="tab-button">QR Code</button>
          </div>
          
          <div id="login-phone-section">
            <div id="login-phone-step">
              <p>Nhập số điện thoại Telegram của bạn để đăng nhập</p>
              <div class="form-group">
                <input type="text" id="phone" placeholder="+84xxxxxxxxx" class="form-control">
              </div>
              <button id="btn-send-phone" class="button primary">Gửi mã xác thực</button>
            </div>
            
            <div id="login-code-step" style="display: none;">
              <p>Nhập mã xác thực Telegram đã gửi đến điện thoại của bạn</p>
              <div class="form-group">
                <input type="text" id="code" placeholder="12345" class="form-control">
              </div>
              <button id="btn-send-code" class="button primary">Xác thực</button>
            </div>
            
            <div id="login-password-step" style="display: none;">
              <p>Nhập mật khẩu 2FA của tài khoản Telegram</p>
              <div class="form-group">
                <input type="password" id="password" placeholder="Mật khẩu" class="form-control">
              </div>
              <button id="btn-send-password" class="button primary">Đăng nhập</button>
            </div>
          </div>
          
          <div id="login-qrcode-section" style="display: none;">
            <p>Quét mã QR code bằng ứng dụng Telegram trên điện thoại của bạn</p>
            <div class="qrcode-container">
              <div id="qrcode-placeholder">
                <button id="btn-generate-qrcode" class="button primary">Tạo mã QR</button>
              </div>
              <div id="qrcode-display" style="display: none;">
                <div id="qrcode"></div>
                <p class="qrcode-help">
                  1. Mở Telegram trên điện thoại<br>
                  2. Vào <strong>Cài đặt > Thiết bị > Quét QR Code</strong><br>
                  3. Quét mã QR này để đăng nhập
                </p>
                <div class="qrcode-status" id="qrcode-status">Đang chờ quét...</div>
              </div>
            </div>
          </div>
          
          <div id="login-success" style="display: none;">
            <p class="success-message">Đăng nhập thành công!</p>
            <p>Bạn có thể sử dụng TeleDrive ngay bây giờ.</p>
          </div>
          
          <div id="login-error" style="display: none;">
            <p class="error-message" id="error-text"></p>
          </div>
        </div>
      </div>

      <section class="features">
        <div class="feature">
          <h3>Lưu trữ không giới hạn</h3>
          <p>Tận dụng không gian lưu trữ không giới hạn từ Telegram để lưu trữ file của bạn. Không còn lo lắng về dung lượng.</p>
        </div>
        
        <div class="feature">
          <h3>Bảo mật cao</h3>
          <p>Dữ liệu của bạn được bảo vệ bằng mã hóa đầu cuối của Telegram. Chỉ bạn mới có thể truy cập file của mình.</p>
        </div>
        
        <div class="feature">
          <h3>Truy cập mọi lúc, mọi nơi</h3>
          <p>Dễ dàng truy cập và chia sẻ file của bạn từ bất kỳ thiết bị nào. Đồng bộ tự động trên mọi nền tảng.</p>
        </div>
      </section>
    </main>

    <footer>
      <p>&copy; <%= new Date().getFullYear() %> TeleDrive. Tất cả các quyền được bảo lưu.</p>
    </footer>
  </div>

  <!-- Thêm thư viện QR code -->
  <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js"></script>

  <!-- Thêm phần JavaScript cho đăng nhập -->
  <script>
  document.addEventListener('DOMContentLoaded', async function() {
    // Kiểm tra trạng thái đăng nhập khi tải trang
    checkTelegramStatus();
    
    // Gắn sự kiện cho các nút đăng nhập
    document.getElementById('btn-send-phone').addEventListener('click', sendPhoneNumber);
    document.getElementById('btn-send-code').addEventListener('click', sendAuthCode);
    document.getElementById('btn-send-password').addEventListener('click', sendPassword);
    document.getElementById('btn-generate-qrcode').addEventListener('click', generateQRCode);
    
    // Gắn sự kiện cho các tab
    document.getElementById('tab-phone').addEventListener('click', function() {
      showLoginSection('phone');
    });
    
    document.getElementById('tab-qrcode').addEventListener('click', function() {
      showLoginSection('qrcode');
    });
    
    // Hiển thị form đăng nhập khi nhấn nút đăng nhập
    const loginButtons = document.querySelectorAll('a[href="/login"]');
    loginButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        document.getElementById('telegram-login').style.display = 'block';
        // Cuộn đến form đăng nhập
        document.getElementById('telegram-login').scrollIntoView({ behavior: 'smooth' });
      });
    });
  });

  // Chuyển đổi giữa các tab đăng nhập
  function showLoginSection(section) {
    // Update active tab
    document.querySelectorAll('.tab-button').forEach(tab => {
      tab.classList.remove('active');
    });
    
    if (section === 'phone') {
      document.getElementById('tab-phone').classList.add('active');
      document.getElementById('login-phone-section').style.display = 'block';
      document.getElementById('login-qrcode-section').style.display = 'none';
    } else if (section === 'qrcode') {
      document.getElementById('tab-qrcode').classList.add('active');
      document.getElementById('login-phone-section').style.display = 'none';
      document.getElementById('login-qrcode-section').style.display = 'block';
    }
    
    // Ẩn thông báo lỗi và thành công
    document.getElementById('login-success').style.display = 'none';
    document.getElementById('login-error').style.display = 'none';
  }

  // Kiểm tra trạng thái đăng nhập Telegram
  async function checkTelegramStatus() {
    try {
      const response = await fetch('/api/telegram/status');
      const data = await response.json();
      
      // Kiểm tra xem có đăng nhập không
      if (data.tdlib && data.tdlib.isLoggedIn) {
        showLoginSuccess();
      } else if (data.tdlib) {
        // Xác định bước đăng nhập hiện tại
        if (data.tdlib.waitingForPhoneNumber) {
          showLoginPhoneStep();
        } else if (data.tdlib.waitingForCode) {
          showLoginCodeStep();
        } else if (data.tdlib.waitingForPassword) {
          showLoginPasswordStep();
        } else if (data.tdlib.qrCodeLink) {
          showLoginSection('qrcode');
          showQRCode(data.tdlib.qrCodeLink);
        }
      }
    } catch (error) {
      console.error('Lỗi khi kiểm tra trạng thái:', error);
    }
  }

  // Gửi số điện thoại
  async function sendPhoneNumber() {
    const phone = document.getElementById('phone').value.trim();
    if (!phone) {
      showError('Vui lòng nhập số điện thoại');
      return;
    }
    
    try {
      const response = await fetch('/api/telegram/login/phone', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        showLoginCodeStep();
      } else {
        showError(data.error || 'Lỗi khi gửi số điện thoại');
      }
    } catch (error) {
      showError('Lỗi kết nối với máy chủ');
    }
  }

  // Gửi mã xác thực
  async function sendAuthCode() {
    const code = document.getElementById('code').value.trim();
    if (!code) {
      showError('Vui lòng nhập mã xác thực');
      return;
    }
    
    try {
      const response = await fetch('/api/telegram/login/code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        if (data.needPassword) {
          showLoginPasswordStep();
        } else {
          showLoginSuccess();
        }
      } else {
        showError(data.error || 'Mã xác thực không hợp lệ');
      }
    } catch (error) {
      showError('Lỗi kết nối với máy chủ');
    }
  }

  // Gửi mật khẩu
  async function sendPassword() {
    const password = document.getElementById('password').value;
    if (!password) {
      showError('Vui lòng nhập mật khẩu');
      return;
    }
    
    try {
      const response = await fetch('/api/telegram/login/password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ password })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        showLoginSuccess();
      } else {
        showError(data.error || 'Mật khẩu không đúng');
      }
    } catch (error) {
      showError('Lỗi kết nối với máy chủ');
    }
  }

  // Hiển thị các bước đăng nhập
  function showLoginPhoneStep() {
    document.getElementById('login-phone-step').style.display = 'block';
    document.getElementById('login-code-step').style.display = 'none';
    document.getElementById('login-password-step').style.display = 'none';
    document.getElementById('login-success').style.display = 'none';
    document.getElementById('login-error').style.display = 'none';
  }

  function showLoginCodeStep() {
    document.getElementById('login-phone-step').style.display = 'none';
    document.getElementById('login-code-step').style.display = 'block';
    document.getElementById('login-password-step').style.display = 'none';
    document.getElementById('login-success').style.display = 'none';
    document.getElementById('login-error').style.display = 'none';
  }

  function showLoginPasswordStep() {
    document.getElementById('login-phone-step').style.display = 'none';
    document.getElementById('login-code-step').style.display = 'none';
    document.getElementById('login-password-step').style.display = 'block';
    document.getElementById('login-success').style.display = 'none';
    document.getElementById('login-error').style.display = 'none';
  }

  function showLoginSuccess() {
    document.getElementById('login-phone-step').style.display = 'none';
    document.getElementById('login-code-step').style.display = 'none';
    document.getElementById('login-password-step').style.display = 'none';
    document.getElementById('login-success').style.display = 'block';
    document.getElementById('login-error').style.display = 'none';
    
    // Hiển thị thông báo đăng nhập thành công và tự động chuyển hướng
    setTimeout(() => {
      window.location.href = '/dashboard';
    }, 2000);
  }

  function showError(message) {
    document.getElementById('error-text').textContent = message;
    document.getElementById('login-error').style.display = 'block';
  }

  // Tạo và hiển thị QR code
  async function generateQRCode() {
    try {
      document.getElementById('qrcode-placeholder').style.display = 'none';
      document.getElementById('qrcode-display').style.display = 'block';
      document.getElementById('qrcode-status').textContent = 'Đang tạo mã QR...';
      
      const response = await fetch('/api/telegram/login/qrcode', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const data = await response.json();
      
      if (response.ok && data.qrCodeLink) {
        showQRCode(data.qrCodeLink);
        startQRCodeStatusCheck();
      } else {
        document.getElementById('qrcode-status').textContent = 'Lỗi khi tạo mã QR';
        showError(data.error || 'Không thể tạo mã QR code');
      }
    } catch (error) {
      document.getElementById('qrcode-status').textContent = 'Lỗi khi tạo mã QR';
      showError('Lỗi kết nối với máy chủ');
    }
  }

  // Hiển thị QR code
  function showQRCode(qrCodeLink) {
    const qrcodeElement = document.getElementById('qrcode');
    qrcodeElement.innerHTML = '';
    
    QRCode.toCanvas(qrcodeElement, qrCodeLink, {
      width: 256,
      margin: 1,
      color: {
        dark: '#0088cc',
        light: '#ffffff'
      }
    }, function(error) {
      if (error) {
        console.error('Lỗi khi tạo QR code:', error);
        document.getElementById('qrcode-status').textContent = 'Lỗi khi tạo mã QR';
      } else {
        document.getElementById('qrcode-status').textContent = 'Đang chờ quét...';
      }
    });
  }

  // Kiểm tra trạng thái QR code
  let qrCodeCheckInterval;
  function startQRCodeStatusCheck() {
    // Xóa interval cũ nếu có
    if (qrCodeCheckInterval) {
      clearInterval(qrCodeCheckInterval);
    }
    
    // Kiểm tra trạng thái mỗi 2 giây
    qrCodeCheckInterval = setInterval(async function() {
      try {
        const response = await fetch('/api/telegram/login/qrcode/status');
        const data = await response.json();
        
        if (data.success) {
          if (data.status === 'authenticated') {
            // Đã đăng nhập thành công
            clearInterval(qrCodeCheckInterval);
            showLoginSuccess();
          } else if (data.status === 'waiting_confirmation') {
            // Vẫn đang chờ xác nhận
            document.getElementById('qrcode-status').textContent = 'Đang chờ xác nhận từ thiết bị...';
          } else if (data.status === 'expired') {
            // QR code hết hạn
            clearInterval(qrCodeCheckInterval);
            document.getElementById('qrcode-status').textContent = 'Mã QR đã hết hạn, vui lòng tạo mã mới';
            document.getElementById('qrcode-placeholder').style.display = 'block';
            document.getElementById('qrcode-display').style.display = 'none';
          }
        } else {
          document.getElementById('qrcode-status').textContent = data.message || 'Lỗi khi kiểm tra trạng thái';
        }
      } catch (error) {
        console.error('Lỗi khi kiểm tra trạng thái QR code:', error);
      }
    }, 2000);
  }
  </script>

  <style>
  /* CSS cho form đăng nhập */
  .login-container {
    max-width: 500px;
    margin: 20px auto;
    padding: 30px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
  }

  .login-form h2 {
    margin-bottom: 20px;
    color: #333;
    text-align: center;
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-control {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }

  .button {
    display: inline-block;
    padding: 12px 24px;
    border: none;
    border-radius: 4px;
    background-color: #0088cc;
    color: white;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    text-align: center;
    width: 100%;
  }

  .button:hover {
    background-color: #006699;
  }

  .success-message {
    color: #28a745;
    font-weight: bold;
  }

  .error-message {
    color: #dc3545;
    font-weight: bold;
  }

  /* CSS cho tab đăng nhập */
  .login-tabs {
    display: flex;
    margin-bottom: 20px;
    border-bottom: 1px solid #ddd;
  }

  .tab-button {
    flex: 1;
    padding: 10px;
    border: none;
    background: none;
    cursor: pointer;
    text-align: center;
    font-size: 16px;
    font-weight: 500;
    color: #666;
    border-bottom: 3px solid transparent;
    transition: all 0.3s;
  }

  .tab-button.active {
    color: #0088cc;
    border-bottom-color: #0088cc;
  }

  .tab-button:hover {
    color: #0088cc;
  }

  /* CSS cho QR code */
  .qrcode-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    text-align: center;
  }

  #qrcode {
    margin: 20px auto;
    padding: 15px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    display: inline-block;
  }

  .qrcode-help {
    font-size: 14px;
    color: #666;
    margin: 15px 0;
    line-height: 1.6;
    text-align: left;
  }

  .qrcode-status {
    font-weight: 500;
    margin-top: 15px;
    padding: 8px 16px;
    background: #f5f5f5;
    border-radius: 4px;
    color: #0088cc;
  }
  </style>
</body>
</html> 