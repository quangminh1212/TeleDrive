<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TeleDrive - Telegram File Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        .file-card {
            transition: transform 0.2s ease;
        }
        .file-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
        .file-icon {
            font-size: 2rem;
            margin-bottom: 10px;
        }
        .document-icon { color: #4285F4; }
        .photo-icon { color: #34A853; }
        .video-icon { color: #EA4335; }
        .audio-icon { color: #FBBC05; }
        .file-error { color: #EA4335; }
        .file-thumb {
            height: 150px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
        }
        .loading-spinner {
            display: none;
            text-align: center;
            margin: 20px 0;
        }
        #refresh-files {
            animation: rotate 1s linear infinite paused;
        }
        #refresh-files.spinning {
            animation-play-state: running;
        }
        @keyframes rotate {
            100% {
                transform: rotate(360deg);
            }
        }
        .file-unavailable {
            color: #EA4335;
            font-size: 0.8rem;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="bi bi-telegram me-2"></i>TeleDrive
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="/">Files</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/bot-settings">Bot Settings</a>
                    </li>
                </ul>
            </div>
            <div class="d-flex">
                <button id="refresh-files" class="btn btn-outline-light" title="Refresh files">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
            </div>
        </div>
    </nav>

    <div class="container py-5">
        <div class="row mb-4">
            <div class="col-md-6">
                <h1>Your Telegram Files</h1>
                <p class="text-muted">Manage files sent to your Telegram bot</p>
            </div>
            <div class="col-md-6 text-md-end">
                <div id="bot-status" class="alert alert-info d-inline-block">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Checking...</span>
                    </div>
                    <span class="ms-2">Checking bot status...</span>
                </div>
            </div>
        </div>

        <div id="loading-spinner" class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Refreshing files...</p>
        </div>

        <% if (files && files.length > 0) { %>
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4" id="files-container">
                <% files.forEach(file => { %>
                    <div class="col file-item" data-id="<%= file._id %>">
                        <div class="card h-100 file-card">
                            <div class="card-body text-center">
                                <div class="file-thumb">
                                    <% if (file.fileType === 'document') { %>
                                        <i class="bi bi-file-earmark-text file-icon document-icon"></i>
                                    <% } else if (file.fileType === 'photo') { %>
                                        <% if (file.directLink && file.fileLink) { %>
                                            <img src="<%= file.fileLink %>" alt="<%= file.fileName %>" class="img-fluid mb-3" style="max-height: 150px; object-fit: cover;"
                                                onerror="this.onerror=null;this.parentElement.innerHTML='<i class=\'bi bi-exclamation-triangle file-icon file-error\'></i><p>Image preview unavailable</p>'">
                                        <% } else { %>
                                            <img src="<%= file.filePath %>" alt="<%= file.fileName %>" class="img-fluid mb-3" style="max-height: 150px; object-fit: cover;"
                                                onerror="this.onerror=null;this.parentElement.innerHTML='<i class=\'bi bi-exclamation-triangle file-icon file-error\'></i><p>Image preview unavailable</p>'">
                                        <% } %>
                                    <% } else if (file.fileType === 'video') { %>
                                        <i class="bi bi-film file-icon video-icon"></i>
                                    <% } else if (file.fileType === 'audio') { %>
                                        <i class="bi bi-music-note-beamed file-icon audio-icon"></i>
                                    <% } else { %>
                                        <i class="bi bi-file-earmark file-icon"></i>
                                    <% } %>
                                </div>
                                
                                <h5 class="card-title text-truncate" title="<%= file.originalFileName || file.fileName %>">
                                    <%= file.originalFileName || file.fileName %>
                                </h5>
                                <p class="card-text">
                                    <small class="text-muted">
                                        <% if (file.fileSize) { %>
                                            <%= (file.fileSize / 1024).toFixed(2) %> KB
                                        <% } %>
                                        <br>
                                        <%= new Date(file.uploadDate).toLocaleString() %>
                                    </small>
                                </p>
                                <div class="d-flex justify-content-center mt-3 file-actions">
                                    <% if (file.directLink && file.fileLink) { %>
                                        <a href="/download/<%= file._id %>" class="btn btn-sm btn-outline-primary me-2 download-btn">
                                            <i class="bi bi-download"></i> Download
                                        </a>
                                    <% } else { %>
                                        <a href="<%= file.filePath %>" class="btn btn-sm btn-outline-primary me-2 download-btn" 
                                           download="<%= file.originalFileName || file.fileName %>" 
                                           data-id="<%= file._id %>">
                                            <i class="bi bi-download"></i> Download
                                        </a>
                                    <% } %>
                                    <a href="/files/<%= file._id %>" class="btn btn-sm btn-outline-secondary me-2">
                                        <i class="bi bi-info-circle"></i> Details
                                    </a>
                                    <button class="btn btn-sm btn-outline-danger delete-file" data-id="<%= file._id %>" data-name="<%= file.originalFileName || file.fileName %>">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                                <div class="file-unavailable mt-2 d-none">
                                    <i class="bi bi-exclamation-triangle-fill"></i> File unavailable
                                </div>
                            </div>
                            <div class="card-footer bg-transparent file-status" data-id="<%= file._id %>">
                                <div class="d-flex align-items-center justify-content-center">
                                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                                        <span class="visually-hidden">Checking...</span>
                                    </div>
                                    <span class="ms-2">Checking...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } else { %>
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i> No files have been uploaded yet. Send a file to your Telegram bot to get started.
            </div>
        <% } %>
            
        <div class="card mt-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="bi bi-exclamation-circle me-2"></i> Giới hạn kích thước file</h5>
            </div>
            <div class="card-body">
                <p>Bot Telegram chỉ có thể tải xuống các file có kích thước <strong>tối đa 20MB</strong> do giới hạn của API Telegram.</p>
                <p>Nếu bạn gửi file lớn hơn, sẽ xuất hiện thông báo lỗi <code>"Bad Request: file is too big"</code>.</p>
                <h6 class="mt-3">Cách tải file lớn:</h6>
                <ol>
                    <li>Chia nhỏ file lớn thành nhiều phần (mỗi phần dưới 20MB)</li>
                    <li>Nén file để giảm kích thước trước khi gửi</li>
                    <li>Sử dụng dịch vụ lưu trữ trực tuyến khác cho các file lớn</li>
                </ol>
            </div>
        </div>
    </div>

    <footer class="bg-light py-3 mt-5">
        <div class="container text-center">
            <p class="mb-0 text-muted">TeleDrive &copy; <%= new Date().getFullYear() %> | <a href="https://github.com/yourusername/teledrive" target="_blank" class="text-decoration-none">GitHub</a></p>
        </div>
    </footer>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete <span id="fileName"></span>?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Check bot status
            async function checkBotStatus() {
                const statusElement = document.getElementById('bot-status');
                
                try {
                    const response = await fetch('/api/bot-status');
                    const data = await response.json();
                    
                    if (data.isLaunched) {
                        statusElement.className = 'alert alert-success d-inline-block';
                        let uptimeText = '';
                        if (data.uptime) {
                            const minutes = Math.floor(data.uptime / 60);
                            const seconds = data.uptime % 60;
                            uptimeText = ` (${minutes}m ${seconds}s)`;
                        }
                        
                        let botInfoText = '';
                        if (data.botInfo) {
                            botInfoText = `<small class="d-block">@${data.botInfo.username} (${data.botInfo.first_name})</small>`;
                        }
                        
                        statusElement.innerHTML = `
                            <i class="bi bi-check-circle-fill me-2"></i>Bot online${uptimeText}
                            ${botInfoText}
                            <small class="d-block mt-1">Last checked: ${new Date(data.lastCheck).toLocaleTimeString()}</small>
                        `;
                    } else {
                        statusElement.className = 'alert alert-danger d-inline-block';
                        let errorMsg = data.error || 'Unknown error';
                        
                        statusElement.innerHTML = `
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>Bot offline
                            <small class="d-block">${errorMsg}</small>
                            <small class="d-block mt-1">
                                <a href="#" onclick="restartBot(event)" class="text-light text-decoration-underline">Khởi động lại bot</a> | 
                                <a href="#" onclick="showBotHelp(event)" class="text-light text-decoration-underline">Cần trợ giúp?</a>
                            </small>
                            <small class="d-block mt-1">Token: ${data.token || 'N/A'}</small>
                        `;
                    }
                } catch (error) {
                    statusElement.className = 'alert alert-warning d-inline-block';
                    statusElement.innerHTML = `
                        <i class="bi bi-question-circle-fill me-2"></i>Bot status unknown
                        <small class="d-block">Không thể kết nối với API</small>
                        <small class="d-block mt-1">
                            <a href="#" onclick="restartBot(event)" class="text-light text-decoration-underline">Thử khởi động lại</a>
                        </small>
                    `;
                }
            }
            
            // Khởi động lại bot
            async function restartBot(event) {
                event.preventDefault();
                
                const statusElement = document.getElementById('bot-status');
                statusElement.innerHTML = `
                    <div class="spinner-border spinner-border-sm text-light" role="status">
                        <span class="visually-hidden">Restarting...</span>
                    </div>
                    <span class="ms-2">Đang khởi động lại bot...</span>
                `;
                
                try {
                    const response = await fetch('/api/restart-bot', {
                        method: 'POST'
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        // Bot restarted successfully
                        setTimeout(() => {
                            checkBotStatus(); // Refresh status
                            alert('Bot khởi động lại thành công!');
                        }, 1500);
                    } else {
                        statusElement.className = 'alert alert-danger d-inline-block';
                        statusElement.innerHTML = `
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>Lỗi khởi động lại
                            <small class="d-block">${data.error || 'Unknown error'}</small>
                            <small class="d-block mt-1">
                                <a href="#" onclick="showBotHelp(event)" class="text-light text-decoration-underline">Cần trợ giúp?</a>
                            </small>
                        `;
                    }
                } catch (error) {
                    console.error('Error restarting bot:', error);
                    statusElement.className = 'alert alert-danger d-inline-block';
                    statusElement.innerHTML = `
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>Lỗi kết nối
                        <small class="d-block">Không thể kết nối đến server</small>
                    `;
                }
            }
            
            // Hiển thị hướng dẫn khắc phục bot offline
            function showBotHelp(event) {
                event.preventDefault();
                alert(`Để bot online, hãy thực hiện các bước sau:
1. Truy cập @BotFather trên Telegram
2. Gửi lệnh /newbot để tạo bot mới
3. Làm theo hướng dẫn và nhận token mới
4. Cập nhật token mới vào file .env
5. Khởi động lại ứng dụng`);
            }
            
            window.showBotHelp = showBotHelp; // Expose to global scope
            window.restartBot = restartBot; // Expose to global scope
            
            // Run bot status check
            checkBotStatus();
            
            // Check file availability
            function checkFiles() {
                const fileItems = document.querySelectorAll('.file-item');
                
                fileItems.forEach(async (item) => {
                    const fileId = item.dataset.id;
                    const statusElement = item.querySelector('.file-status');
                    const downloadBtn = item.querySelector('.download-btn');
                    const fileActions = item.querySelector('.file-actions');
                    const fileUnavailableMsg = item.querySelector('.file-unavailable');
                    
                    try {
                        const response = await fetch(`/api/check-file/${fileId}`);
                        const data = await response.json();
                        
                        if (data.exists) {
                            statusElement.innerHTML = `
                                <div class="d-flex align-items-center justify-content-center">
                                    <span class="badge rounded-pill bg-success">
                                        <i class="bi bi-check-circle me-1"></i> Ready
                                    </span>
                                </div>
                            `;
                            downloadBtn.classList.remove('disabled');
                            fileUnavailableMsg.classList.add('d-none');
                        } else {
                            statusElement.innerHTML = `
                                <div class="d-flex align-items-center justify-content-center">
                                    <span class="badge rounded-pill bg-danger">
                                        <i class="bi bi-exclamation-triangle me-1"></i> File unavailable
                                    </span>
                                </div>
                            `;
                            downloadBtn.classList.add('disabled');
                            fileUnavailableMsg.classList.remove('d-none');
                            
                            // Replace image with error icon if it's a photo
                            const imgElement = item.querySelector('img');
                            if (imgElement) {
                                imgElement.parentElement.innerHTML = `
                                    <i class="bi bi-exclamation-triangle file-icon file-error"></i>
                                    <p>Image unavailable</p>
                                `;
                            }
                        }
                    } catch (error) {
                        console.error('Error checking file:', error);
                        statusElement.innerHTML = `
                            <div class="d-flex align-items-center justify-content-center">
                                <span class="badge rounded-pill bg-warning">
                                    <i class="bi bi-question-circle me-1"></i> Status unknown
                                </span>
                            </div>
                        `;
                    }
                });
            }
            
            // Run on page load
            checkFiles();
            
            // Refresh button
            const refreshButton = document.getElementById('refresh-files');
            const loadingSpinner = document.getElementById('loading-spinner');
            
            refreshButton.addEventListener('click', async () => {
                refreshButton.classList.add('spinning');
                loadingSpinner.style.display = 'block';
                
                try {
                    // Wait a moment to show loading state
                    await new Promise(resolve => setTimeout(resolve, 500));
                    
                    // Run file check again without page reload
                    checkFiles();
                    
                    // After checking, remove loading state
                    setTimeout(() => {
                        refreshButton.classList.remove('spinning');
                        loadingSpinner.style.display = 'none';
                    }, 500);
                } catch (error) {
                    console.error('Error refreshing:', error);
                    refreshButton.classList.remove('spinning');
                    loadingSpinner.style.display = 'none';
                    alert('Error refreshing files. Please try again.');
                }
            });

            // Set up delete file functionality
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            let fileToDelete = null;

            document.querySelectorAll('.delete-file').forEach(button => {
                button.addEventListener('click', () => {
                    const fileId = button.getAttribute('data-id');
                    const fileName = button.getAttribute('data-name');
                    fileToDelete = fileId;
                    document.getElementById('fileName').textContent = fileName;
                    deleteModal.show();
                });
            });

            document.getElementById('confirmDelete').addEventListener('click', async () => {
                if (!fileToDelete) return;
                
                try {
                    const response = await fetch(`/files/${fileToDelete}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        deleteModal.hide();
                        
                        // Find the file item and update its UI instead of reloading
                        const fileItem = document.querySelector(`.file-item[data-id="${fileToDelete}"]`);
                        if (fileItem) {
                            const statusElement = fileItem.querySelector('.file-status');
                            const downloadBtn = fileItem.querySelector('.download-btn');
                            const fileUnavailableMsg = fileItem.querySelector('.file-unavailable');
                            
                            statusElement.innerHTML = `
                                <div class="d-flex align-items-center justify-content-center">
                                    <span class="badge rounded-pill bg-danger">
                                        <i class="bi bi-trash me-1"></i> Deleted
                                    </span>
                                </div>
                            `;
                            downloadBtn.classList.add('disabled');
                            fileUnavailableMsg.classList.remove('d-none');
                            
                            // Replace image with deleted icon if it's a photo
                            const imgContainer = fileItem.querySelector('.file-thumb');
                            if (imgContainer) {
                                imgContainer.innerHTML = `
                                    <i class="bi bi-trash file-icon file-error"></i>
                                    <p>File deleted</p>
                                `;
                            }
                        } else {
                            // If can't find item, reload the page
                            window.location.reload();
                        }
                    } else {
                        alert('Failed to delete file. Please try again.');
                    }
                } catch (error) {
                    console.error('Error deleting file:', error);
                    alert('An error occurred while deleting the file.');
                }
            });
            
            // Handle download button clicks to verify file exists first
            document.querySelectorAll('.download-btn').forEach(btn => {
                btn.addEventListener('click', async (event) => {
                    const fileId = btn.getAttribute('data-id');
                    
                    try {
                        const response = await fetch(`/api/check-file/${fileId}`);
                        const data = await response.json();
                        
                        if (!data.exists) {
                            event.preventDefault();
                            alert('This file is not available for download. It may have been deleted or moved.');
                        }
                    } catch (error) {
                        console.error('Error checking file before download:', error);
                        // Let the download attempt proceed anyway
                    }
                });
            });
        });
    </script>
</body>
</html> 