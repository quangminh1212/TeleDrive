<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <!-- Bootstrap 4 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!-- AdminLTE -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/admin-lte@3.2/dist/css/adminlte.min.css">
    <style>
        :root {
            --primary-color: #0088cc;
            --hover-color: #006699;
        }
        .main-sidebar {
            background-color: #343a40;
        }
        .nav-sidebar .nav-link p {
            color: #c2c7d0;
        }
        .nav-sidebar .nav-link:hover p {
            color: #fff;
        }
        .nav-sidebar .nav-link.active {
            background-color: var(--primary-color);
        }
        .nav-sidebar .nav-link.active p {
            color: #fff;
        }
        .upload-area {
            border: 2px dashed #ddd;
            border-radius: 10px;
            padding: 2rem;
            text-align: center;
            background: white;
            cursor: pointer;
            transition: all 0.3s;
        }
        .upload-area:hover {
            border-color: var(--primary-color);
            background: #f8f9fa;
        }
        .upload-icon {
            font-size: 3rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }
        .file-card {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: transform 0.2s;
            margin-bottom: 1rem;
        }
        .file-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .file-icon {
            font-size: 2rem;
            color: var(--primary-color);
        }
        .file-name {
            color: #333;
            font-weight: 500;
            margin: 0.5rem 0;
            word-break: break-word;
        }
        .file-info {
            color: #666;
            font-size: 0.9rem;
        }
        .status-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        .status-local {
            background-color: #e3f2fd;
            color: #0d47a1;
        }
        .status-telegram {
            background-color: #e8f5e9;
            color: #1b5e20;
        }
        .status-missing {
            background-color: #ffebee;
            color: #b71c1c;
        }
        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.8);
            z-index: 9999;
        }
        .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body class="hold-transition sidebar-mini">
    <div class="wrapper">
        <!-- Navbar -->
        <nav class="main-header navbar navbar-expand navbar-white navbar-light">
            <!-- Left navbar links -->
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
                </li>
                <li class="nav-item d-none d-sm-inline-block">
                    <a href="/" class="nav-link">Trang chủ</a>
                </li>
            </ul>
        </nav>

        <!-- Main Sidebar Container -->
        <aside class="main-sidebar sidebar-dark-primary elevation-4">
            <!-- Brand Logo -->
            <a href="/" class="brand-link">
                <i class="fas fa-cloud-upload-alt brand-image img-circle elevation-3" style="opacity: .8"></i>
                <span class="brand-text font-weight-light">TeleDrive</span>
            </a>

            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Sidebar user panel (optional) -->
                <div class="user-panel mt-3 pb-3 mb-3 d-flex">
                    <div class="image">
                        <img src="https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y" class="img-circle elevation-2" alt="User Image">
                    </div>
                    <div class="info">
                        <a href="#" class="d-block">Khách</a>
                    </div>
                </div>

                <!-- Sidebar Menu -->
                <nav class="mt-2">
                    <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
                        <li class="nav-header">CHÍNH</li>
                        <li class="nav-item">
                            <a href="/" class="nav-link active">
                                <i class="nav-icon fas fa-tachometer-alt"></i>
                                <p>Bảng điều khiển</p>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="/" class="nav-link">
                                <i class="nav-icon fas fa-folder-open"></i>
                                <p>File của tôi</p>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="#" onclick="document.getElementById('fileInput').click()" class="nav-link">
                                <i class="nav-icon fas fa-upload"></i>
                                <p>Tải lên</p>
                            </a>
                        </li>
                        <li class="nav-header">THAO TÁC</li>
                        <li class="nav-item">
                            <a href="#" onclick="syncFiles()" class="nav-link">
                                <i class="nav-icon fas fa-sync"></i>
                                <p>Đồng bộ</p>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="#" onclick="cleanUploads()" class="nav-link">
                                <i class="nav-icon fas fa-cloud-upload-alt"></i>
                                <p>Tải lên Telegram</p>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="#" data-toggle="modal" data-target="#settingsModal" class="nav-link">
                                <i class="nav-icon fas fa-cog"></i>
                                <p>Cài đặt</p>
                            </a>
                        </li>
                    </ul>
                </nav>
                <!-- /.sidebar-menu -->
            </div>
            <!-- /.sidebar -->
        </aside>

        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">
            <!-- Content Header (Page header) -->
            <div class="content-header">
                <div class="container-fluid">
                    <div class="row mb-2">
                        <div class="col-sm-6">
                            <h1 class="m-0">Bảng điều khiển</h1>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /.content-header -->

            <!-- Main content -->
            <div class="content">
                <div class="container-fluid">
                    <!-- Thông báo lỗi -->
                    <% if (error) { %>
                    <div class="alert alert-danger alert-dismissible">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                        <h5><i class="icon fas fa-ban"></i> Lỗi!</h5>
                        <%= error %>
                    </div>
                    <% } %>

                    <!-- Thêm tính năng tìm kiếm vào phần đầu trang -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm tên file...">
                                <div class="input-group-append">
                                    <button class="btn btn-primary" type="button" id="searchButton">
                                        <i class="fas fa-search"></i> Tìm kiếm
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Thêm phần hiển thị thư mục -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="card-title mb-0">
                                        <i class="fas fa-folder"></i> Thư mục
                                        <button class="btn btn-sm btn-outline-primary float-right" id="refreshFolders">
                                            <i class="fas fa-sync"></i>
                                        </button>
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <nav aria-label="breadcrumb" id="folderBreadcrumb">
                                        <ol class="breadcrumb">
                                            <li class="breadcrumb-item active">
                                                <a href="#" data-folder-id="root">
                                                    <i class="fas fa-home"></i> Root
                                                </a>
                                            </li>
                                        </ol>
                                    </nav>
                                    <div id="folderContents" class="row">
                                        <div class="d-flex justify-content-center w-100">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="sr-only">Đang tải...</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Thông tin lưu trữ -->
                    <div class="card card-primary card-outline">
                        <div class="card-header">
                            <h3 class="card-title">Dung lượng sử dụng</h3>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="mb-0"><%= formatBytes(storageInfo.used) %> / <%= formatBytes(storageInfo.total) %></h5>
                                </div>
                                <div class="text-end">
                                    <span class="text-muted"><%= storageInfo.percent.toFixed(1) %>%</span>
                                </div>
                            </div>
                            <div class="progress">
                                <div class="progress-bar bg-primary" role="progressbar" style="width: <%= storageInfo.percent %>%"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Khu vực tải lên -->
                    <div class="card card-primary card-outline">
                        <div class="card-header">
                            <h3 class="card-title">Tải lên file</h3>
                        </div>
                        <div class="card-body">
                            <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                                <input type="file" id="fileInput" style="display: none" onchange="uploadFile(this)">
                                <i class="fas fa-cloud-upload-alt upload-icon"></i>
                                <h4>Kéo thả file vào đây</h4>
                                <p class="text-muted mb-0">hoặc click để chọn file</p>
                            </div>
                        </div>
                    </div>

                    <!-- Danh sách file -->
                    <div class="card card-primary card-outline">
                        <div class="card-header">
                            <h3 class="card-title">File của tôi</h3>
                        </div>
                        <div class="card-body">
                            <div class="row" id="fileList">
                                <% if (files && files.length > 0) { %>
                                    <% files.forEach(function(file) { %>
                                        <div class="col-md-6 col-lg-4">
                                            <div class="file-card p-3">
                                                <div class="d-flex align-items-center mb-2">
                                                    <% if (file.fileType === 'image') { %>
                                                        <i class="fas fa-image file-icon me-2"></i>
                                                    <% } else if (file.fileType === 'video') { %>
                                                        <i class="fas fa-video file-icon me-2"></i>
                                                    <% } else if (file.fileType === 'audio') { %>
                                                        <i class="fas fa-music file-icon me-2"></i>
                                                    <% } else { %>
                                                        <i class="fas fa-file file-icon me-2"></i>
                                                    <% } %>
                                                    <div class="flex-grow-1">
                                                        <h6 class="file-name"><%= file.name %></h6>
                                                        <div class="file-info">
                                                            <%= formatBytes(file.size) %> • <%= formatDate(file.uploadDate) %>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <span class="status-badge <%= file.fileStatus === 'local' ? 'status-local' : (file.fileStatus === 'telegram' ? 'status-telegram' : 'status-missing') %>">
                                                        <i class="fas <%= file.fileStatus === 'local' ? 'fa-hdd' : (file.fileStatus === 'telegram' ? 'fa-paper-plane' : 'fa-exclamation-circle') %>"></i>
                                                        <%= file.fileStatus === 'local' ? 'Local' : (file.fileStatus === 'telegram' ? 'Telegram' : 'Không khả dụng') %>
                                                    </span>
                                                    <div class="btn-group">
                                                        <a href="/file/<%= file.id %>" class="btn btn-sm btn-outline-primary" title="Xem trước">
                                                            <i class="fas fa-eye"></i>
                                                        </a>
                                                        <a href="/api/files/<%= file.id %>/download" class="btn btn-sm btn-primary" title="Tải xuống">
                                                            <i class="fas fa-download"></i>
                                                        </a>
                                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteFile('<%= file.id %>')" title="Xóa">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <div class="col-12 text-center py-5">
                                        <i class="fas fa-inbox fa-5x text-muted"></i>
                                        <h3 class="mt-3">Chưa có file nào</h3>
                                        <p class="text-muted">Hãy tải lên file đầu tiên của bạn</p>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>

                    <!-- Thêm nút sửa lỗi ở đầu trang -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">Công cụ bảo trì</h5>
                                    <p class="card-text">Nếu gặp vấn đề với việc tải file, hãy sử dụng các công cụ sau để khắc phục.</p>
                                    <a href="/api/check-files" class="btn btn-warning" id="btnCheckFiles">
                                        <i class="fas fa-tools"></i> Kiểm tra và sửa dữ liệu files
                                    </a>
                                    <a href="/api/sync" class="btn btn-info ml-2" id="btnSync">
                                        <i class="fas fa-sync"></i> Đồng bộ lại với Telegram
                                    </a>
                                    <a href="/api/reset-database" class="btn btn-danger ml-2" id="btnResetDb">
                                        <i class="fas fa-database"></i> Khởi tạo lại database
                                    </a>
                                    <div id="checkResult" class="mt-2"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /.content -->
        </div>
        <!-- /.content-wrapper -->

        <!-- Main Footer -->
        <footer class="main-footer">
            <div class="float-right d-none d-sm-inline">
                Version 1.0
            </div>
            <strong>Copyright &copy; 2024 <a href="/">TeleDrive</a>.</strong> All rights reserved.
        </footer>
    </div>
    <!-- ./wrapper -->

    <!-- Loading overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Đang tải...</span>
            </div>
        </div>
    </div>

    <!-- jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <!-- Bootstrap 4 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- AdminLTE App -->
    <script src="https://cdn.jsdelivr.net/npm/admin-lte@3.2/dist/js/adminlte.min.js"></script>
    <script>
        // Hàm format bytes
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        // Hàm format date
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Hiển thị loading
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'block';
        }

        // Ẩn loading
        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // Upload file
        async function uploadFile(input) {
            if (!input.files || input.files.length === 0) return;

            showLoading();
            const formData = new FormData();
            formData.append('file', input.files[0]);

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) throw new Error('Upload failed');

                // Reload page after successful upload
                window.location.reload();
            } catch (error) {
                console.error('Upload error:', error);
                alert('Lỗi khi tải lên file: ' + error.message);
                hideLoading();
            }
        }

        // Đồng bộ files
        async function syncFiles() {
            showLoading();
            try {
                const response = await fetch('/api/sync', {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Sync failed');

                window.location.reload();
            } catch (error) {
                console.error('Sync error:', error);
                alert('Lỗi khi đồng bộ: ' + error.message);
                hideLoading();
            }
        }

        // Dọn dẹp uploads
        async function cleanUploads() {
            if (!confirm('Bạn có chắc muốn tải tất cả file lên Telegram?')) return;

            showLoading();
            try {
                const response = await fetch('/api/clean', {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Clean failed');

                window.location.reload();
            } catch (error) {
                console.error('Clean error:', error);
                alert('Lỗi khi dọn dẹp: ' + error.message);
                hideLoading();
            }
        }

        // Xóa file
        async function deleteFile(fileId) {
            if (!confirm('Bạn có chắc muốn xóa file này?')) return;

            showLoading();
            try {
                const response = await fetch(`/api/files/${fileId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) throw new Error('Delete failed');

                window.location.reload();
            } catch (error) {
                console.error('Delete error:', error);
                alert('Lỗi khi xóa file: ' + error.message);
                hideLoading();
            }
        }

        // Drag and drop
        const uploadArea = document.querySelector('.upload-area');

        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = 'var(--primary-color)';
            uploadArea.style.background = '#f8f9fa';
        });

        uploadArea.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#ddd';
            uploadArea.style.background = 'white';
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#ddd';
            uploadArea.style.background = 'white';

            const files = e.dataTransfer.files;
            if (files.length > 0) {
                document.getElementById('fileInput').files = files;
                uploadFile(document.getElementById('fileInput'));
            }
        });

        // Script xử lý sửa dữ liệu
        document.addEventListener('DOMContentLoaded', function() {
            const btnCheckFiles = document.getElementById('btnCheckFiles');
            const btnSync = document.getElementById('btnSync');
            const btnResetDb = document.getElementById('btnResetDb');
            const checkResult = document.getElementById('checkResult');
            
            if (btnCheckFiles) {
                btnCheckFiles.addEventListener('click', async function(e) {
                    e.preventDefault();
                    
                    try {
                        checkResult.innerHTML = '<div class="alert alert-info">Đang kiểm tra và sửa dữ liệu...</div>';
                        
                        const response = await fetch('/api/check-files');
                        const data = await response.json();
                        
                        if (data.success) {
                            checkResult.innerHTML = `<div class="alert alert-success">
                                <p>${data.message}</p>
                                <button class="btn btn-sm btn-primary" onclick="location.reload()">Tải lại trang</button>
                            </div>`;
                        } else {
                            checkResult.innerHTML = `<div class="alert alert-danger">
                                <p>${data.message || 'Lỗi kiểm tra dữ liệu'}</p>
                            </div>`;
                        }
                    } catch (error) {
                        checkResult.innerHTML = `<div class="alert alert-danger">
                            <p>Lỗi: ${error.message}</p>
                        </div>`;
                    }
                });
            }
            
            if (btnSync) {
                btnSync.addEventListener('click', async function(e) {
                    e.preventDefault();
                    
                    try {
                        checkResult.innerHTML = '<div class="alert alert-info">Đang đồng bộ với Telegram...</div>';
                        
                        const response = await fetch('/api/sync', {
                            method: 'POST'
                        });
                        const data = await response.json();
                        
                        if (data.success) {
                            checkResult.innerHTML = `<div class="alert alert-success">
                                <p>Đồng bộ thành công! ${data.newFiles} file được đồng bộ.</p>
                                <button class="btn btn-sm btn-primary" onclick="location.reload()">Tải lại trang</button>
                            </div>`;
                        } else {
                            checkResult.innerHTML = `<div class="alert alert-danger">
                                <p>${data.error || 'Lỗi đồng bộ'}</p>
                            </div>`;
                        }
                    } catch (error) {
                        checkResult.innerHTML = `<div class="alert alert-danger">
                            <p>Lỗi: ${error.message}</p>
                        </div>`;
                    }
                });
            }

            if (btnResetDb) {
                btnResetDb.addEventListener('click', async function(e) {
                    e.preventDefault();
                    
                    if (!confirm('Thao tác này sẽ xóa toàn bộ dữ liệu hiện tại và tạo lại database từ các file trong thư mục uploads. Bạn có chắc chắn muốn tiếp tục?')) {
                        return;
                    }
                    
                    try {
                        checkResult.innerHTML = '<div class="alert alert-info">Đang khởi tạo lại database...</div>';
                        
                        const response = await fetch('/api/reset-database');
                        const data = await response.json();
                        
                        if (data.success) {
                            checkResult.innerHTML = `<div class="alert alert-success">
                                <p>${data.message}. Đã tìm thấy ${data.totalFiles} file.</p>
                                <p>Đồng bộ: ${data.sync.success ? `Thành công, đã đồng bộ ${data.sync.syncedFiles} file` : 'Không thành công'}</p>
                                <button class="btn btn-sm btn-primary" onclick="location.reload()">Tải lại trang</button>
                            </div>`;
                        } else {
                            checkResult.innerHTML = `<div class="alert alert-danger">
                                <p>${data.message || 'Lỗi khởi tạo lại database'}</p>
                            </div>`;
                        }
                    } catch (error) {
                        checkResult.innerHTML = `<div class="alert alert-danger">
                            <p>Lỗi: ${error.message}</p>
                        </div>`;
                    }
                });
            }
        });

        let currentFolderId = 'root';
        let folderStructure = null;
        let currentPath = [];
        
        // Hàm tải cấu trúc thư mục
        async function loadFolders() {
            try {
                const response = await fetch('/api/folders');
                const data = await response.json();
                
                if (data.success) {
                    folderStructure = data.folders;
                    renderFolder(folderStructure);
                } else {
                    console.error('Lỗi tải thư mục:', data.message);
                    showError('Không thể tải cấu trúc thư mục');
                }
            } catch (error) {
                console.error('Lỗi gọi API thư mục:', error);
                showError('Lỗi kết nối đến server');
            }
        }
        
        // Hàm mở thư mục
        async function openFolder(folderId) {
            try {
                const response = await fetch(`/api/folders/${folderId}`);
                const data = await response.json();
                
                if (data.success) {
                    currentFolderId = folderId;
                    renderFolder(data.folder);
                    updateBreadcrumb();
                } else {
                    console.error('Lỗi mở thư mục:', data.message);
                    showError('Không thể mở thư mục');
                }
            } catch (error) {
                console.error('Lỗi gọi API thư mục:', error);
                showError('Lỗi kết nối đến server');
            }
        }
        
        // Hàm hiển thị thư mục
        function renderFolder(folder) {
            const folderContents = document.getElementById('folderContents');
            folderContents.innerHTML = '';
            
            if (!folder || !folder.children || folder.children.length === 0) {
                folderContents.innerHTML = '<div class="col-12 text-center"><p class="text-muted">Thư mục trống</p></div>';
                return;
            }
            
            // Hiển thị thư mục con trước
            const folders = folder.children.filter(item => item.type === 'folder');
            folders.forEach(subFolder => {
                const folderCard = document.createElement('div');
                folderCard.className = 'col-md-3 col-sm-4 col-6 mb-3';
                folderCard.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <a href="#" class="folder-link" data-folder-id="${subFolder.id}">
                                <i class="fas fa-folder fa-3x text-warning"></i>
                                <p class="mt-2 mb-0 text-truncate">${subFolder.name}</p>
                            </a>
                        </div>
                    </div>
                `;
                folderContents.appendChild(folderCard);
            });
            
            // Hiển thị file
            const files = folder.children.filter(item => item.type === 'file');
            files.forEach(file => {
                const fileCard = document.createElement('div');
                fileCard.className = 'col-md-3 col-sm-4 col-6 mb-3';
                
                let fileIcon = '';
                switch (file.fileType) {
                    case 'image':
                        fileIcon = '<i class="fas fa-image fa-3x text-info"></i>';
                        break;
                    case 'video':
                        fileIcon = '<i class="fas fa-video fa-3x text-danger"></i>';
                        break;
                    case 'audio':
                        fileIcon = '<i class="fas fa-music fa-3x text-success"></i>';
                        break;
                    case 'pdf':
                        fileIcon = '<i class="fas fa-file-pdf fa-3x text-danger"></i>';
                        break;
                    case 'text':
                        fileIcon = '<i class="fas fa-file-alt fa-3x text-primary"></i>';
                        break;
                    default:
                        fileIcon = '<i class="fas fa-file fa-3x text-secondary"></i>';
                }
                
                fileCard.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <a href="/file/${file.id}" class="file-link">
                                ${fileIcon}
                                <p class="mt-2 mb-0 text-truncate">${file.displayName || file.name}</p>
                            </a>
                        </div>
                        <div class="card-footer p-1">
                            <div class="btn-group btn-group-sm w-100">
                                <a href="/api/files/${file.id}/download" class="btn btn-outline-primary" title="Tải xuống">
                                    <i class="fas fa-download"></i>
                                </a>
                                <button class="btn btn-outline-success share-btn" data-file-id="${file.id}" title="Chia sẻ">
                                    <i class="fas fa-share-alt"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                folderContents.appendChild(fileCard);
            });
            
            // Thêm sự kiện cho các nút thư mục
            document.querySelectorAll('.folder-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const folderId = link.getAttribute('data-folder-id');
                    openFolder(folderId);
                });
            });
            
            // Thêm sự kiện cho nút chia sẻ
            document.querySelectorAll('.share-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const fileId = btn.getAttribute('data-file-id');
                    showShareDialog(fileId);
                });
            });
        }
        
        // Cập nhật đường dẫn thư mục
        function updateBreadcrumb() {
            // Đơn giản hóa cho ví dụ này - trong thực tế cần tìm đường dẫn đầy đủ từ root đến folder hiện tại
            const breadcrumb = document.getElementById('folderBreadcrumb').querySelector('ol');
            breadcrumb.innerHTML = '<li class="breadcrumb-item"><a href="#" data-folder-id="root"><i class="fas fa-home"></i> Root</a></li>';
            
            if (currentFolderId !== 'root') {
                breadcrumb.innerHTML += `<li class="breadcrumb-item active">${currentFolderId.replace('folder_', '').replace(/_/g, ' ')}</li>`;
            }
            
            // Thêm lại sự kiện cho breadcrumb
            breadcrumb.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const folderId = link.getAttribute('data-folder-id');
                    openFolder(folderId);
                });
            });
        }
        
        // Hàm tìm kiếm file
        async function searchFiles(query) {
            try {
                const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
                const data = await response.json();
                
                if (data.success) {
                    showSearchResults(data.results, query);
                } else {
                    console.error('Lỗi tìm kiếm:', data.message);
                    showError('Không thể thực hiện tìm kiếm');
                }
            } catch (error) {
                console.error('Lỗi gọi API tìm kiếm:', error);
                showError('Lỗi kết nối đến server');
            }
        }
        
        // Hiển thị kết quả tìm kiếm
        function showSearchResults(results, query) {
            const folderContents = document.getElementById('folderContents');
            folderContents.innerHTML = '';
            
            if (results.length === 0) {
                folderContents.innerHTML = `<div class="col-12 text-center"><p class="text-muted">Không tìm thấy kết quả nào cho "${query}"</p></div>`;
                return;
            }
            
            // Hiển thị tiêu đề kết quả tìm kiếm
            folderContents.innerHTML = `
                <div class="col-12 mb-3">
                    <h5>Kết quả tìm kiếm cho "${query}" (${results.length} kết quả)</h5>
                    <button class="btn btn-sm btn-outline-secondary" id="backToFolder">
                        <i class="fas fa-arrow-left"></i> Quay lại thư mục
                    </button>
                </div>
            `;
            
            // Hiển thị các kết quả
            results.forEach(file => {
                const fileCard = document.createElement('div');
                fileCard.className = 'col-md-3 col-sm-4 col-6 mb-3';
                
                let fileIcon = '';
                switch (file.fileType) {
                    case 'image':
                        fileIcon = '<i class="fas fa-image fa-3x text-info"></i>';
                        break;
                    case 'video':
                        fileIcon = '<i class="fas fa-video fa-3x text-danger"></i>';
                        break;
                    case 'audio':
                        fileIcon = '<i class="fas fa-music fa-3x text-success"></i>';
                        break;
                    case 'pdf':
                        fileIcon = '<i class="fas fa-file-pdf fa-3x text-danger"></i>';
                        break;
                    case 'text':
                        fileIcon = '<i class="fas fa-file-alt fa-3x text-primary"></i>';
                        break;
                    default:
                        fileIcon = '<i class="fas fa-file fa-3x text-secondary"></i>';
                }
                
                fileCard.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <a href="/file/${file.id}" class="file-link">
                                ${fileIcon}
                                <p class="mt-2 mb-0 text-truncate">${file.name}</p>
                            </a>
                            <small class="text-muted">${file.formattedSize} - ${file.formattedDate}</small>
                        </div>
                        <div class="card-footer p-1">
                            <div class="btn-group btn-group-sm w-100">
                                <a href="${file.downloadUrl}" class="btn btn-outline-primary" title="Tải xuống">
                                    <i class="fas fa-download"></i>
                                </a>
                                <a href="${file.previewUrl}" class="btn btn-outline-info" title="Xem trước">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <button class="btn btn-outline-success share-btn" data-file-id="${file.id}" title="Chia sẻ">
                                    <i class="fas fa-share-alt"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                folderContents.appendChild(fileCard);
            });
            
            // Thêm sự kiện quay lại thư mục
            document.getElementById('backToFolder').addEventListener('click', () => {
                openFolder(currentFolderId);
            });
            
            // Thêm sự kiện cho nút chia sẻ
            document.querySelectorAll('.share-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const fileId = btn.getAttribute('data-file-id');
                    showShareDialog(fileId);
                });
            });
        }
        
        // Hiển thị dialog chia sẻ
        function showShareDialog(fileId) {
            // Tạo modal chia sẻ
            const modalId = 'shareModal_' + fileId;
            let modal = document.getElementById(modalId);
            
            if (!modal) {
                const modalHtml = `
                    <div class="modal fade" id="${modalId}" tabindex="-1" role="dialog" aria-labelledby="${modalId}Label" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="${modalId}Label">Chia sẻ file</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <form id="shareForm_${fileId}">
                                        <div class="form-group">
                                            <div class="custom-control custom-switch">
                                                <input type="checkbox" class="custom-control-input" id="isPublic_${fileId}" checked>
                                                <label class="custom-control-label" for="isPublic_${fileId}">Công khai file</label>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label for="expiryDate_${fileId}">Ngày hết hạn (tùy chọn)</label>
                                            <input type="date" class="form-control" id="expiryDate_${fileId}">
                                        </div>
                                        <div class="form-group share-result" style="display:none;">
                                            <label>Link chia sẻ:</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control share-link" readonly>
                                                <div class="input-group-append">
                                                    <button class="btn btn-outline-secondary copy-btn" type="button">
                                                        <i class="fas fa-copy"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                                    <button type="button" class="btn btn-primary save-share-btn" data-file-id="${fileId}">Lưu thiết lập</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                modal = document.getElementById(modalId);
                
                // Thêm sự kiện cho nút lưu
                modal.querySelector('.save-share-btn').addEventListener('click', async () => {
                    const isPublic = document.getElementById(`isPublic_${fileId}`).checked;
                    const expiryDate = document.getElementById(`expiryDate_${fileId}`).value;
                    
                    try {
                        const response = await fetch(`/api/files/${fileId}/share`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                isPublic,
                                expiryDate: expiryDate || null
                            })
                        });
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            const shareResult = modal.querySelector('.share-result');
                            const shareLink = modal.querySelector('.share-link');
                            
                            shareResult.style.display = 'block';
                            shareLink.value = window.location.origin + data.shareInfo.shareUrl;
                            
                            // Thêm sự kiện copy
                            modal.querySelector('.copy-btn').addEventListener('click', () => {
                                shareLink.select();
                                document.execCommand('copy');
                                alert('Đã sao chép link chia sẻ!');
                            });
                        } else {
                            console.error('Lỗi chia sẻ file:', data.message);
                            alert('Lỗi: ' + data.message);
                        }
                    } catch (error) {
                        console.error('Lỗi gọi API chia sẻ:', error);
                        alert('Lỗi kết nối đến server');
                    }
                });
            }
            
            // Hiển thị modal
            $(modal).modal('show');
        }
        
        // Hàm hiển thị lỗi
        function showError(message) {
            alert(message);
        }
        
        // Khởi tạo khi trang tải xong
        document.addEventListener('DOMContentLoaded', () => {
            // Tải thư mục
            loadFolders();
            
            // Sự kiện cho nút làm mới thư mục
            document.getElementById('refreshFolders').addEventListener('click', () => {
                loadFolders();
            });
            
            // Sự kiện cho tìm kiếm
            document.getElementById('searchButton').addEventListener('click', () => {
                const query = document.getElementById('searchInput').value.trim();
                if (query) {
                    searchFiles(query);
                }
            });
            
            // Tìm kiếm khi nhấn Enter
            document.getElementById('searchInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const query = e.target.value.trim();
                    if (query) {
                        searchFiles(query);
                    }
                }
            });
        });
    </script>
    
    <!-- Include modal cài đặt -->
    <%- include('partials/settings-modal') %>
</body>
</html> 