<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TeleDrive - Telegram Drive Storage</title>
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  
  <style>
    .file-card {
      transition: transform 0.2s;
    }
    .file-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .bot-status {
      font-size: 12px;
      padding: 5px 10px;
      border-radius: 20px;
    }
    .bot-status.active {
      background-color: #d4edda;
      color: #155724;
    }
    .bot-status.inactive {
      background-color: #f8d7da;
      color: #721c24;
    }
  </style>
</head>
<body class="bg-light">
  <div class="container py-5">
    <header class="text-center mb-5">
      <h1 class="display-4 fw-bold">TeleDrive</h1>
      <p class="lead">Lưu trữ và quản lý file thông qua Telegram</p>
      
      <!-- Hiển thị trạng thái bot -->
      <div class="mt-3">
        <span class="bot-status <%= typeof isBotActive !== 'undefined' && isBotActive ? 'active' : 'inactive' %>">
          <i class="fas <%= typeof isBotActive !== 'undefined' && isBotActive ? 'fa-check-circle' : 'fa-times-circle' %>"></i>
          Bot Telegram: <%= typeof isBotActive !== 'undefined' && isBotActive ? 'Đang hoạt động' : 'Không hoạt động' %>
        </span>
        
        <% if (typeof config !== 'undefined' && config && config.sync) { %>
          <span class="sync-status ms-3">
            <i class="fas fa-sync-alt"></i>
            Đồng bộ tự động: <%= config.interval %> phút
          </span>
        <% } %>
        
        <% if (typeof hasBotConfig !== 'undefined' && !hasBotConfig) { %>
          <div class="alert alert-warning mt-2">
            <i class="fas fa-exclamation-triangle"></i>
            Bạn chưa cấu hình bot Telegram. Vui lòng thiết lập TELEGRAM_BOT_TOKEN và TELEGRAM_CHAT_ID trong .env
          </div>
        <% } %>
        
        <% if (typeof chatId !== 'undefined' && chatId) { %>
          <div class="mt-2">
            <small class="text-muted">Chat ID: <%= chatId %></small>
          </div>
        <% } %>
      </div>
      
      <!-- Hiển thị lỗi (nếu có) -->
      <% if (error) { %>
        <div class="alert alert-danger mt-3" role="alert">
          <%= error %>
        </div>
      <% } %>
      
      <!-- Nút đồng bộ -->
      <div class="mt-4">
        <button id="syncBtn" class="btn btn-primary">
          <i class="fas fa-sync-alt"></i> Đồng bộ ngay
        </button>
      </div>
    </header>
    
    <!-- Hiển thị danh sách file -->
    <div class="row" id="fileList">
      <% if (files && files.length > 0) { %>
        <% files.forEach(function(file) { %>
          <div class="col-md-4 col-lg-3 mb-4">
            <div class="card file-card h-100">
              <div class="card-body">
                <h5 class="card-title text-truncate" title="<%= file.name %>">
                  <i class="fas fa-file text-primary me-2"></i>
                  <%= file.name %>
                </h5>
                <p class="card-text text-muted">
                  <small>
                    <i class="fas fa-weight me-1"></i> <%= file.size %><br>
                    <i class="fas fa-clock me-1"></i> <%= file.date.toLocaleString() %>
                  </small>
                </p>
              </div>
              <div class="card-footer bg-white border-top-0">
                <div class="d-flex justify-content-between">
                  <a href="<%= file.path %>" class="btn btn-sm btn-outline-primary" download>
                    <i class="fas fa-download"></i> Tải xuống
                  </a>
                  <a href="<%= file.path %>" class="btn btn-sm btn-outline-secondary" target="_blank">
                    <i class="fas fa-eye"></i> Xem
                  </a>
                </div>
              </div>
            </div>
          </div>
        <% }); %>
      <% } else { %>
        <div class="col-12 text-center py-5">
          <div class="py-5">
            <i class="fas fa-folder-open fa-4x text-muted mb-3"></i>
            <h3 class="text-muted">Không có file nào</h3>
            <p class="text-muted">Gửi file vào bot Telegram để đồng bộ</p>
          </div>
        </div>
      <% } %>
    </div>
  </div>
  
  <!-- Spinner loading -->
  <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body text-center p-5">
          <div class="spinner-border text-primary mb-3" role="status">
            <span class="visually-hidden">Đang đồng bộ...</span>
          </div>
          <h5>Đang đồng bộ file từ Telegram...</h5>
          <p class="text-muted" id="syncStatus">Vui lòng đợi...</p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- AJAX Script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const syncBtn = document.getElementById('syncBtn');
      const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
      const syncStatus = document.getElementById('syncStatus');
      
      syncBtn.addEventListener('click', function() {
        // Hiển thị loading
        loadingModal.show();
        syncStatus.textContent = 'Đang kết nối với Telegram Bot...';
        
        // Gửi request đồng bộ
        fetch('/sync', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const results = data.results;
            syncStatus.textContent = `Hoàn tất! Tìm thấy ${results.total} file, đồng bộ mới ${results.new}, bỏ qua ${results.skipped}, lỗi ${results.errors}`;
            
            // Đợi 2 giây rồi tải lại trang
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else {
            syncStatus.textContent = `Lỗi: ${data.error}`;
            
            // Đợi 3 giây rồi đóng modal
            setTimeout(() => {
              loadingModal.hide();
            }, 3000);
          }
        })
        .catch(error => {
          syncStatus.textContent = `Lỗi kết nối: ${error.message}`;
          
          // Đợi 3 giây rồi đóng modal
          setTimeout(() => {
            loadingModal.hide();
          }, 3000);
        });
      });
    });
  </script>
</body>
</html>

    <!-- jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <!-- Bootstrap 4 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- AdminLTE App -->
    <script src="https://cdn.jsdelivr.net/npm/admin-lte@3.2/dist/js/adminlte.min.js"></script>
    <!-- Thêm script cài đặt -->
    <script src="/js/settings.js"></script>
    <script>
        // Hàm format bytes
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        // Hàm format date
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Hiển thị loading
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'block';
        }

        // Ẩn loading
        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // Upload file
        async function uploadFile(input) {
            if (!input.files || input.files.length === 0) return;

            showLoading();
            const formData = new FormData();
            formData.append('file', input.files[0]);

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) throw new Error('Upload failed');

                // Reload page after successful upload
                window.location.reload();
            } catch (error) {
                console.error('Upload error:', error);
                alert('Lỗi khi tải lên file: ' + error.message);
                hideLoading();
            }
        }

        // Đồng bộ files
        async function syncFiles() {
            showLoading();
            try {
                const response = await fetch('/api/sync', {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Sync failed');

                window.location.reload();
            } catch (error) {
                console.error('Sync error:', error);
                alert('Lỗi khi đồng bộ: ' + error.message);
                hideLoading();
            }
        }

        // Dọn dẹp uploads
        async function cleanUploads() {
            if (!confirm('Bạn có chắc muốn tải tất cả file lên Telegram?')) return;

            showLoading();
            try {
                const response = await fetch('/api/clean', {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Clean failed');

                window.location.reload();
            } catch (error) {
                console.error('Clean error:', error);
                alert('Lỗi khi dọn dẹp: ' + error.message);
                hideLoading();
            }
        }

        // Xóa file
        async function deleteFile(fileId) {
            if (!confirm('Bạn có chắc muốn xóa file này?')) return;

            showLoading();
            try {
                const response = await fetch(`/api/files/${fileId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) throw new Error('Delete failed');

                window.location.reload();
            } catch (error) {
                console.error('Delete error:', error);
                alert('Lỗi khi xóa file: ' + error.message);
                hideLoading();
            }
        }

        // Drag and drop
        const uploadArea = document.querySelector('.upload-area');

        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = 'var(--primary-color)';
            uploadArea.style.background = '#f8f9fa';
        });

        uploadArea.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#ddd';
            uploadArea.style.background = 'white';
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#ddd';
            uploadArea.style.background = 'white';

            const files = e.dataTransfer.files;
            if (files.length > 0) {
                document.getElementById('fileInput').files = files;
                uploadFile(document.getElementById('fileInput'));
            }
        });

        // Script xử lý sửa dữ liệu
        document.addEventListener('DOMContentLoaded', function() {
            const btnCheckFiles = document.getElementById('btnCheckFiles');
            const btnSync = document.getElementById('btnSync');
            const btnResetDb = document.getElementById('btnResetDb');
            const checkResult = document.getElementById('checkResult');
            
            if (btnCheckFiles) {
                btnCheckFiles.addEventListener('click', async function(e) {
                    e.preventDefault();
                    
                    try {
                        checkResult.innerHTML = '<div class="alert alert-info">Đang kiểm tra và sửa dữ liệu...</div>';
                        
                        const response = await fetch('/api/check-files');
                        const data = await response.json();
                        
                        if (data.success) {
                            checkResult.innerHTML = `<div class="alert alert-success">
                                <p>${data.message}</p>
                                <button class="btn btn-sm btn-primary" onclick="location.reload()">Tải lại trang</button>
                            </div>`;
                        } else {
                            checkResult.innerHTML = `<div class="alert alert-danger">
                                <p>${data.message || 'Lỗi kiểm tra dữ liệu'}</p>
                            </div>`;
                        }
                    } catch (error) {
                        checkResult.innerHTML = `<div class="alert alert-danger">
                            <p>Lỗi: ${error.message}</p>
                        </div>`;
                    }
                });
            }
            
            if (btnSync) {
                btnSync.addEventListener('click', async function(e) {
                    e.preventDefault();
                    
                    try {
                        checkResult.innerHTML = '<div class="alert alert-info">Đang đồng bộ với Telegram...</div>';
                        
                        const response = await fetch('/api/sync', {
                            method: 'POST'
                        });
                        const data = await response.json();
                        
                        if (data.success) {
                            checkResult.innerHTML = `<div class="alert alert-success">
                                <p>Đồng bộ thành công! ${data.newFiles} file được đồng bộ.</p>
                                <button class="btn btn-sm btn-primary" onclick="location.reload()">Tải lại trang</button>
                            </div>`;
                        } else {
                            checkResult.innerHTML = `<div class="alert alert-danger">
                                <p>${data.error || 'Lỗi đồng bộ'}</p>
                            </div>`;
                        }
                    } catch (error) {
                        checkResult.innerHTML = `<div class="alert alert-danger">
                            <p>Lỗi: ${error.message}</p>
                        </div>`;
                    }
                });
            }

            if (btnResetDb) {
                btnResetDb.addEventListener('click', async function(e) {
                    e.preventDefault();
                    
                    if (!confirm('Thao tác này sẽ xóa toàn bộ dữ liệu hiện tại và tạo lại database từ các file trong thư mục uploads. Bạn có chắc chắn muốn tiếp tục?')) {
                        return;
                    }
                    
                    try {
                        checkResult.innerHTML = '<div class="alert alert-info">Đang khởi tạo lại database...</div>';
                        
                        const response = await fetch('/api/reset-database');
                        const data = await response.json();
                        
                        if (data.success) {
                            checkResult.innerHTML = `<div class="alert alert-success">
                                <p>${data.message}. Đã tìm thấy ${data.totalFiles} file.</p>
                                <p>Đồng bộ: ${data.sync.success ? `Thành công, đã đồng bộ ${data.sync.syncedFiles} file` : 'Không thành công'}</p>
                                <button class="btn btn-sm btn-primary" onclick="location.reload()">Tải lại trang</button>
                            </div>`;
                        } else {
                            checkResult.innerHTML = `<div class="alert alert-danger">
                                <p>${data.message || 'Lỗi khởi tạo lại database'}</p>
                            </div>`;
                        }
                    } catch (error) {
                        checkResult.innerHTML = `<div class="alert alert-danger">
                            <p>Lỗi: ${error.message}</p>
                        </div>`;
                    }
                });
            }
        });

        let currentFolderId = 'root';
        let folderStructure = null;
        let currentPath = [];
        
        // Hàm tải cấu trúc thư mục
        async function loadFolders() {
            try {
                const response = await fetch('/api/folders');
                const data = await response.json();
                
                if (data.success) {
                    folderStructure = data.folders;
                    renderFolder(folderStructure);
                } else {
                    console.error('Lỗi tải thư mục:', data.message);
                    showError('Không thể tải cấu trúc thư mục');
                }
            } catch (error) {
                console.error('Lỗi gọi API thư mục:', error);
                showError('Lỗi kết nối đến server');
            }
        }
        
        // Hàm mở thư mục
        async function openFolder(folderId) {
            try {
                const response = await fetch(`/api/folders/${folderId}`);
                const data = await response.json();
                
                if (data.success) {
                    currentFolderId = folderId;
                    renderFolder(data.folder);
                    updateBreadcrumb();
                } else {
                    console.error('Lỗi mở thư mục:', data.message);
                    showError('Không thể mở thư mục');
                }
            } catch (error) {
                console.error('Lỗi gọi API thư mục:', error);
                showError('Lỗi kết nối đến server');
            }
        }
        
        // Hàm hiển thị thư mục
        function renderFolder(folder) {
            const folderContents = document.getElementById('folderContents');
            folderContents.innerHTML = '';
            
            if (!folder || !folder.children || folder.children.length === 0) {
                folderContents.innerHTML = '<div class="col-12 text-center"><p class="text-muted">Thư mục trống</p></div>';
                return;
            }
            
            // Hiển thị thư mục con trước
            const folders = folder.children.filter(item => item.type === 'folder');
            folders.forEach(subFolder => {
                const folderCard = document.createElement('div');
                folderCard.className = 'col-md-3 col-sm-4 col-6 mb-3';
                folderCard.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <a href="#" class="folder-link" data-folder-id="${subFolder.id}">
                                <i class="fas fa-folder fa-3x text-warning"></i>
                                <p class="mt-2 mb-0 text-truncate">${subFolder.name}</p>
                            </a>
                        </div>
                    </div>
                `;
                folderContents.appendChild(folderCard);
            });
            
            // Hiển thị file
            const files = folder.children.filter(item => item.type === 'file');
            files.forEach(file => {
                const fileCard = document.createElement('div');
                fileCard.className = 'col-md-3 col-sm-4 col-6 mb-3';
                
                let fileIcon = '';
                switch (file.fileType) {
                    case 'image':
                        fileIcon = '<i class="fas fa-image fa-3x text-info"></i>';
                        break;
                    case 'video':
                        fileIcon = '<i class="fas fa-video fa-3x text-danger"></i>';
                        break;
                    case 'audio':
                        fileIcon = '<i class="fas fa-music fa-3x text-success"></i>';
                        break;
                    case 'pdf':
                        fileIcon = '<i class="fas fa-file-pdf fa-3x text-danger"></i>';
                        break;
                    case 'text':
                        fileIcon = '<i class="fas fa-file-alt fa-3x text-primary"></i>';
                        break;
                    default:
                        fileIcon = '<i class="fas fa-file fa-3x text-secondary"></i>';
                }
                
                fileCard.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <a href="/file/${file.id}" class="file-link">
                                ${fileIcon}
                                <p class="mt-2 mb-0 text-truncate">${file.displayName || file.name}</p>
                            </a>
                        </div>
                        <div class="card-footer p-1">
                            <div class="btn-group btn-group-sm w-100">
                                <a href="/api/files/${file.id}/download" class="btn btn-outline-primary" title="Tải xuống">
                                    <i class="fas fa-download"></i>
                                </a>
                                <button class="btn btn-outline-success share-btn" data-file-id="${file.id}" title="Chia sẻ">
                                    <i class="fas fa-share-alt"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                folderContents.appendChild(fileCard);
            });
            
            // Thêm sự kiện cho các nút thư mục
            document.querySelectorAll('.folder-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const folderId = link.getAttribute('data-folder-id');
                    openFolder(folderId);
                });
            });
            
            // Thêm sự kiện cho nút chia sẻ
            document.querySelectorAll('.share-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const fileId = btn.getAttribute('data-file-id');
                    showShareDialog(fileId);
                });
            });
        }
        
        // Cập nhật đường dẫn thư mục
        function updateBreadcrumb() {
            // Đơn giản hóa cho ví dụ này - trong thực tế cần tìm đường dẫn đầy đủ từ root đến folder hiện tại
            const breadcrumb = document.getElementById('folderBreadcrumb').querySelector('ol');
            breadcrumb.innerHTML = '<li class="breadcrumb-item"><a href="#" data-folder-id="root"><i class="fas fa-home"></i> Root</a></li>';
            
            if (currentFolderId !== 'root') {
                breadcrumb.innerHTML += `<li class="breadcrumb-item active">${currentFolderId.replace('folder_', '').replace(/_/g, ' ')}</li>`;
            }
            
            // Thêm lại sự kiện cho breadcrumb
            breadcrumb.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const folderId = link.getAttribute('data-folder-id');
                    openFolder(folderId);
                });
            });
        }
        
        // Hàm tìm kiếm file
        async function searchFiles(query) {
            try {
                const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
                const data = await response.json();
                
                if (data.success) {
                    showSearchResults(data.results, query);
                } else {
                    console.error('Lỗi tìm kiếm:', data.message);
                    showError('Không thể thực hiện tìm kiếm');
                }
            } catch (error) {
                console.error('Lỗi gọi API tìm kiếm:', error);
                showError('Lỗi kết nối đến server');
            }
        }
        
        // Hiển thị kết quả tìm kiếm
        function showSearchResults(results, query) {
            const folderContents = document.getElementById('folderContents');
            folderContents.innerHTML = '';
            
            if (results.length === 0) {
                folderContents.innerHTML = `<div class="col-12 text-center"><p class="text-muted">Không tìm thấy kết quả nào cho "${query}"</p></div>`;
                return;
            }
            
            // Hiển thị tiêu đề kết quả tìm kiếm
            folderContents.innerHTML = `
                <div class="col-12 mb-3">
                    <h5>Kết quả tìm kiếm cho "${query}" (${results.length} kết quả)</h5>
                    <button class="btn btn-sm btn-outline-secondary" id="backToFolder">
                        <i class="fas fa-arrow-left"></i> Quay lại thư mục
                    </button>
                </div>
            `;
            
            // Hiển thị các kết quả
            results.forEach(file => {
                const fileCard = document.createElement('div');
                fileCard.className = 'col-md-3 col-sm-4 col-6 mb-3';
                
                let fileIcon = '';
                switch (file.fileType) {
                    case 'image':
                        fileIcon = '<i class="fas fa-image fa-3x text-info"></i>';
                        break;
                    case 'video':
                        fileIcon = '<i class="fas fa-video fa-3x text-danger"></i>';
                        break;
                    case 'audio':
                        fileIcon = '<i class="fas fa-music fa-3x text-success"></i>';
                        break;
                    case 'pdf':
                        fileIcon = '<i class="fas fa-file-pdf fa-3x text-danger"></i>';
                        break;
                    case 'text':
                        fileIcon = '<i class="fas fa-file-alt fa-3x text-primary"></i>';
                        break;
                    default:
                        fileIcon = '<i class="fas fa-file fa-3x text-secondary"></i>';
                }
                
                fileCard.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <a href="/file/${file.id}" class="file-link">
                                ${fileIcon}
                                <p class="mt-2 mb-0 text-truncate">${file.name}</p>
                            </a>
                            <small class="text-muted">${file.formattedSize} - ${file.formattedDate}</small>
                        </div>
                        <div class="card-footer p-1">
                            <div class="btn-group btn-group-sm w-100">
                                <a href="${file.downloadUrl}" class="btn btn-outline-primary" title="Tải xuống">
                                    <i class="fas fa-download"></i>
                                </a>
                                <a href="${file.previewUrl}" class="btn btn-outline-info" title="Xem trước">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <button class="btn btn-outline-success share-btn" data-file-id="${file.id}" title="Chia sẻ">
                                    <i class="fas fa-share-alt"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                folderContents.appendChild(fileCard);
            });
            
            // Thêm sự kiện quay lại thư mục
            document.getElementById('backToFolder').addEventListener('click', () => {
                openFolder(currentFolderId);
            });
            
            // Thêm sự kiện cho nút chia sẻ
            document.querySelectorAll('.share-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const fileId = btn.getAttribute('data-file-id');
                    showShareDialog(fileId);
                });
            });
        }
        
        // Hiển thị dialog chia sẻ
        function showShareDialog(fileId) {
            // Tạo modal chia sẻ
            const modalId = 'shareModal_' + fileId;
            let modal = document.getElementById(modalId);
            
            if (!modal) {
                const modalHtml = `
                    <div class="modal fade" id="${modalId}" tabindex="-1" role="dialog" aria-labelledby="${modalId}Label" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="${modalId}Label">Chia sẻ file</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <form id="shareForm_${fileId}">
                                        <div class="form-group">
                                            <div class="custom-control custom-switch">
                                                <input type="checkbox" class="custom-control-input" id="isPublic_${fileId}" checked>
                                                <label class="custom-control-label" for="isPublic_${fileId}">Công khai file</label>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label for="expiryDate_${fileId}">Ngày hết hạn (tùy chọn)</label>
                                            <input type="date" class="form-control" id="expiryDate_${fileId}">
                                        </div>
                                        <div class="form-group share-result" style="display:none;">
                                            <label>Link chia sẻ:</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control share-link" readonly>
                                                <div class="input-group-append">
                                                    <button class="btn btn-outline-secondary copy-btn" type="button">
                                                        <i class="fas fa-copy"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                                    <button type="button" class="btn btn-primary save-share-btn" data-file-id="${fileId}">Lưu thiết lập</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                modal = document.getElementById(modalId);
                
                // Thêm sự kiện cho nút lưu
                modal.querySelector('.save-share-btn').addEventListener('click', async () => {
                    const isPublic = document.getElementById(`isPublic_${fileId}`).checked;
                    const expiryDate = document.getElementById(`expiryDate_${fileId}`).value;
                    
                    try {
                        const response = await fetch(`/api/files/${fileId}/share`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                isPublic,
                                expiryDate: expiryDate || null
                            })
                        });
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            const shareResult = modal.querySelector('.share-result');
                            const shareLink = modal.querySelector('.share-link');
                            
                            shareResult.style.display = 'block';
                            shareLink.value = window.location.origin + data.shareInfo.shareUrl;
                            
                            // Thêm sự kiện copy
                            modal.querySelector('.copy-btn').addEventListener('click', () => {
                                shareLink.select();
                                document.execCommand('copy');
                                alert('Đã sao chép link chia sẻ!');
                            });
                        } else {
                            console.error('Lỗi chia sẻ file:', data.message);
                            alert('Lỗi: ' + data.message);
                        }
                    } catch (error) {
                        console.error('Lỗi gọi API chia sẻ:', error);
                        alert('Lỗi kết nối đến server');
                    }
                });
            }
            
            // Hiển thị modal
            $(modal).modal('show');
        }
        
        // Hàm hiển thị lỗi
        function showError(message) {
            alert(message);
        }
        
        // Khởi tạo khi trang tải xong
        document.addEventListener('DOMContentLoaded', () => {
            // Tải thư mục
            loadFolders();
            
            // Sự kiện cho nút làm mới thư mục
            document.getElementById('refreshFolders').addEventListener('click', () => {
                loadFolders();
            });
            
            // Sự kiện cho tìm kiếm
            document.getElementById('search-button').addEventListener('click', () => {
                const query = document.getElementById('search-input').value.trim();
                if (query) {
                    searchFiles(query);
                }
            });
            
            // Tìm kiếm khi nhấn Enter
            document.getElementById('search-input').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const query = e.target.value.trim();
                    if (query) {
                        searchFiles(query);
                    }
                }
            });
        });
    </script>
    
    <!-- Include modal cài đặt -->
    <%- include('partials/settings-modal') %>
</body>
</html> 