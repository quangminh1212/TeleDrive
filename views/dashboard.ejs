<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TeleDrive - Quản lý File</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    :root {
      --primary-color: #0088cc;
      --primary-dark: #006699;
      --primary-light: #00aaff;
      --accent-color: #fe9800;
      --text-color: #202324;
      --text-secondary: #666666;
      --background-color: #f7f9fb;
      --card-bg: #ffffff;
      --border-color: #e1e4e8;
      --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.1);
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 20px;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      color: var(--text-color);
      background-color: var(--background-color);
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }
    
    .dashboard {
      display: flex;
      min-height: calc(100vh - 140px);
    }
    
    /* Header styles */
    header {
      background-color: var(--card-bg);
      box-shadow: var(--shadow-sm);
      padding: 0.8rem 1.5rem;
      position: sticky;
      top: 0;
      z-index: 100;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .logo {
      display: flex;
      align-items: center;
    }
    
    .logo h1 {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--primary-color);
      margin: 0;
    }
    
    nav ul {
      display: flex;
      list-style: none;
      margin: 0;
      padding: 0;
      gap: 1.5rem;
    }
    
    nav ul li a {
      text-decoration: none;
      color: var(--text-secondary);
      font-weight: 500;
      padding: 0.5rem 0;
      transition: color 0.2s;
      position: relative;
    }
    
    nav ul li a::after {
      content: '';
      position: absolute;
      bottom: -2px;
      left: 0;
      width: 0;
      height: 2px;
      background-color: var(--primary-color);
      transition: width 0.3s ease;
    }
    
    nav ul li a:hover::after,
    nav ul li a.active::after {
      width: 100%;
    }
    
    nav ul li a:hover,
    nav ul li a.active {
      color: var(--primary-color);
    }
    
    /* Sidebar styles */
    .sidebar {
      width: 260px;
      background-color: var(--card-bg);
      border-right: 1px solid var(--border-color);
      padding: 1.5rem;
      transition: all 0.3s ease;
      position: sticky;
      top: 61px;
      height: calc(100vh - 61px);
      overflow-y: auto;
    }
    
    .user-info {
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .user-info h3 {
      font-size: 1.1rem;
      margin: 0;
      font-weight: 600;
      color: var(--text-color);
    }
    
    .sidebar-menu {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .sidebar-menu li {
      margin-bottom: 0.5rem;
    }
    
    .sidebar-menu a {
      display: flex;
      align-items: center;
      text-decoration: none;
      color: var(--text-secondary);
      padding: 0.8rem 1rem;
      border-radius: var(--radius-md);
      transition: all 0.2s;
      font-weight: 500;
    }
    
    .sidebar-menu a:hover {
      background-color: rgba(0, 136, 204, 0.08);
      color: var(--primary-color);
    }
    
    .sidebar-menu a.active {
      background-color: rgba(0, 136, 204, 0.12);
      color: var(--primary-color);
      font-weight: 600;
    }
    
    .sidebar-menu .icon {
      margin-right: 12px;
      font-size: 18px;
      width: 24px;
      text-align: center;
    }
    
    .storage-info {
      background-color: #f9f9fb;
      border-radius: var(--radius-md);
      padding: 1.2rem;
      margin-top: 1.5rem;
    }
    
    .storage-info h4 {
      font-size: 0.9rem;
      margin: 0 0 0.8rem 0;
      color: var(--text-secondary);
      font-weight: 600;
    }
    
    .storage-bar {
      height: 6px;
      background-color: #e0e0e0;
      border-radius: 10px;
      overflow: hidden;
      margin-bottom: 0.8rem;
    }
    
    .storage-used {
      height: 100%;
      background: linear-gradient(90deg, var(--primary-color), var(--primary-light));
      width: 0%;
      border-radius: 10px;
      transition: width 1s ease;
    }
    
    .storage-info p {
      font-size: 0.8rem;
      color: var(--text-secondary);
      margin: 0;
    }
    
    /* Main content styles */
    .main-content {
      flex: 1;
      padding: 1.5rem;
      transition: margin-left 0.3s ease;
    }
    
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .dashboard-header h2 {
      font-size: 1.5rem;
      font-weight: 600;
      margin: 0;
    }
    
    /* File grid styles */
    .file-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1.2rem;
    }
    
    .file-card {
      background-color: var(--card-bg);
      border-radius: var(--radius-md);
      padding: 1.2rem;
      text-align: center;
      transition: all 0.3s;
      position: relative;
      border: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
      cursor: pointer;
    }
    
    .file-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-4px);
    }
    
    .file-icon {
      font-size: 40px;
      margin-bottom: 0.8rem;
      color: var(--primary-color);
    }
    
    .file-name {
      font-weight: 600;
      margin-bottom: 5px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      font-size: 0.9rem;
    }
    
    .file-size {
      color: var(--text-secondary);
      font-size: 0.8rem;
    }
    
    .upload-btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
      color: white;
      padding: 0.7rem 1.5rem;
      border-radius: var(--radius-md);
      text-decoration: none;
      transition: all 0.3s;
      font-weight: 600;
      font-size: 0.9rem;
      box-shadow: 0 2px 8px rgba(0, 136, 204, 0.25);
    }
    
    .upload-btn:hover {
      background: linear-gradient(135deg, var(--primary-dark), var(--primary-color));
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 136, 204, 0.3);
    }
    
    /* Empty state styles */
    .empty-state {
      text-align: center;
      padding: 3rem;
      background-color: var(--card-bg);
      border-radius: var(--radius-md);
      border: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
    }
    
    .empty-state .icon {
      font-size: 5rem;
      color: #ddd;
      margin-bottom: 1.5rem;
    }
    
    .empty-state h3 {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 0.8rem;
    }
    
    .empty-state p {
      color: var(--text-secondary);
      margin-bottom: 1.5rem;
      max-width: 400px;
      margin-left: auto;
      margin-right: auto;
    }
    
    /* Upload Modal */
    .modal {
      display: none;
      position: fixed;
      z-index: 100;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      backdrop-filter: blur(5px);
    }
    
    .modal-content {
      background-color: white;
      margin: 10% auto;
      padding: 2rem;
      border-radius: var(--radius-lg);
      width: 90%;
      max-width: 500px;
      box-shadow: var(--shadow-lg);
    }
    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 0.8rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .modal-header h3 {
      font-size: 1.3rem;
      font-weight: 600;
      margin: 0;
    }
    
    .close {
      color: var(--text-secondary);
      font-size: 28px;
      font-weight: 300;
      cursor: pointer;
      transition: color 0.2s;
    }
    
    .close:hover {
      color: var(--text-color);
    }
    
    .upload-area {
      border: 2px dashed var(--border-color);
      border-radius: var(--radius-md);
      padding: 2rem;
      text-align: center;
      margin-bottom: 1.5rem;
      cursor: pointer;
      transition: all 0.3s;
      background-color: var(--background-color);
    }
    
    .upload-area:hover {
      border-color: var(--primary-color);
      background-color: rgba(0, 136, 204, 0.05);
    }
    
    .upload-area p {
      color: var(--text-secondary);
      margin-bottom: 0;
    }
    
    .file-input {
      display: none;
    }
    
    .upload-progress {
      margin-top: 1rem;
      display: none;
    }
    
    .progress-bar {
      height: 6px;
      background-color: #f3f3f3;
      border-radius: var(--radius-lg);
      overflow: hidden;
      margin-bottom: 0.8rem;
    }
    
    .progress {
      height: 100%;
      background: linear-gradient(90deg, var(--primary-color), var(--primary-light));
      width: 0%;
      border-radius: var(--radius-lg);
      transition: width 0.3s;
    }
    
    /* File Actions */
    .file-actions {
      position: absolute;
      top: 10px;
      right: 10px;
      display: none;
      gap: 5px;
    }
    
    .file-card:hover .file-actions {
      display: flex;
    }
    
    .file-action {
      width: 28px;
      height: 28px;
      border-radius: 50%;
      background: #f3f3f3;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s;
      color: var(--text-secondary);
    }
    
    .file-action:hover {
      background: var(--primary-color);
      color: white;
      transform: scale(1.1);
    }
    
    /* Loading spinner */
    .loading {
      display: none;
      text-align: center;
      padding: 2rem;
    }
    
    .spinner {
      border: 3px solid rgba(0, 136, 204, 0.1);
      border-top: 3px solid var(--primary-color);
      border-radius: 50%;
      width: 30px;
      height: 30px;
      animation: spin 1s linear infinite;
      margin: 0 auto 1rem;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Settings styles */
    .settings-section {
      background: var(--card-bg);
      border-radius: var(--radius-md);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      box-shadow: var(--shadow-sm);
      border: 1px solid var(--border-color);
    }
    
    .settings-title {
      font-size: 1.2rem;
      margin-bottom: 1.2rem;
      padding-bottom: 0.8rem;
      border-bottom: 1px solid var(--border-color);
      font-weight: 600;
    }
    
    .form-group {
      margin-bottom: 1.2rem;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      font-size: 0.9rem;
    }
    
    .form-control {
      width: 100%;
      padding: 0.7rem 1rem;
      border: 1px solid var(--border-color);
      border-radius: var(--radius-md);
      font-size: 0.9rem;
      transition: border-color 0.2s, box-shadow 0.2s;
    }
    
    .form-control:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 3px rgba(0, 136, 204, 0.1);
    }
    
    .checkbox-group {
      display: flex;
      align-items: center;
    }
    
    .checkbox-group input {
      margin-right: 10px;
      accent-color: var(--primary-color);
    }
    
    .btn {
      padding: 0.7rem 1.5rem;
      border: none;
      border-radius: var(--radius-md);
      cursor: pointer;
      font-weight: 600;
      font-size: 0.9rem;
      transition: all 0.3s;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
      color: white;
      box-shadow: 0 2px 8px rgba(0, 136, 204, 0.25);
    }
    
    .btn-primary:hover {
      background: linear-gradient(135deg, var(--primary-dark), var(--primary-color));
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 136, 204, 0.3);
    }
    
    .btn-danger {
      background: linear-gradient(135deg, #ff4b4b, #d90429);
      color: white;
      box-shadow: 0 2px 8px rgba(217, 4, 41, 0.25);
    }
    
    .btn-danger:hover {
      background: linear-gradient(135deg, #d90429, #ff4b4b);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(217, 4, 41, 0.3);
    }
    
    /* Footer styles */
    footer {
      background-color: var(--card-bg);
      border-top: 1px solid var(--border-color);
      padding: 1.5rem;
      text-align: center;
      color: var(--text-secondary);
      font-size: 0.9rem;
    }
    
    /* Responsive styles */
    @media (max-width: 768px) {
      .dashboard {
        flex-direction: column;
      }
      
      .sidebar {
        width: 100%;
        height: auto;
        position: static;
        border-right: none;
        border-bottom: 1px solid var(--border-color);
      }
      
      .sidebar-menu a {
        padding: 0.7rem;
      }
      
      header {
        flex-direction: column;
        padding: 1rem;
      }
      
      nav ul {
        margin-top: 1rem;
        width: 100%;
        justify-content: center;
        flex-wrap: wrap;
      }
      
      .dashboard-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
      }
      
      .file-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="logo">
      <h1>TeleDrive</h1>
    </div>
    <nav>
      <ul>
        <li><a href="/">Trang chủ</a></li>
        <li><a href="/dashboard" class="active">Quản lý File</a></li>
        <li><a href="/logout">Đăng xuất</a></li>
      </ul>
    </nav>
  </header>

  <main class="dashboard">
    <div class="sidebar">
      <div class="user-info">
        <h3>Xin chào, <%= user.firstName %></h3>
      </div>
      <ul class="sidebar-menu">
        <li><a href="/dashboard" class="<%= !locals.activeType ? 'active' : '' %>"><span class="icon"><i class="far fa-folder"></i></span> Tất cả file</a></li>
        <li><a href="/dashboard/photos" class="<%= locals.activeType === 'photos' ? 'active' : '' %>"><span class="icon"><i class="far fa-image"></i></span> Hình ảnh</a></li>
        <li><a href="/dashboard/videos" class="<%= locals.activeType === 'videos' ? 'active' : '' %>"><span class="icon"><i class="far fa-file-video"></i></span> Video</a></li>
        <li><a href="/dashboard/documents" class="<%= locals.activeType === 'documents' ? 'active' : '' %>"><span class="icon"><i class="far fa-file-alt"></i></span> Tài liệu</a></li>
        <li><a href="/dashboard/audio" class="<%= locals.activeType === 'audio' ? 'active' : '' %>"><span class="icon"><i class="far fa-file-audio"></i></span> Âm thanh</a></li>
        <li><a href="/dashboard/trash" class="<%= locals.activeType === 'trash' ? 'active' : '' %>"><span class="icon"><i class="far fa-trash-alt"></i></span> Thùng rác</a></li>
        <li><a href="/dashboard/settings" class="<%= locals.activeType === 'settings' ? 'active' : '' %>"><span class="icon"><i class="fas fa-cog"></i></span> Cài đặt</a></li>
      </ul>
      
      <div class="storage-info">
        <h4>Dung lượng lưu trữ</h4>
        <div class="storage-bar">
          <div class="storage-used" style="width: <% var percentage = typeof user.getStoragePercentage === 'function' ? user.getStoragePercentage() : (user.storagePercentage || 0); %><%= percentage %>%"></div>
        </div>
        <p>Đã sử dụng: <%= typeof user.getStoragePercentage === 'function' ? user.getStoragePercentage() : (user.storagePercentage || 0) %>%</p>
      </div>
    </div>
    
    <div class="main-content">
      <% if (locals.activeType === 'settings') { %>
        <!-- Settings page -->
        <div class="dashboard-header">
          <h2>Cài đặt</h2>
        </div>
        
        <div class="settings-section">
          <h3 class="settings-title">Tài khoản</h3>
          <div class="form-group">
            <label>Tên của bạn</label>
            <input type="text" class="form-control" value="<%= user.firstName %> <%= user.lastName || '' %>" disabled>
          </div>
          <div class="form-group">
            <label>Loại tài khoản</label>
            <input type="text" class="form-control" value="<%= user.isPremium ? 'Premium' : 'Miễn phí' %>" disabled>
          </div>
          <% if (!user.isPremium) { %>
            <p>Nâng cấp lên tài khoản Premium để có thêm dung lượng lưu trữ.</p>
            <button class="btn btn-primary" id="upgrade-btn">Nâng cấp lên Premium</button>
          <% } %>
        </div>
        
        <div class="settings-section">
          <h3 class="settings-title">Tùy chọn</h3>
          <div class="form-group checkbox-group">
            <input type="checkbox" id="auto-delete-downloads" <%= user.settings && user.settings.autoDeleteDownloads ? 'checked' : '' %>>
            <label for="auto-delete-downloads">Tự động xóa file sau khi tải xuống</label>
          </div>
          <div class="form-group checkbox-group">
            <input type="checkbox" id="notifications" <%= user.settings && user.settings.notificationsEnabled ? 'checked' : '' %>>
            <label for="notifications">Bật thông báo</label>
          </div>
          <button class="btn btn-primary" id="save-settings">Lưu cài đặt</button>
        </div>
        
        <div class="settings-section">
          <h3 class="settings-title">Nguy hiểm</h3>
          <p>Hành động này sẽ xóa vĩnh viễn tất cả các file của bạn.</p>
          <button class="btn btn-danger" id="delete-all-files">Xóa tất cả file</button>
        </div>
      <% } else { %>
        <!-- File listing page -->
        <div class="dashboard-header">
          <% if (locals.activeType === 'photos') { %>
            <h2><i class="far fa-image"></i> Hình ảnh</h2>
          <% } else if (locals.activeType === 'videos') { %>
            <h2><i class="far fa-file-video"></i> Video</h2>
          <% } else if (locals.activeType === 'documents') { %>
            <h2><i class="far fa-file-alt"></i> Tài liệu</h2>
          <% } else if (locals.activeType === 'audio') { %>
            <h2><i class="far fa-file-audio"></i> Âm thanh</h2>
          <% } else if (locals.activeType === 'trash') { %>
            <h2><i class="far fa-trash-alt"></i> Thùng rác</h2>
          <% } else { %>
            <h2><i class="far fa-folder"></i> Tất cả file</h2>
          <% } %>
          
          <% if (locals.activeType !== 'trash' && locals.activeType !== 'settings') { %>
            <a href="#" class="upload-btn" id="upload-btn">
              <i class="fas fa-upload"></i> Tải lên
            </a>
          <% } else if (locals.activeType === 'trash') { %>
            <button class="btn btn-danger" id="empty-trash">
              <i class="fas fa-trash-alt"></i> Dọn thùng rác
            </button>
          <% } %>
        </div>
        
        <!-- Loading state -->
        <div class="loading" id="loading">
          <div class="spinner"></div>
          <p>Đang tải...</p>
        </div>
        
        <!-- Empty state - initially hidden, will show if no files -->
        <div class="empty-state" id="empty-state" style="display: none;">
          <div class="icon">
            <% if (locals.activeType === 'photos') { %>
              <i class="far fa-image"></i>
            <% } else if (locals.activeType === 'videos') { %>
              <i class="far fa-file-video"></i>
            <% } else if (locals.activeType === 'documents') { %>
              <i class="far fa-file-alt"></i>
            <% } else if (locals.activeType === 'audio') { %>
              <i class="far fa-file-audio"></i>
            <% } else if (locals.activeType === 'trash') { %>
              <i class="far fa-trash-alt"></i>
            <% } else { %>
              <i class="far fa-folder-open"></i>
            <% } %>
          </div>
          <% if (locals.activeType === 'trash') { %>
            <h3>Thùng rác trống</h3>
            <p>Không có file nào trong thùng rác</p>
          <% } else { %>
            <h3>Chưa có file nào</h3>
            <p>Hãy tải lên file đầu tiên của bạn để bắt đầu sử dụng TeleDrive</p>
            <a href="#" class="upload-btn" id="empty-upload-btn">
              <i class="fas fa-upload"></i> Tải lên ngay
            </a>
          <% } %>
        </div>
        
        <!-- File grid - initially hidden, will be populated with files -->
        <div class="file-grid" id="file-grid">
          <!-- Files will be rendered here via JavaScript -->
        </div>
      <% } %>
    </div>
  </main>

  <footer>
    <p>&copy; <%= new Date().getFullYear() %> TeleDrive. Tất cả các quyền được bảo lưu.</p>
  </footer>

  <!-- Upload Modal -->
  <div id="upload-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Tải lên file</h3>
        <span class="close">&times;</span>
      </div>
      <div class="upload-area" id="drop-area">
        <p><i class="fas fa-cloud-upload-alt" style="font-size: 2rem; margin-bottom: 0.8rem; display: block; color: var(--primary-color);"></i>
        Kéo và thả file vào đây hoặc nhấn để chọn file</p>
        <input type="file" id="file-input" class="file-input">
      </div>
      <div id="upload-progress" class="upload-progress">
        <p id="upload-status">Đang tải lên...</p>
        <div class="progress-bar">
          <div class="progress" id="progress-bar"></div>
        </div>
      </div>
      <button id="upload-submit" class="btn btn-primary" style="width: 100%;">Tải lên</button>
    </div>
  </div>

  <script src="/js/main.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const fileGrid = document.getElementById('file-grid');
      const emptyState = document.getElementById('empty-state');
      const loadingElement = document.getElementById('loading');
      const uploadBtn = document.getElementById('upload-btn');
      const emptyUploadBtn = document.getElementById('empty-upload-btn');
      const uploadModal = document.getElementById('upload-modal');
      const closeBtn = document.querySelector('.close');
      const dropArea = document.getElementById('drop-area');
      const fileInput = document.getElementById('file-input');
      const uploadSubmit = document.getElementById('upload-submit');
      const progressBar = document.getElementById('progress-bar');
      const uploadProgress = document.getElementById('upload-progress');
      const uploadStatus = document.getElementById('upload-status');
      
      let currentFiles = [];
      
      // Get current page type from URL or default to 'all'
      const currentPath = window.location.pathname;
      let fileType = 'all';
      
      if (currentPath.includes('/photos')) fileType = 'photos';
      else if (currentPath.includes('/videos')) fileType = 'videos';
      else if (currentPath.includes('/documents')) fileType = 'documents';
      else if (currentPath.includes('/audio')) fileType = 'audio';
      else if (currentPath.includes('/trash')) fileType = 'trash';
      else if (currentPath.includes('/settings')) fileType = 'settings';
      
      // Don't load files on settings page
      if (fileType !== 'settings') {
        // Show loading state
        loadingElement.style.display = 'block';
        
        // Fetch files from API based on the current page
        fetchFiles(fileType);
      }
      
      // Open the upload modal
      function openUploadModal() {
        uploadModal.style.display = 'block';
        
        // Reset upload form
        fileInput.value = '';
        uploadProgress.style.display = 'none';
        progressBar.style.width = '0%';
        uploadStatus.textContent = 'Đang tải lên...';
      }
      
      // Close the upload modal
      function closeUploadModal() {
        uploadModal.style.display = 'none';
      }
      
      // Upload button click event
      if (uploadBtn) {
        uploadBtn.addEventListener('click', function(e) {
          e.preventDefault();
          openUploadModal();
        });
      }
      
      // Empty state upload button click event
      if (emptyUploadBtn) {
        emptyUploadBtn.addEventListener('click', function(e) {
          e.preventDefault();
          openUploadModal();
        });
      }
      
      // Close button click event
      if (closeBtn) {
        closeBtn.addEventListener('click', closeUploadModal);
      }
      
      // Click outside modal to close
      window.addEventListener('click', function(e) {
        if (e.target === uploadModal) {
          closeUploadModal();
        }
      });
      
      // Drop area click event
      if (dropArea) {
        dropArea.addEventListener('click', function() {
          fileInput.click();
        });
      }
      
      // Handle file selection
      if (fileInput) {
        fileInput.addEventListener('change', function() {
          if (fileInput.files.length > 0) {
            const fileName = fileInput.files[0].name;
            dropArea.innerHTML = `<p>File: ${fileName}</p>`;
          }
        });
      }
      
      // Submit upload form
      if (uploadSubmit) {
        uploadSubmit.addEventListener('click', function() {
          if (fileInput.files.length === 0) {
            alert('Vui lòng chọn file để tải lên');
            return;
          }
          
          const file = fileInput.files[0];
          
          // Show progress
          uploadProgress.style.display = 'block';
          uploadSubmit.disabled = true;
          
          // Create form data
          const formData = new FormData();
          formData.append('file', file);
          
          // Tải file lên sử dụng API thật
          uploadFile(formData);
        });
      }
      
      // Fetch files from API
      function fetchFiles(type) {
        // Hiển thị trạng thái loading
        loadingElement.style.display = 'block';
        emptyState.style.display = 'none';
        fileGrid.style.display = 'none';
        
        // Cấu hình tham số tìm kiếm
        const options = {
          limit: 50
        };
        
        if (type === 'photos') {
          options.type = 'image';
        } else if (type === 'videos') {
          options.type = 'video';
        } else if (type === 'documents') {
          options.type = 'document';
        } else if (type === 'audio') {
          options.type = 'audio';
        } else if (type === 'trash') {
          options.trash = true;
        }
        
        // Sử dụng FileAPI đã định nghĩa trong main.js
        FileAPI.listFiles(options)
          .then(response => {
            // Ẩn trạng thái loading
            loadingElement.style.display = 'none';
            
            if (response.files && response.files.length > 0) {
              currentFiles = response.files;
              renderFiles(response.files);
            } else {
              // Hiển thị trạng thái trống nếu không có file nào
              emptyState.style.display = 'block';
              fileGrid.style.display = 'none';
            }
          })
          .catch(error => {
            console.error('Error fetching files:', error);
            loadingElement.style.display = 'none';
            emptyState.style.display = 'block';
            
            // Hiển thị thông báo lỗi
            Utils.showNotification('Không thể tải danh sách file. Vui lòng thử lại sau.', 'error');
          });
      }
      
      // Render files in the grid
      function renderFiles(files) {
        if (files.length === 0) {
          emptyState.style.display = 'block';
          fileGrid.style.display = 'none';
          return;
        }
        
        emptyState.style.display = 'none';
        fileGrid.style.display = 'grid';
        fileGrid.innerHTML = '';
        
        // Sắp xếp file theo tên nếu cần
        files.sort((a, b) => a.name.localeCompare(b.name));
        
        files.forEach(file => {
          const fileCard = createFileCard(file);
          fileGrid.appendChild(fileCard);
        });
        
        // Cập nhật thông tin số lượng file
        const fileCount = document.createElement('div');
        fileCount.className = 'file-count';
        fileCount.innerHTML = `Hiển thị ${files.length} file`;
        fileCount.style.marginTop = '10px';
        fileCount.style.fontSize = '0.9em';
        fileCount.style.color = '#666';
        
        if (fileGrid.children.length > 0) {
          fileGrid.parentNode.insertBefore(fileCount, fileGrid);
        }
      }
      
      // Create a file card element
      function createFileCard(file) {
        const fileCard = document.createElement('div');
        fileCard.className = 'file-card';
        
        // Determine icon based on file type
        const fileIcon = Utils.getFileIcon(file.mimeType);
        
        // Format file size
        const formattedSize = Utils.formatFileSize(file.size);
        
        // Cắt tên file nếu quá dài
        const displayName = Utils.truncateText(file.name, 25);
        
        fileCard.innerHTML = `
          <div class="file-icon">${fileIcon}</div>
          <div class="file-name" title="${file.name}">${displayName}</div>
          <div class="file-size">${formattedSize}</div>
          <div class="file-actions">
            <div class="file-action download-btn" title="Tải xuống">⬇️</div>
            <div class="file-action share-btn" title="Chia sẻ">🔗</div>
            ${fileType === 'trash' 
              ? '<div class="file-action restore-btn" title="Khôi phục">♻️</div>' 
              : '<div class="file-action delete-btn" title="Xóa">🗑️</div>'}
          </div>
        `;
        
        // Add event listeners for file actions
        const downloadBtn = fileCard.querySelector('.download-btn');
        const shareBtn = fileCard.querySelector('.share-btn');
        
        downloadBtn.addEventListener('click', () => downloadFile(file._id));
        shareBtn.addEventListener('click', () => shareFile(file._id));
        
        if (fileType === 'trash') {
          const restoreBtn = fileCard.querySelector('.restore-btn');
          restoreBtn.addEventListener('click', () => restoreFile(file._id));
        } else {
          const deleteBtn = fileCard.querySelector('.delete-btn');
          deleteBtn.addEventListener('click', () => deleteFile(file._id));
        }
        
        // Click vào file card để xem chi tiết
        fileCard.addEventListener('click', function(e) {
          // Chỉ xử lý khi click vào card, không phải các nút hành động
          if (!e.target.closest('.file-action')) {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            
            const modalContent = document.createElement('div');
            modalContent.className = 'modal-content';
            
            // Tạo nội dung chi tiết file
            modalContent.innerHTML = `
              <div class="modal-header">
                <h3>Chi tiết file</h3>
                <span class="close">&times;</span>
              </div>
              <div class="file-details">
                <div style="text-align: center; margin-bottom: 20px;">
                  <div style="font-size: 64px;">${fileIcon}</div>
                </div>
                <p><strong>Tên file:</strong> ${file.name}</p>
                <p><strong>Kích thước:</strong> ${formattedSize}</p>
                <p><strong>Loại file:</strong> ${file.mimeType || 'Không xác định'}</p>
                <p><strong>Ngày tạo:</strong> ${new Date(file.createdAt).toLocaleString('vi-VN')}</p>
                ${file.updatedAt ? `<p><strong>Cập nhật lần cuối:</strong> ${new Date(file.updatedAt).toLocaleString('vi-VN')}</p>` : ''}
              </div>
              <div style="display: flex; justify-content: space-between; margin-top: 20px;">
                <button class="btn btn-primary" id="detail-download-btn">Tải xuống</button>
                <button class="btn btn-primary" id="detail-share-btn">Chia sẻ</button>
                ${fileType === 'trash' 
                  ? '<button class="btn btn-primary" id="detail-restore-btn">Khôi phục</button>' 
                  : '<button class="btn btn-danger" id="detail-delete-btn">Xóa</button>'}
              </div>
            `;
            
            modal.appendChild(modalContent);
            document.body.appendChild(modal);
            
            // Xử lý đóng modal
            const closeBtn = modal.querySelector('.close');
            closeBtn.addEventListener('click', function() {
              document.body.removeChild(modal);
            });
            
            // Click bên ngoài để đóng
            window.addEventListener('click', function(e) {
              if (e.target === modal) {
                document.body.removeChild(modal);
              }
            });
            
            // Xử lý các nút trong chi tiết file
            const detailDownloadBtn = modal.querySelector('#detail-download-btn');
            const detailShareBtn = modal.querySelector('#detail-share-btn');
            
            detailDownloadBtn.addEventListener('click', function() {
              downloadFile(file._id);
            });
            
            detailShareBtn.addEventListener('click', function() {
              shareFile(file._id);
            });
            
            if (fileType === 'trash') {
              const detailRestoreBtn = modal.querySelector('#detail-restore-btn');
              detailRestoreBtn.addEventListener('click', function() {
                restoreFile(file._id);
                document.body.removeChild(modal);
              });
            } else {
              const detailDeleteBtn = modal.querySelector('#detail-delete-btn');
              detailDeleteBtn.addEventListener('click', function() {
                if (confirm('Bạn có chắc chắn muốn xóa file này?')) {
                  deleteFile(file._id);
                  document.body.removeChild(modal);
                }
              });
            }
          }
        });
        
        return fileCard;
      }
      
      // Upload a file
      function uploadFile(formData) {
        // Sử dụng FileAPI đã định nghĩa trong main.js với callback tiến trình
        FileAPI.uploadFile(formData, (percentComplete) => {
          progressBar.style.width = `${percentComplete}%`;
        })
          .then(data => {
            // Đóng modal upload
            closeUploadModal();
            
            // Thông báo thành công
            Utils.showNotification('Tải lên file thành công!', 'success');
            
            // Làm mới danh sách file
            fetchFiles(fileType);
          })
          .catch(error => {
            console.error('Error uploading file:', error);
            
            // Hiển thị lỗi
            uploadStatus.textContent = 'Tải lên thất bại: ' + error.message;
            Utils.showNotification('Có lỗi xảy ra khi tải lên file: ' + error.message, 'error');
            
            // Reset nút upload
            uploadSubmit.disabled = false;
          });
      }
      
      // Download a file
      function downloadFile(fileId) {
        // Gọi trực tiếp API download
        FileAPI.downloadFile(fileId);
      }
      
      // Share a file
      function shareFile(fileId) {
        // Mặc định hết hạn sau 24 giờ
        FileAPI.shareFile(fileId, 24)
          .then(data => {
            if (data.shareLink) {
              prompt('Sao chép đường dẫn này để chia sẻ:', data.shareLink);
              Utils.showNotification('Đã tạo link chia sẻ thành công!', 'success');
            } else {
              Utils.showNotification('Không thể tạo link chia sẻ', 'error');
            }
          })
          .catch(error => {
            console.error('Error sharing file:', error);
            Utils.showNotification('Có lỗi xảy ra khi chia sẻ file', 'error');
          });
      }
      
      // Delete a file
      function deleteFile(fileId) {
        if (!confirm('Bạn có chắc chắn muốn xóa file này?')) {
          return;
        }
        
        // Xóa file (di chuyển vào thùng rác)
        const isPermanent = fileType === 'trash';
        
        FileAPI.deleteFile(fileId, isPermanent)
          .then(data => {
            // Cập nhật UI bằng cách loại bỏ file đã xóa
            currentFiles = currentFiles.filter(file => file._id !== fileId);
            renderFiles(currentFiles);
            
            // Thông báo
            const message = isPermanent ? 'Đã xóa vĩnh viễn file' : 'Đã chuyển file vào thùng rác';
            Utils.showNotification(message, 'success');
          })
          .catch(error => {
            console.error('Error deleting file:', error);
            Utils.showNotification('Có lỗi xảy ra khi xóa file', 'error');
          });
      }
      
      // Restore file from trash
      function restoreFile(fileId) {
        FileAPI.restoreFile(fileId)
          .then(data => {
            // Cập nhật UI bằng cách loại bỏ file đã khôi phục khỏi thùng rác
            currentFiles = currentFiles.filter(file => file._id !== fileId);
            renderFiles(currentFiles);
            
            Utils.showNotification('Đã khôi phục file thành công', 'success');
          })
          .catch(error => {
            console.error('Error restoring file:', error);
            Utils.showNotification('Có lỗi xảy ra khi khôi phục file', 'error');
          });
      }
      
      // Event listeners for settings page if it exists
      const saveSettingsBtn = document.getElementById('save-settings');
      const upgradeBtn = document.getElementById('upgrade-btn');
      const deleteAllFilesBtn = document.getElementById('delete-all-files');
      const emptyTrashBtn = document.getElementById('empty-trash');
      
      if (saveSettingsBtn) {
        saveSettingsBtn.addEventListener('click', function() {
          const autoDeleteDownloads = document.getElementById('auto-delete-downloads').checked;
          const notifications = document.getElementById('notifications').checked;
          
          // Lưu cài đặt bằng cách gọi API
          UserAPI.updateSettings({
            autoDeleteDownloads,
            notificationsEnabled: notifications
          })
            .then(data => {
              Utils.showNotification('Cài đặt đã được lưu thành công!', 'success');
            })
            .catch(error => {
              console.error('Error saving settings:', error);
              Utils.showNotification('Có lỗi xảy ra khi lưu cài đặt', 'error');
            });
        });
      }
      
      if (upgradeBtn) {
        upgradeBtn.addEventListener('click', function() {
          alert('Tính năng nâng cấp tài khoản đang được phát triển. Vui lòng thử lại sau! (Giả lập)');
        });
      }
      
      if (deleteAllFilesBtn) {
        deleteAllFilesBtn.addEventListener('click', function() {
          if (confirm('CẢNH BÁO: Hành động này sẽ xóa vĩnh viễn TẤT CẢ file của bạn. Tiếp tục?')) {
            alert('Đã gửi yêu cầu xóa tất cả file. Vui lòng đợi trong giây lát... (Giả lập)');
          }
        });
      }
      
      if (emptyTrashBtn) {
        emptyTrashBtn.addEventListener('click', function() {
          if (confirm('Bạn có chắc chắn muốn dọn sạch thùng rác? Tất cả file sẽ bị xóa vĩnh viễn.')) {
            // Gọi API để dọn thùng rác
            fetch('/api/files/empty-trash', {
              method: 'POST'
            })
              .then(response => response.json())
              .then(data => {
                Utils.showNotification('Đã dọn sạch thùng rác', 'success');
                // Cập nhật UI
                currentFiles = [];
                emptyState.style.display = 'block';
                fileGrid.style.display = 'none';
              })
              .catch(error => {
                console.error('Error emptying trash:', error);
                Utils.showNotification('Có lỗi xảy ra khi dọn thùng rác', 'error');
              });
          }
        });
      }
    });
  </script>
</body>
</html> 