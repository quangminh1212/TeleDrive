<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TeleDrive - Qu·∫£n l√Ω File</title>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .dashboard {
      display: flex;
      min-height: calc(100vh - 140px);
    }
    
    .sidebar {
      width: 250px;
      background-color: #f5f5f5;
      border-right: 1px solid #ddd;
      padding: 20px;
    }
    
    .sidebar-menu {
      list-style: none;
      padding: 0;
    }
    
    .sidebar-menu li {
      margin-bottom: 15px;
    }
    
    .sidebar-menu a {
      display: flex;
      align-items: center;
      text-decoration: none;
      color: #333;
      padding: 10px;
      border-radius: 5px;
      transition: background-color 0.2s;
    }
    
    .sidebar-menu a:hover {
      background-color: #e9e9e9;
    }
    
    .sidebar-menu a.active {
      background-color: #e3f2fd;
      color: #0078d7;
      font-weight: bold;
    }
    
    .sidebar-menu .icon {
      margin-right: 10px;
      font-size: 18px;
    }
    
    .main-content {
      flex: 1;
      padding: 20px;
    }
    
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .file-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .file-card {
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 15px;
      text-align: center;
      transition: all 0.2s;
      position: relative;
    }
    
    .file-card:hover {
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      transform: translateY(-5px);
    }
    
    .file-icon {
      font-size: 48px;
      margin-bottom: 10px;
    }
    
    .file-name {
      font-weight: bold;
      margin-bottom: 5px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .file-size {
      color: #666;
      font-size: 12px;
    }
    
    .upload-btn {
      display: inline-block;
      background-color: #0078d7;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      text-decoration: none;
      transition: background-color 0.2s;
      cursor: pointer;
    }
    
    .upload-btn:hover {
      background-color: #0063b1;
    }
    
    .storage-info {
      background-color: #f9f9f9;
      border-radius: 5px;
      padding: 15px;
      margin-top: 20px;
    }
    
    .storage-bar {
      height: 10px;
      background-color: #e0e0e0;
      border-radius: 5px;
      overflow: hidden;
      margin-top: 10px;
    }
    
    .storage-used {
      height: 100%;
      background-color: #0078d7;
      width: 0%;
    }
    
    .empty-state {
      text-align: center;
      padding: 50px 20px;
    }
    
    .empty-state .icon {
      font-size: 64px;
      color: #ddd;
      margin-bottom: 20px;
    }
    
    /* Upload Modal */
    .modal {
      display: none;
      position: fixed;
      z-index: 100;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 10% auto;
      padding: 20px;
      border-radius: 5px;
      width: 50%;
      max-width: 500px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }
    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .close {
      color: #aaa;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    
    .close:hover {
      color: black;
    }
    
    .upload-area {
      border: 2px dashed #ddd;
      border-radius: 5px;
      padding: 30px;
      text-align: center;
      margin-bottom: 20px;
      cursor: pointer;
    }
    
    .upload-area:hover {
      border-color: #0078d7;
    }
    
    .file-input {
      display: none;
    }
    
    .upload-progress {
      margin-top: 10px;
      display: none;
    }
    
    .progress-bar {
      height: 5px;
      background-color: #f3f3f3;
      border-radius: 5px;
      overflow: hidden;
    }
    
    .progress {
      height: 100%;
      background-color: #0078d7;
      width: 0%;
      transition: width 0.3s;
    }
    
    /* File Actions */
    .file-actions {
      position: absolute;
      bottom: 10px;
      right: 10px;
      display: none;
    }
    
    .file-card:hover .file-actions {
      display: flex;
    }
    
    .file-action {
      margin-left: 5px;
      width: 25px;
      height: 25px;
      border-radius: 50%;
      background: #f3f3f3;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 12px;
    }
    
    .file-action:hover {
      background: #e0e0e0;
    }
    
    /* Loading spinner */
    .loading {
      display: none;
      text-align: center;
      padding: 20px;
    }
    
    .spinner {
      border: 3px solid #f3f3f3;
      border-top: 3px solid #0078d7;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      animation: spin 1s linear infinite;
      margin: 0 auto 10px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Settings */
    .settings-section {
      background: white;
      border-radius: 5px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .settings-title {
      font-size: 18px;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid #eee;
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    
    .form-control {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .checkbox-group {
      display: flex;
      align-items: center;
    }
    
    .checkbox-group input {
      margin-right: 10px;
    }
    
    .btn {
      padding: 8px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }
    
    .btn-primary {
      background: #0078d7;
      color: white;
    }
    
    .btn-danger {
      background: #d9534f;
      color: white;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="logo">
        <h1>TeleDrive</h1>
      </div>
      <nav>
        <ul>
          <li><a href="/">Trang ch·ªß</a></li>
          <li><a href="/dashboard" class="active">Qu·∫£n l√Ω File</a></li>
          <li><a href="/logout">ƒêƒÉng xu·∫•t</a></li>
        </ul>
      </nav>
    </header>

    <main class="dashboard">
      <div class="sidebar">
        <div class="user-info">
          <h3>Xin ch√†o, <%= user.firstName %></h3>
        </div>
        <ul class="sidebar-menu">
          <li><a href="/dashboard" class="<%= !locals.activeType ? 'active' : '' %>"><span class="icon">üìÅ</span> T·∫•t c·∫£ file</a></li>
          <li><a href="/dashboard/photos" class="<%= locals.activeType === 'photos' ? 'active' : '' %>"><span class="icon">üñºÔ∏è</span> H√¨nh ·∫£nh</a></li>
          <li><a href="/dashboard/videos" class="<%= locals.activeType === 'videos' ? 'active' : '' %>"><span class="icon">üé¨</span> Video</a></li>
          <li><a href="/dashboard/documents" class="<%= locals.activeType === 'documents' ? 'active' : '' %>"><span class="icon">üìÑ</span> T√†i li·ªáu</a></li>
          <li><a href="/dashboard/audio" class="<%= locals.activeType === 'audio' ? 'active' : '' %>"><span class="icon">üéµ</span> √Çm thanh</a></li>
          <li><a href="/dashboard/trash" class="<%= locals.activeType === 'trash' ? 'active' : '' %>"><span class="icon">üóëÔ∏è</span> Th√πng r√°c</a></li>
          <li><a href="/dashboard/settings" class="<%= locals.activeType === 'settings' ? 'active' : '' %>"><span class="icon">‚öôÔ∏è</span> C√†i ƒë·∫∑t</a></li>
        </ul>
        
        <div class="storage-info">
          <h4>Dung l∆∞·ª£ng l∆∞u tr·ªØ</h4>
          <div class="storage-bar">
            <div class="storage-used" style="width: <%= typeof user.getStoragePercentage === 'function' ? user.getStoragePercentage() : (user.storagePercentage || 0) %>%"></div>
          </div>
          <p>ƒê√£ s·ª≠ d·ª•ng: <%= typeof user.getStoragePercentage === 'function' ? user.getStoragePercentage() : (user.storagePercentage || 0) %>%</p>
        </div>
      </div>
      
      <div class="main-content">
        <% if (locals.activeType === 'settings') { %>
          <!-- Settings page -->
          <div class="dashboard-header">
            <h2>C√†i ƒë·∫∑t</h2>
          </div>
          
          <div class="settings-section">
            <h3 class="settings-title">T√†i kho·∫£n</h3>
            <div class="form-group">
              <label>T√™n c·ªßa b·∫°n</label>
              <input type="text" class="form-control" value="<%= user.firstName %> <%= user.lastName || '' %>" disabled>
            </div>
            <div class="form-group">
              <label>Lo·∫°i t√†i kho·∫£n</label>
              <input type="text" class="form-control" value="<%= user.isPremium ? 'Premium' : 'Mi·ªÖn ph√≠' %>" disabled>
            </div>
            <% if (!user.isPremium) { %>
              <p>N√¢ng c·∫•p l√™n t√†i kho·∫£n Premium ƒë·ªÉ c√≥ th√™m dung l∆∞·ª£ng l∆∞u tr·ªØ.</p>
              <button class="btn btn-primary" id="upgrade-btn">N√¢ng c·∫•p l√™n Premium</button>
            <% } %>
          </div>
          
          <div class="settings-section">
            <h3 class="settings-title">T√πy ch·ªçn</h3>
            <div class="form-group checkbox-group">
              <input type="checkbox" id="auto-delete-downloads" <%= user.settings && user.settings.autoDeleteDownloads ? 'checked' : '' %>>
              <label for="auto-delete-downloads">T·ª± ƒë·ªông x√≥a file sau khi t·∫£i xu·ªëng</label>
            </div>
            <div class="form-group checkbox-group">
              <input type="checkbox" id="notifications" <%= user.settings && user.settings.notificationsEnabled ? 'checked' : '' %>>
              <label for="notifications">B·∫≠t th√¥ng b√°o</label>
            </div>
            <button class="btn btn-primary" id="save-settings">L∆∞u c√†i ƒë·∫∑t</button>
          </div>
          
          <div class="settings-section">
            <h3 class="settings-title">Nguy hi·ªÉm</h3>
            <p>H√†nh ƒë·ªông n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn t·∫•t c·∫£ c√°c file c·ªßa b·∫°n.</p>
            <button class="btn btn-danger" id="delete-all-files">X√≥a t·∫•t c·∫£ file</button>
          </div>
        <% } else { %>
          <!-- File listing page -->
          <div class="dashboard-header">
            <% if (locals.activeType === 'photos') { %>
              <h2>H√¨nh ·∫£nh</h2>
            <% } else if (locals.activeType === 'videos') { %>
              <h2>Video</h2>
            <% } else if (locals.activeType === 'documents') { %>
              <h2>T√†i li·ªáu</h2>
            <% } else if (locals.activeType === 'audio') { %>
              <h2>√Çm thanh</h2>
            <% } else if (locals.activeType === 'trash') { %>
              <h2>Th√πng r√°c</h2>
            <% } else { %>
              <h2>T·∫•t c·∫£ file</h2>
            <% } %>
            
            <% if (locals.activeType !== 'trash' && locals.activeType !== 'settings') { %>
              <a href="#" class="upload-btn" id="upload-btn">+ T·∫£i l√™n</a>
            <% } else if (locals.activeType === 'trash') { %>
              <button class="btn btn-danger" id="empty-trash">D·ªçn th√πng r√°c</button>
            <% } %>
          </div>
          
          <!-- Loading state -->
          <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>ƒêang t·∫£i...</p>
          </div>
          
          <!-- Empty state - initially hidden, will show if no files -->
          <div class="empty-state" id="empty-state" style="display: none;">
            <div class="icon">
              <% if (locals.activeType === 'photos') { %>
                üñºÔ∏è
              <% } else if (locals.activeType === 'videos') { %>
                üé¨
              <% } else if (locals.activeType === 'documents') { %>
                üìÑ
              <% } else if (locals.activeType === 'audio') { %>
                üéµ
              <% } else if (locals.activeType === 'trash') { %>
                üóëÔ∏è
              <% } else { %>
                üìÅ
              <% } %>
            </div>
            <% if (locals.activeType === 'trash') { %>
              <h3>Th√πng r√°c tr·ªëng</h3>
              <p>Kh√¥ng c√≥ file n√†o trong th√πng r√°c</p>
            <% } else { %>
              <h3>Ch∆∞a c√≥ file n√†o</h3>
              <p>H√£y t·∫£i l√™n file ƒë·∫ßu ti√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng TeleDrive</p>
              <a href="#" class="upload-btn" id="empty-upload-btn">T·∫£i l√™n ngay</a>
            <% } %>
          </div>
          
          <!-- File grid - initially hidden, will be populated with files -->
          <div class="file-grid" id="file-grid">
            <!-- Files will be rendered here via JavaScript -->
          </div>
        <% } %>
      </div>
    </main>

    <footer>
      <p>&copy; 2025 TeleDrive. T·∫•t c·∫£ c√°c quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
    </footer>
  </div>

  <!-- Upload Modal -->
  <div id="upload-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>T·∫£i l√™n file</h3>
        <span class="close">&times;</span>
      </div>
      <div class="upload-area" id="drop-area">
        <p>K√©o v√† th·∫£ file v√†o ƒë√¢y ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn file</p>
        <input type="file" id="file-input" class="file-input">
      </div>
      <div id="upload-progress" class="upload-progress">
        <p id="upload-status">ƒêang t·∫£i l√™n...</p>
        <div class="progress-bar">
          <div class="progress" id="progress-bar"></div>
        </div>
      </div>
      <button id="upload-submit" class="btn btn-primary" style="width: 100%;">T·∫£i l√™n</button>
    </div>
  </div>

  <script src="/js/main.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const fileGrid = document.getElementById('file-grid');
      const emptyState = document.getElementById('empty-state');
      const loadingElement = document.getElementById('loading');
      const uploadBtn = document.getElementById('upload-btn');
      const emptyUploadBtn = document.getElementById('empty-upload-btn');
      const uploadModal = document.getElementById('upload-modal');
      const closeBtn = document.querySelector('.close');
      const dropArea = document.getElementById('drop-area');
      const fileInput = document.getElementById('file-input');
      const uploadSubmit = document.getElementById('upload-submit');
      const progressBar = document.getElementById('progress-bar');
      const uploadProgress = document.getElementById('upload-progress');
      const uploadStatus = document.getElementById('upload-status');
      
      let currentFiles = [];
      
      // Get current page type from URL or default to 'all'
      const currentPath = window.location.pathname;
      let fileType = 'all';
      
      if (currentPath.includes('/photos')) fileType = 'photos';
      else if (currentPath.includes('/videos')) fileType = 'videos';
      else if (currentPath.includes('/documents')) fileType = 'documents';
      else if (currentPath.includes('/audio')) fileType = 'audio';
      else if (currentPath.includes('/trash')) fileType = 'trash';
      else if (currentPath.includes('/settings')) fileType = 'settings';
      
      // Don't load files on settings page
      if (fileType !== 'settings') {
        // Show loading state
        loadingElement.style.display = 'block';
        
        // Fetch files from API based on the current page
        fetchFiles(fileType);
      }
      
      // Open the upload modal
      function openUploadModal() {
        uploadModal.style.display = 'block';
        
        // Reset upload form
        fileInput.value = '';
        uploadProgress.style.display = 'none';
        progressBar.style.width = '0%';
        uploadStatus.textContent = 'ƒêang t·∫£i l√™n...';
      }
      
      // Close the upload modal
      function closeUploadModal() {
        uploadModal.style.display = 'none';
      }
      
      // Upload button click event
      if (uploadBtn) {
        uploadBtn.addEventListener('click', function(e) {
          e.preventDefault();
          openUploadModal();
        });
      }
      
      // Empty state upload button click event
      if (emptyUploadBtn) {
        emptyUploadBtn.addEventListener('click', function(e) {
          e.preventDefault();
          openUploadModal();
        });
      }
      
      // Close button click event
      if (closeBtn) {
        closeBtn.addEventListener('click', closeUploadModal);
      }
      
      // Click outside modal to close
      window.addEventListener('click', function(e) {
        if (e.target === uploadModal) {
          closeUploadModal();
        }
      });
      
      // Drop area click event
      if (dropArea) {
        dropArea.addEventListener('click', function() {
          fileInput.click();
        });
      }
      
      // Handle file selection
      if (fileInput) {
        fileInput.addEventListener('change', function() {
          if (fileInput.files.length > 0) {
            const fileName = fileInput.files[0].name;
            dropArea.innerHTML = `<p>File: ${fileName}</p>`;
          }
        });
      }
      
      // Submit upload form
      if (uploadSubmit) {
        uploadSubmit.addEventListener('click', function() {
          if (fileInput.files.length === 0) {
            alert('Vui l√≤ng ch·ªçn file ƒë·ªÉ t·∫£i l√™n');
            return;
          }
          
          const file = fileInput.files[0];
          
          // Show progress
          uploadProgress.style.display = 'block';
          uploadSubmit.disabled = true;
          
          // Create form data
          const formData = new FormData();
          formData.append('file', file);
          
          // Simulating upload progress (in real app, use XMLHttpRequest)
          let progress = 0;
          const interval = setInterval(function() {
            progress += 10;
            progressBar.style.width = `${progress}%`;
            
            if (progress >= 100) {
              clearInterval(interval);
              uploadStatus.textContent = 'T·∫£i l√™n th√†nh c√¥ng!';
              
              // In real app, this would be the actual file upload request
              uploadFile(formData);
            }
          }, 300);
        });
      }
      
      // Fetch files from API
      function fetchFiles(type) {
        let url = '/api/files';
        
        const params = new URLSearchParams();
        params.append('limit', '50');
        
        if (type === 'photos') {
          params.append('type', 'image');
        } else if (type === 'videos') {
          params.append('type', 'video');
        } else if (type === 'documents') {
          params.append('type', 'document');
        } else if (type === 'audio') {
          params.append('type', 'audio');
        } else if (type === 'trash') {
          params.append('trash', 'true');
        }
        
        url = `${url}?${params.toString()}`;
        
        // In a real application, we would make a fetch request here
        // For now, simulate with a timeout
        setTimeout(() => {
          // Hide loading
          loadingElement.style.display = 'none';
          
          // For demonstration, show empty state
          emptyState.style.display = 'block';
          
          // In a real application, we would fetch real files:
          /*
          fetch(url)
            .then(response => response.json())
            .then(data => {
              loadingElement.style.display = 'none';
              
              if (data.files && data.files.length > 0) {
                currentFiles = data.files;
                renderFiles(data.files);
              } else {
                emptyState.style.display = 'block';
              }
            })
            .catch(error => {
              console.error('Error fetching files:', error);
              loadingElement.style.display = 'none';
              emptyState.style.display = 'block';
            });
          */
        }, 1000);
      }
      
      // Render files in the grid
      function renderFiles(files) {
        if (files.length === 0) {
          emptyState.style.display = 'block';
          fileGrid.style.display = 'none';
          return;
        }
        
        emptyState.style.display = 'none';
        fileGrid.style.display = 'grid';
        fileGrid.innerHTML = '';
        
        files.forEach(file => {
          const fileCard = createFileCard(file);
          fileGrid.appendChild(fileCard);
        });
      }
      
      // Create a file card element
      function createFileCard(file) {
        const fileCard = document.createElement('div');
        fileCard.className = 'file-card';
        
        // Determine icon based on file type
        let fileIcon = 'üìÑ';
        if (file.mimeType) {
          if (file.mimeType.startsWith('image/')) fileIcon = 'üñºÔ∏è';
          else if (file.mimeType.startsWith('video/')) fileIcon = 'üé¨';
          else if (file.mimeType.startsWith('audio/')) fileIcon = 'üéµ';
          else if (file.mimeType.includes('pdf')) fileIcon = 'üìë';
          else if (file.mimeType.includes('word')) fileIcon = 'üìù';
          else if (file.mimeType.includes('excel') || file.mimeType.includes('spreadsheet')) fileIcon = 'üìä';
          else if (file.mimeType.includes('presentation') || file.mimeType.includes('powerpoint')) fileIcon = 'üìΩÔ∏è';
        }
        
        // Format file size
        const formattedSize = formatFileSize(file.size);
        
        fileCard.innerHTML = `
          <div class="file-icon">${fileIcon}</div>
          <div class="file-name">${file.name}</div>
          <div class="file-size">${formattedSize}</div>
          <div class="file-actions">
            <div class="file-action download-btn" title="T·∫£i xu·ªëng">‚¨áÔ∏è</div>
            <div class="file-action share-btn" title="Chia s·∫ª">üîó</div>
            <div class="file-action delete-btn" title="X√≥a">üóëÔ∏è</div>
          </div>
        `;
        
        // Add event listeners for file actions
        const downloadBtn = fileCard.querySelector('.download-btn');
        const shareBtn = fileCard.querySelector('.share-btn');
        const deleteBtn = fileCard.querySelector('.delete-btn');
        
        downloadBtn.addEventListener('click', () => downloadFile(file._id));
        shareBtn.addEventListener('click', () => shareFile(file._id));
        deleteBtn.addEventListener('click', () => deleteFile(file._id));
        
        return fileCard;
      }
      
      // Format file size (e.g. 1.5 MB)
      function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }
      
      // Upload a file
      function uploadFile(formData) {
        // In a real application, send a POST request to the server
        /*
        fetch('/api/files/upload', {
          method: 'POST',
          body: formData,
        })
          .then(response => response.json())
          .then(data => {
            // Handle successful upload
            closeUploadModal();
            // Refresh files
            fetchFiles(fileType);
          })
          .catch(error => {
            console.error('Error uploading file:', error);
            alert('C√≥ l·ªói x·∫£y ra khi t·∫£i l√™n file. Vui l√≤ng th·ª≠ l·∫°i.');
          });
        */
        
        // For now, simulate a successful upload
        setTimeout(() => {
          closeUploadModal();
          alert('T·∫£i l√™n th√†nh c√¥ng! (Gi·∫£ l·∫≠p)');
        }, 1000);
      }
      
      // Download a file
      function downloadFile(fileId) {
        // In a real application, redirect to download endpoint
        // window.location.href = `/api/files/${fileId}/download`;
        
        // For now, show alert
        alert(`ƒêang t·∫£i xu·ªëng file (ID: ${fileId})... (Gi·∫£ l·∫≠p)`);
      }
      
      // Share a file
      function shareFile(fileId) {
        // In a real application, make a request to create a share link
        /*
        fetch(`/api/files/${fileId}/share`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ expiresInHours: 24 }),
        })
          .then(response => response.json())
          .then(data => {
            // Show share link to user
            prompt('Copy and share this link:', data.shareLink);
          })
          .catch(error => {
            console.error('Error sharing file:', error);
            alert('C√≥ l·ªói x·∫£y ra khi chia s·∫ª file. Vui l√≤ng th·ª≠ l·∫°i.');
          });
        */
        
        // For now, show a fake share link
        prompt('Copy and share this link (gi·∫£ l·∫≠p):', `https://teledrive.example.com/share/${fileId}`);
      }
      
      // Delete a file
      function deleteFile(fileId) {
        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a file n√†y?')) {
          return;
        }
        
        // In a real application, send a DELETE request to the server
        /*
        fetch(`/api/files/${fileId}`, {
          method: 'DELETE',
        })
          .then(response => response.json())
          .then(data => {
            // Remove file from the UI
            currentFiles = currentFiles.filter(file => file._id !== fileId);
            renderFiles(currentFiles);
          })
          .catch(error => {
            console.error('Error deleting file:', error);
            alert('C√≥ l·ªói x·∫£y ra khi x√≥a file. Vui l√≤ng th·ª≠ l·∫°i.');
          });
        */
        
        // For now, show alert
        alert(`X√≥a file th√†nh c√¥ng (ID: ${fileId})! (Gi·∫£ l·∫≠p)`);
      }
      
      // Event listeners for settings page if it exists
      const saveSettingsBtn = document.getElementById('save-settings');
      const upgradeBtn = document.getElementById('upgrade-btn');
      const deleteAllFilesBtn = document.getElementById('delete-all-files');
      const emptyTrashBtn = document.getElementById('empty-trash');
      
      if (saveSettingsBtn) {
        saveSettingsBtn.addEventListener('click', function() {
          const autoDeleteDownloads = document.getElementById('auto-delete-downloads').checked;
          const notifications = document.getElementById('notifications').checked;
          
          // In a real application, send settings to the server
          /*
          fetch('/api/auth/settings', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              autoDeleteDownloads,
              notificationsEnabled: notifications,
            }),
          })
            .then(response => response.json())
            .then(data => {
              alert('C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
            })
            .catch(error => {
              console.error('Error saving settings:', error);
              alert('C√≥ l·ªói x·∫£y ra khi l∆∞u c√†i ƒë·∫∑t. Vui l√≤ng th·ª≠ l·∫°i.');
            });
          */
          
          // For now, show alert
          alert('C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng! (Gi·∫£ l·∫≠p)');
        });
      }
      
      if (upgradeBtn) {
        upgradeBtn.addEventListener('click', function() {
          alert('T√≠nh nƒÉng n√¢ng c·∫•p t√†i kho·∫£n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng th·ª≠ l·∫°i sau! (Gi·∫£ l·∫≠p)');
        });
      }
      
      if (deleteAllFilesBtn) {
        deleteAllFilesBtn.addEventListener('click', function() {
          if (confirm('C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn T·∫§T C·∫¢ file c·ªßa b·∫°n. Ti·∫øp t·ª•c?')) {
            alert('ƒê√£ g·ª≠i y√™u c·∫ßu x√≥a t·∫•t c·∫£ file. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t... (Gi·∫£ l·∫≠p)');
          }
        });
      }
      
      if (emptyTrashBtn) {
        emptyTrashBtn.addEventListener('click', function() {
          if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën d·ªçn s·∫°ch th√πng r√°c? T·∫•t c·∫£ file s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn.')) {
            alert('ƒê√£ x√≥a t·∫•t c·∫£ file trong th√πng r√°c. (Gi·∫£ l·∫≠p)');
          }
        });
      }
    });
  </script>
</body>
</html> 