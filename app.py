#!/usr/bin/env python3
"""
TeleDrive - ·ª®ng d·ª•ng qu·∫£n l√Ω file Telegram ƒë∆°n gi·∫£n
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import filedialog, messagebox
import threading
import asyncio
import os
import signal
import sys
from pathlib import Path
from PIL import Image
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from dotenv import load_dotenv

# Load c·∫•u h√¨nh
load_dotenv()

# C·∫•u h√¨nh giao di·ªán
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

# M√†u s·∫Øc ch√≠nh x√°c c·ªßa Telegram
COLORS = {
    "bg_primary": "#FFFFFF",        # Tr·∫Øng tinh khi·∫øt
    "bg_secondary": "#F4F4F5",      # X√°m nh·∫°t Telegram
    "bg_card": "#FFFFFF",           # Tr·∫Øng card
    "telegram_blue": "#2AABEE",     # Xanh Telegram ch√≠nh th·ª©c
    "telegram_dark": "#229ED9",     # Xanh ƒë·∫≠m
    "telegram_light": "#64B5F6",    # Xanh nh·∫°t
    "text_primary": "#000000",      # ƒêen ch√≠nh
    "text_secondary": "#707579",    # X√°m text Telegram
    "text_hint": "#A2ACB0",        # X√°m g·ª£i √Ω
    "border": "#E4E4E4",           # Vi·ªÅn
    "success": "#00C851",          # Xanh l√°
    "error": "#FF3B30",            # ƒê·ªè iOS
    "warning": "#FF9500"           # Cam c·∫£nh b√°o
}

class LoginWindow:
    """C·ª≠a s·ªï ƒëƒÉng nh·∫≠p Telegram theo phong c√°ch Telegram"""

    def __init__(self, parent, client):
        self.parent = parent
        self.client = client
        self.result = None



        # T·∫°o c·ª≠a s·ªï ƒëƒÉng nh·∫≠p
        self.window = ctk.CTkToplevel(parent)
        self.window.title("ƒêƒÉng nh·∫≠p Telegram")
        self.window.geometry("420x580")
        self.window.resizable(False, False)
        self.window.transient(parent)
        self.window.grab_set()
        self.window.configure(fg_color=COLORS["bg_primary"])

        # CƒÉn gi·ªØa c·ª≠a s·ªï
        self.center_window()

        self.step = "phone"
        self.phone = ""
        self.code_hash = ""
        self.selected_country = {"name": "Vi·ªát Nam", "code": "+84", "flag": "üáªüá≥"}

        self.create_ui()

    def center_window(self):
        """CƒÉn gi·ªØa c·ª≠a s·ªï"""
        self.window.update_idletasks()
        x = (self.window.winfo_screenwidth() // 2) - (420 // 2)
        y = (self.window.winfo_screenheight() // 2) - (580 // 2)
        self.window.geometry(f"420x580+{x}+{y}")

    def create_ui(self):
        """T·∫°o giao di·ªán ƒëƒÉng nh·∫≠p gi·ªëng h·ªát Telegram"""
        # Header v·ªõi logo Telegram ch√≠nh th·ª©c
        header = ctk.CTkFrame(self.window, fg_color=COLORS["bg_primary"], height=140)
        header.pack(fill="x", padx=0, pady=(0, 0))
        header.pack_propagate(False)

        # Logo container
        logo_container = ctk.CTkFrame(header, fg_color="transparent")
        logo_container.pack(expand=True)

        # Logo Telegram ch√≠nh th·ª©c
        logo_bg = ctk.CTkFrame(logo_container,
                              fg_color=COLORS["telegram_blue"],
                              width=80, height=80,
                              corner_radius=40)
        logo_bg.pack(pady=(25, 8))
        logo_bg.pack_propagate(False)

        # Logo TeleDrive - s·ª≠ d·ª•ng text emoji cho login dialog ƒë·ªÉ tr√°nh l·ªói
        logo = ctk.CTkLabel(logo_bg, text="‚úàÔ∏è",
                          font=ctk.CTkFont(size=36, weight="bold"),
                          text_color="white")
        logo.pack(expand=True)

        # Ti√™u ƒë·ªÅ Telegram
        title = ctk.CTkLabel(logo_container, text="Telegram",
                           font=ctk.CTkFont(size=28, weight="bold"),
                           text_color=COLORS["text_primary"])
        title.pack()

        # Content v·ªõi n·ªÅn tr·∫Øng s·ªØa
        self.content = ctk.CTkFrame(self.window, fg_color=COLORS["bg_primary"], corner_radius=0)
        self.content.pack(fill="both", expand=True, padx=0, pady=0)

        self.create_phone_step()
        self.create_code_step()
        self.create_password_step()

        self.show_step("phone")
    
    def create_phone_step(self):
        """B∆∞·ªõc nh·∫≠p s·ªë ƒëi·ªán tho·∫°i v·ªõi ch·ªçn qu·ªëc gia"""
        self.phone_frame = ctk.CTkFrame(self.content, fg_color="transparent")

        # Ti√™u ƒë·ªÅ
        title = ctk.CTkLabel(self.phone_frame, text="S·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n",
                           font=ctk.CTkFont(size=24, weight="bold"),
                           text_color=COLORS["text_primary"])
        title.pack(pady=(30, 5))

        subtitle = ctk.CTkLabel(self.phone_frame,
                              text="Vui l√≤ng x√°c nh·∫≠n m√£ qu·ªëc gia v√†\nnh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n.",
                              font=ctk.CTkFont(size=14),
                              text_color=COLORS["text_secondary"])
        subtitle.pack(pady=(0, 30))

        # Ch·ªçn qu·ªëc gia v·ªõi border
        country_frame = ctk.CTkFrame(self.phone_frame,
                                   fg_color=COLORS["bg_card"],
                                   border_width=1,
                                   border_color=COLORS["border"],
                                   corner_radius=8,
                                   height=52)
        country_frame.pack(fill="x", padx=40, pady=(0, 1))
        country_frame.pack_propagate(False)

        self.country_btn = ctk.CTkButton(country_frame,
                                       text=f"{self.selected_country['flag']} {self.selected_country['name']}",
                                       font=ctk.CTkFont(size=14),
                                       fg_color="transparent",
                                       text_color=COLORS["text_primary"],
                                       hover_color=COLORS["bg_secondary"],
                                       anchor="w",
                                       command=self.show_country_selector)
        self.country_btn.pack(fill="both", expand=True, padx=15, pady=10)

        # Khung nh·∫≠p s·ªë ƒëi·ªán tho·∫°i v·ªõi border Telegram
        phone_input_frame = ctk.CTkFrame(self.phone_frame,
                                       fg_color=COLORS["bg_card"],
                                       border_width=1,
                                       border_color=COLORS["border"],
                                       corner_radius=8,
                                       height=52)
        phone_input_frame.pack(fill="x", padx=40, pady=(0, 20))
        phone_input_frame.pack_propagate(False)

        # Code v√† s·ªë ƒëi·ªán tho·∫°i trong c√πng m·ªôt khung
        input_container = ctk.CTkFrame(phone_input_frame, fg_color="transparent")
        input_container.pack(fill="both", expand=True, padx=15, pady=10)

        # M√£ qu·ªëc gia
        self.country_code_label = ctk.CTkLabel(input_container,
                                             text=self.selected_country['code'],
                                             font=ctk.CTkFont(size=16),
                                             text_color=COLORS["text_primary"])
        self.country_code_label.pack(side="left")

        # S·ªë ƒëi·ªán tho·∫°i
        self.phone_entry = ctk.CTkEntry(input_container,
                                      placeholder_text="123 456 789",
                                      font=ctk.CTkFont(size=16),
                                      fg_color="transparent",
                                      border_width=0,
                                      text_color=COLORS["text_primary"])
        self.phone_entry.pack(side="left", fill="x", expand=True, padx=(10, 0))
        self.phone_entry.bind("<Return>", lambda e: self.send_code())

        # N√∫t ti·∫øp t·ª•c theo style Telegram
        self.send_btn = ctk.CTkButton(self.phone_frame,
                                    text="TI·∫æP T·ª§C",
                                    height=50,
                                    width=320,
                                    font=ctk.CTkFont(size=15, weight="bold"),
                                    fg_color=COLORS["telegram_blue"],
                                    hover_color=COLORS["telegram_dark"],
                                    corner_radius=12,
                                    command=self.send_code)
        self.send_btn.pack(pady=(30, 10))

        # Th√¥ng b√°o l·ªói
        self.phone_status = ctk.CTkLabel(self.phone_frame, text="",
                                       text_color=COLORS["error"],
                                       font=ctk.CTkFont(size=12))
        self.phone_status.pack(pady=(10, 0))

    def show_country_selector(self):
        """Hi·ªÉn th·ªã danh s√°ch qu·ªëc gia"""
        countries = [
            {"name": "Vi·ªát Nam", "code": "+84", "flag": "üáªüá≥"},
            {"name": "United States", "code": "+1", "flag": "üá∫üá∏"},
            {"name": "China", "code": "+86", "flag": "üá®üá≥"},
            {"name": "India", "code": "+91", "flag": "üáÆüá≥"},
            {"name": "United Kingdom", "code": "+44", "flag": "üá¨üáß"},
            {"name": "Germany", "code": "+49", "flag": "üá©üá™"},
            {"name": "France", "code": "+33", "flag": "üá´üá∑"},
            {"name": "Japan", "code": "+81", "flag": "üáØüáµ"},
            {"name": "South Korea", "code": "+82", "flag": "üá∞üá∑"},
            {"name": "Thailand", "code": "+66", "flag": "üáπüá≠"},
            {"name": "Singapore", "code": "+65", "flag": "üá∏üá¨"},
            {"name": "Malaysia", "code": "+60", "flag": "üá≤üáæ"}
        ]

        # T·∫°o c·ª≠a s·ªï ch·ªçn qu·ªëc gia
        country_window = ctk.CTkToplevel(self.window)
        country_window.title("Ch·ªçn qu·ªëc gia")
        country_window.geometry("350x400")
        country_window.transient(self.window)
        country_window.grab_set()
        country_window.configure(fg_color=COLORS["bg_primary"])

        # CƒÉn gi·ªØa
        x = self.window.winfo_x() + 35
        y = self.window.winfo_y() + 90
        country_window.geometry(f"350x400+{x}+{y}")

        # Ti√™u ƒë·ªÅ
        title = ctk.CTkLabel(country_window, text="Ch·ªçn qu·ªëc gia",
                           font=ctk.CTkFont(size=18, weight="bold"),
                           text_color=COLORS["text_primary"])
        title.pack(pady=20)

        # Danh s√°ch qu·ªëc gia
        scrollable = ctk.CTkScrollableFrame(country_window, fg_color=COLORS["bg_primary"])
        scrollable.pack(fill="both", expand=True, padx=20, pady=(0, 20))

        for country in countries:
            btn = ctk.CTkButton(scrollable,
                              text=f"{country['flag']} {country['name']} {country['code']}",
                              font=ctk.CTkFont(size=14),
                              fg_color="transparent",
                              text_color=COLORS["text_primary"],
                              hover_color=COLORS["bg_secondary"],
                              anchor="w",
                              height=40,
                              command=lambda c=country: self.select_country(c, country_window))
            btn.pack(fill="x", pady=1)

    def select_country(self, country, window):
        """Ch·ªçn qu·ªëc gia"""
        self.selected_country = country
        self.country_btn.configure(text=f"{country['flag']} {country['name']}")
        self.country_code_label.configure(text=country['code'])
        window.destroy()

    def create_code_step(self):
        """B∆∞·ªõc nh·∫≠p m√£ x√°c nh·∫≠n theo phong c√°ch Telegram"""
        self.code_frame = ctk.CTkFrame(self.content, fg_color="transparent")

        # Ti√™u ƒë·ªÅ
        title = ctk.CTkLabel(self.code_frame, text="Nh·∫≠p m√£ x√°c nh·∫≠n",
                           font=ctk.CTkFont(size=24, weight="bold"),
                           text_color=COLORS["text_primary"])
        title.pack(pady=(30, 5))

        # M√¥ t·∫£
        self.phone_display = ctk.CTkLabel(self.code_frame, text="",
                                        font=ctk.CTkFont(size=14),
                                        text_color=COLORS["text_secondary"])
        self.phone_display.pack(pady=(0, 30))

        # Khung nh·∫≠p m√£ v·ªõi border
        code_frame = ctk.CTkFrame(self.code_frame,
                                fg_color=COLORS["bg_card"],
                                border_width=1,
                                border_color=COLORS["border"],
                                corner_radius=8,
                                height=52)
        code_frame.pack(fill="x", padx=40, pady=(0, 20))
        code_frame.pack_propagate(False)

        self.code_entry = ctk.CTkEntry(code_frame,
                                     placeholder_text="M√£ x√°c nh·∫≠n",
                                     font=ctk.CTkFont(size=16),
                                     fg_color="transparent",
                                     border_width=0,
                                     text_color=COLORS["text_primary"],
                                     justify="center")
        self.code_entry.pack(fill="both", expand=True, padx=15, pady=10)
        self.code_entry.bind("<Return>", lambda e: self.verify_code())

        # N√∫t x√°c nh·∫≠n
        self.verify_btn = ctk.CTkButton(self.code_frame,
                                      text="TI·∫æP T·ª§C",
                                      height=50,
                                      width=320,
                                      font=ctk.CTkFont(size=15, weight="bold"),
                                      fg_color=COLORS["telegram_blue"],
                                      hover_color=COLORS["telegram_dark"],
                                      corner_radius=12,
                                      command=self.verify_code)
        self.verify_btn.pack(pady=(30, 10))

        # N√∫t quay l·∫°i
        back_btn = ctk.CTkButton(self.code_frame, text="‚Üê Quay l·∫°i",
                               height=35, width=120,
                               fg_color="transparent",
                               text_color=COLORS["telegram_blue"],
                               hover_color=COLORS["bg_secondary"],
                               command=lambda: self.show_step("phone"))
        back_btn.pack(pady=5)

        # Th√¥ng b√°o l·ªói
        self.code_status = ctk.CTkLabel(self.code_frame, text="",
                                      text_color=COLORS["error"],
                                      font=ctk.CTkFont(size=12))
        self.code_status.pack(pady=(10, 0))
    
    def create_password_step(self):
        """B∆∞·ªõc nh·∫≠p m·∫≠t kh·∫©u 2FA theo phong c√°ch Telegram"""
        self.password_frame = ctk.CTkFrame(self.content, fg_color="transparent")

        # Ti√™u ƒë·ªÅ
        title = ctk.CTkLabel(self.password_frame, text="M·∫≠t kh·∫©u hai b∆∞·ªõc",
                           font=ctk.CTkFont(size=24, weight="bold"),
                           text_color=COLORS["text_primary"])
        title.pack(pady=(30, 5))

        # M√¥ t·∫£
        subtitle = ctk.CTkLabel(self.password_frame,
                              text="T√†i kho·∫£n c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng\nm·∫≠t kh·∫©u b·ªï sung.",
                              font=ctk.CTkFont(size=14),
                              text_color=COLORS["text_secondary"])
        subtitle.pack(pady=(0, 30))

        # Khung nh·∫≠p m·∫≠t kh·∫©u v·ªõi border
        password_frame = ctk.CTkFrame(self.password_frame,
                                    fg_color=COLORS["bg_card"],
                                    border_width=1,
                                    border_color=COLORS["border"],
                                    corner_radius=8,
                                    height=52)
        password_frame.pack(fill="x", padx=40, pady=(0, 20))
        password_frame.pack_propagate(False)

        self.password_entry = ctk.CTkEntry(password_frame,
                                         placeholder_text="M·∫≠t kh·∫©u",
                                         font=ctk.CTkFont(size=16),
                                         fg_color="transparent",
                                         border_width=0,
                                         text_color=COLORS["text_primary"],
                                         show="*")
        self.password_entry.pack(fill="both", expand=True, padx=15, pady=10)
        self.password_entry.bind("<Return>", lambda e: self.verify_password())

        # N√∫t x√°c nh·∫≠n
        self.password_btn = ctk.CTkButton(self.password_frame,
                                        text="TI·∫æP T·ª§C",
                                        height=50,
                                        width=320,
                                        font=ctk.CTkFont(size=15, weight="bold"),
                                        fg_color=COLORS["telegram_blue"],
                                        hover_color=COLORS["telegram_dark"],
                                        corner_radius=12,
                                        command=self.verify_password)
        self.password_btn.pack(pady=(30, 10))

        # Th√¥ng b√°o l·ªói
        self.password_status = ctk.CTkLabel(self.password_frame, text="",
                                          text_color=COLORS["error"],
                                          font=ctk.CTkFont(size=12))
        self.password_status.pack(pady=(10, 0))
    
    def show_step(self, step):
        """Hi·ªÉn th·ªã b∆∞·ªõc"""
        self.phone_frame.pack_forget()
        self.code_frame.pack_forget()
        self.password_frame.pack_forget()
        
        if step == "phone":
            self.phone_frame.pack(fill="both", expand=True)
            self.phone_entry.focus()
        elif step == "code":
            self.code_frame.pack(fill="both", expand=True)
            self.code_entry.focus()
        elif step == "password":
            self.password_frame.pack(fill="both", expand=True)
            self.password_entry.focus()
        
        self.step = step
    
    def send_code(self):
        """G·ª≠i m√£ x√°c nh·∫≠n"""
        phone_number = self.phone_entry.get().strip()
        if not phone_number:
            self.phone_status.configure(text="Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i")
            return

        # K·∫øt h·ª£p m√£ qu·ªëc gia v√† s·ªë ƒëi·ªán tho·∫°i
        full_phone = self.selected_country['code'] + phone_number
        self.phone = full_phone

        self.send_btn.configure(state="disabled", text="ƒêANG G·ª¨I...")
        self.phone_status.configure(text="")

        async def send_code_async():
            try:
                result = await self.client.send_code_request(full_phone)
                self.code_hash = result.phone_code_hash
                self.window.after(0, self.on_code_sent)
            except Exception as e:
                self.window.after(0, lambda: self.on_code_error(str(e)))

        def run_async():
            try:
                asyncio.run(send_code_async())
            except Exception as e:
                self.window.after(0, lambda: self.on_code_error(str(e)))

        threading.Thread(target=run_async, daemon=True).start()
    
    def on_code_sent(self):
        """X·ª≠ l√Ω khi g·ª≠i m√£ th√†nh c√¥ng"""
        self.send_btn.configure(state="normal", text="TI·∫æP T·ª§C")
        self.phone_display.configure(text=f"Ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ SMS ƒë·∫øn {self.phone}")
        self.show_step("code")

    def on_code_error(self, error):
        """X·ª≠ l√Ω l·ªói g·ª≠i m√£"""
        self.send_btn.configure(state="normal", text="TI·∫æP T·ª§C")
        if "PHONE_NUMBER_INVALID" in error:
            self.phone_status.configure(text="S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
        elif "PHONE_NUMBER_BANNED" in error:
            self.phone_status.configure(text="S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ b·ªã c·∫•m")
        else:
            self.phone_status.configure(text=f"L·ªói: {error}")
    
    def verify_code(self):
        """X√°c nh·∫≠n m√£"""
        code = self.code_entry.get().strip()
        if not code:
            self.code_status.configure(text="Vui l√≤ng nh·∫≠p m√£ x√°c nh·∫≠n")
            return
        
        self.verify_btn.configure(state="disabled", text="ƒêang x√°c nh·∫≠n...")
        self.code_status.configure(text="ƒêang x√°c nh·∫≠n...")
        
        async def verify_code_async():
            try:
                user = await self.client.sign_in(phone=self.phone, code=code, phone_code_hash=self.code_hash)
                self.window.after(0, lambda: self.on_login_success(user))
            except SessionPasswordNeededError:
                self.window.after(0, lambda: self.show_step("password"))
            except Exception as e:
                self.window.after(0, lambda: self.on_verify_error(str(e)))

        def run_async():
            try:
                asyncio.run(verify_code_async())
            except Exception as e:
                self.window.after(0, lambda: self.on_verify_error(str(e)))

        threading.Thread(target=run_async, daemon=True).start()
    
    def on_verify_error(self, error):
        """X·ª≠ l√Ω l·ªói x√°c nh·∫≠n"""
        self.verify_btn.configure(state="normal", text="X√°c nh·∫≠n")
        self.code_status.configure(text=f"L·ªói: {error}")
    
    def verify_password(self):
        """X√°c nh·∫≠n m·∫≠t kh·∫©u 2FA"""
        password = self.password_entry.get().strip()
        if not password:
            self.password_status.configure(text="Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
            return
        
        self.password_btn.configure(state="disabled", text="ƒêang x√°c nh·∫≠n...")
        self.password_status.configure(text="ƒêang x√°c nh·∫≠n...")
        
        async def verify_password_async():
            try:
                user = await self.client.sign_in(password=password)
                self.window.after(0, lambda: self.on_login_success(user))
            except Exception as e:
                self.window.after(0, lambda: self.on_password_error(str(e)))

        def run_async():
            try:
                asyncio.run(verify_password_async())
            except Exception as e:
                self.window.after(0, lambda: self.on_password_error(str(e)))

        threading.Thread(target=run_async, daemon=True).start()
    
    def on_password_error(self, error):
        """X·ª≠ l√Ω l·ªói m·∫≠t kh·∫©u"""
        self.password_btn.configure(state="normal", text="X√°c nh·∫≠n")
        self.password_status.configure(text=f"L·ªói: {error}")
    
    def on_login_success(self, user):
        """X·ª≠ l√Ω ƒëƒÉng nh·∫≠p th√†nh c√¥ng"""
        self.result = user
        self.window.destroy()

class TeleDriveApp:
    """·ª®ng d·ª•ng ch√≠nh TeleDrive v·ªõi giao di·ªán theo phong c√°ch Telegram"""

    def __init__(self):
        # T·∫°o c·ª≠a s·ªï ch√≠nh
        self.root = ctk.CTk()
        self.root.title("TeleDrive - Qu·∫£n l√Ω file Telegram")
        self.root.geometry("1200x800")
        self.root.configure(fg_color=COLORS["bg_primary"])

        # ·∫®n c·ª≠a s·ªï ch√≠nh ban ƒë·∫ßu
        self.root.withdraw()

        # Kh·ªüi t·∫°o Telegram client
        api_id = os.getenv('API_ID')
        api_hash = os.getenv('API_HASH')
        session_name = os.getenv('SESSION_NAME', 'session')

        if not api_id or not api_hash:
            messagebox.showerror("L·ªói", "Thi·∫øu API_ID ho·∫∑c API_HASH trong file .env")
            return

        self.client = TelegramClient(session_name, api_id, api_hash)
        self.user = None
        self.connected = False

        self.create_ui()
        self.check_login()
    
    def create_ui(self):
        """T·∫°o giao di·ªán ch√≠nh gi·ªëng h·ªát Telegram"""
        # Header v·ªõi thi·∫øt k·∫ø Telegram ch√≠nh th·ª©c
        header = ctk.CTkFrame(self.root, height=64, corner_radius=0, fg_color=COLORS["telegram_blue"])
        header.pack(fill="x")
        header.pack_propagate(False)

        # Container cho header
        header_container = ctk.CTkFrame(header, fg_color="transparent")
        header_container.pack(fill="both", expand=True, padx=16, pady=12)

        # Logo v√† ti√™u ƒë·ªÅ b√™n tr√°i
        left_frame = ctk.CTkFrame(header_container, fg_color="transparent")
        left_frame.pack(side="left")

        # Logo container v·ªõi background tr√≤n nh·ªè
        logo_bg = ctk.CTkFrame(left_frame,
                              fg_color="white",
                              width=32, height=32,
                              corner_radius=16)
        logo_bg.pack(side="left", padx=(0, 12))
        logo_bg.pack_propagate(False)

        # Logo TeleDrive t·ª´ file PNG (nh·ªè h∆°n cho header)
        try:
            logo_path = os.path.join(os.getcwd(), "teledrive.png")
            logo_image = Image.open(logo_path)
            logo_image = logo_image.resize((32, 32), Image.Resampling.LANCZOS)
            self.header_logo_photo = ctk.CTkImage(light_image=logo_image, dark_image=logo_image, size=(32, 32))
            logo = ctk.CTkLabel(logo_bg, image=self.header_logo_photo, text="")
            logo.pack(expand=True)
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ load logo cho header: {e}")
            # Fallback n·∫øu kh√¥ng load ƒë∆∞·ª£c h√¨nh
            logo = ctk.CTkLabel(logo_bg, text="‚òÅ‚úà",
                              font=ctk.CTkFont(size=16, weight="bold"),
                              text_color=COLORS["telegram_blue"])
            logo.pack(expand=True)

        # Ti√™u ƒë·ªÅ
        title = ctk.CTkLabel(left_frame, text="TeleDrive",
                           font=ctk.CTkFont(size=20, weight="bold"),
                           text_color="white")
        title.pack(side="left")

        # Tr·∫°ng th√°i k·∫øt n·ªëi b√™n ph·∫£i
        right_frame = ctk.CTkFrame(header_container, fg_color="transparent")
        right_frame.pack(side="right")

        # Th√¥ng tin user (n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p)
        self.user_frame = ctk.CTkFrame(right_frame, fg_color="transparent")
        self.user_frame.pack(side="left", padx=(0, 15))

        self.user_label = ctk.CTkLabel(self.user_frame, text="",
                                     font=ctk.CTkFont(size=14),
                                     text_color="white")
        self.user_label.pack()

        # N√∫t k·∫øt n·ªëi/ƒëƒÉng nh·∫≠p theo style Telegram
        self.connect_btn = ctk.CTkButton(right_frame,
                                       text="ƒêƒÉng nh·∫≠p",
                                       width=90,
                                       height=32,
                                       font=ctk.CTkFont(size=13, weight="bold"),
                                       fg_color="white",
                                       text_color=COLORS["telegram_blue"],
                                       hover_color="#F0F0F0",
                                       corner_radius=16,
                                       command=self.toggle_connection)
        self.connect_btn.pack(side="left")

        # Main content v·ªõi n·ªÅn tr·∫Øng s·ªØa
        self.main_frame = ctk.CTkFrame(self.root, fg_color=COLORS["bg_primary"], corner_radius=0)
        self.main_frame.pack(fill="both", expand=True)

        # Welcome screen gi·ªëng Telegram
        self.welcome_frame = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        self.welcome_frame.pack(expand=True)

        # Logo l·ªõn gi·ªëng Telegram
        logo_container = ctk.CTkFrame(self.welcome_frame, fg_color="transparent")
        logo_container.pack(pady=(80, 30))

        # Background tr√≤n cho logo
        logo_bg = ctk.CTkFrame(logo_container,
                              fg_color=COLORS["telegram_blue"],
                              width=120, height=120,
                              corner_radius=60)
        logo_bg.pack()
        logo_bg.pack_propagate(False)

        # Logo TeleDrive t·ª´ file PNG (l·ªõn cho welcome screen)
        try:
            logo_path = os.path.join(os.getcwd(), "teledrive.png")
            logo_image = Image.open(logo_path)
            logo_image = logo_image.resize((96, 96), Image.Resampling.LANCZOS)
            self.welcome_logo_photo = ctk.CTkImage(light_image=logo_image, dark_image=logo_image, size=(96, 96))
            welcome_icon = ctk.CTkLabel(logo_bg, image=self.welcome_logo_photo, text="")
            welcome_icon.pack(expand=True)
            print("Logo welcome screen ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ load logo cho welcome screen: {e}")
            # Fallback n·∫øu kh√¥ng load ƒë∆∞·ª£c h√¨nh
            welcome_icon = ctk.CTkLabel(logo_bg, text="‚úà",
                                      font=ctk.CTkFont(size=56, weight="bold"),
                                      text_color="white")
            welcome_icon.pack(expand=True)

        # Ti√™u ƒë·ªÅ ch√†o m·ª´ng
        welcome_title = ctk.CTkLabel(self.welcome_frame,
                                   text="Ch√†o m·ª´ng ƒë·∫øn v·ªõi TeleDrive",
                                   font=ctk.CTkFont(size=24, weight="bold"),
                                   text_color=COLORS["text_primary"])
        welcome_title.pack(pady=(0, 8))

        # M√¥ t·∫£
        self.welcome_label = ctk.CTkLabel(self.welcome_frame,
                                        text="Qu·∫£n l√Ω file Telegram m·ªôt c√°ch d·ªÖ d√†ng\nVui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu",
                                        font=ctk.CTkFont(size=15),
                                        text_color=COLORS["text_secondary"])
        self.welcome_label.pack(pady=(0, 40))
    
    def check_login(self):
        """Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p"""
        async def check_auth():
            try:
                await self.client.connect()

                if await self.client.is_user_authorized():
                    user = await self.client.get_me()
                    self.root.after(0, lambda: self.on_login_success(user))
                else:
                    self.root.after(0, self.on_not_logged_in)
            except Exception as e:
                self.root.after(0, lambda: self.on_connection_error(str(e)))

        def run_async():
            try:
                asyncio.run(check_auth())
            except Exception as e:
                self.root.after(0, lambda: self.on_connection_error(str(e)))

        threading.Thread(target=run_async, daemon=True).start()
    
    def on_login_success(self, user):
        """X·ª≠ l√Ω ƒëƒÉng nh·∫≠p th√†nh c√¥ng"""
        self.user = user
        self.connected = True

        # Hi·ªÉn th·ªã c·ª≠a s·ªï ch√≠nh
        self.root.deiconify()

        # C·∫≠p nh·∫≠t giao di·ªán
        self.user_label.configure(text=f"üë§ {user.first_name}")
        self.connect_btn.configure(text="ƒêƒÉng xu·∫•t",
                                 fg_color=COLORS["error"],
                                 hover_color="#C53030")

        # C·∫≠p nh·∫≠t welcome message
        self.welcome_label.configure(text=f"Xin ch√†o {user.first_name}!\nB·∫°n ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi Telegram.")

        # C√≥ th·ªÉ th√™m giao di·ªán qu·∫£n l√Ω file ·ªü ƒë√¢y
        self.show_main_interface()

    def on_not_logged_in(self):
        """X·ª≠ l√Ω ch∆∞a ƒëƒÉng nh·∫≠p - t·ª± ƒë·ªông hi·ªÉn th·ªã giao di·ªán ƒëƒÉng nh·∫≠p"""
        self.connected = False

        # T·ª± ƒë·ªông hi·ªÉn th·ªã giao di·ªán ƒëƒÉng nh·∫≠p m√† kh√¥ng hi·ªÉn th·ªã c·ª≠a s·ªï ch√≠nh
        self.login()

    def on_connection_error(self, error):
        """X·ª≠ l√Ω l·ªói k·∫øt n·ªëi"""
        self.connected = False

        # T·∫°o c·ª≠a s·ªï t·∫°m th·ªùi ƒë·ªÉ hi·ªÉn th·ªã l·ªói
        temp_root = ctk.CTk()
        temp_root.withdraw()
        messagebox.showerror("L·ªói k·∫øt n·ªëi", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi: {error}")
        temp_root.destroy()

        # Hi·ªÉn th·ªã giao di·ªán ƒëƒÉng nh·∫≠p
        self.login()

    def show_main_interface(self):
        """Hi·ªÉn th·ªã giao di·ªán ch√≠nh sau khi ƒëƒÉng nh·∫≠p"""
        # ·∫®n welcome screen
        self.welcome_frame.pack_forget()

        # T·∫°o giao di·ªán qu·∫£n l√Ω file
        self.file_frame = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        self.file_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Placeholder cho t√≠nh nƒÉng qu·∫£n l√Ω file
        placeholder = ctk.CTkLabel(self.file_frame,
                                 text="üóÇÔ∏è\n\nGiao di·ªán qu·∫£n l√Ω file\ns·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ti·∫øp",
                                 font=ctk.CTkFont(size=18),
                                 text_color=COLORS["text_secondary"])
        placeholder.pack(expand=True)
    
    def toggle_connection(self):
        """Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i k·∫øt n·ªëi"""
        if self.connected:
            self.disconnect()
        else:
            self.login()
    
    def login(self):
        """ƒêƒÉng nh·∫≠p Telegram"""
        # T·∫°o c·ª≠a s·ªï t·∫°m th·ªùi ƒë·ªÉ l√†m parent cho login window
        temp_root = ctk.CTk()
        temp_root.withdraw()

        login_window = LoginWindow(temp_root, self.client)
        temp_root.wait_window(login_window.window)

        if login_window.result:
            self.on_login_success(login_window.result)
        else:
            # N·∫øu kh√¥ng ƒëƒÉng nh·∫≠p th√†nh c√¥ng, tho√°t ·ª©ng d·ª•ng
            self.root.quit()

        temp_root.destroy()
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi"""
        async def disconnect_client():
            try:
                await self.client.disconnect()
                self.root.after(0, self.on_disconnected)
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói ng·∫Øt k·∫øt n·ªëi: {e}"))

        def run_async():
            try:
                asyncio.run(disconnect_client())
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói ng·∫Øt k·∫øt n·ªëi: {e}"))

        threading.Thread(target=run_async, daemon=True).start()

    def on_disconnected(self):
        """X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi"""
        self.connected = False
        self.user = None

        # ·∫®n c·ª≠a s·ªï ch√≠nh
        self.root.withdraw()

        # Hi·ªÉn th·ªã giao di·ªán ƒëƒÉng nh·∫≠p
        self.login()
    
    def cleanup(self):
        """D·ªçn d·∫πp t√†i nguy√™n khi ƒë√≥ng ·ª©ng d·ª•ng"""
        async def cleanup_client():
            try:
                if self.client and self.client.is_connected():
                    await self.client.disconnect()
            except Exception:
                pass  # Ignore cleanup errors

        def run_cleanup():
            try:
                asyncio.run(cleanup_client())
            except Exception:
                pass  # Ignore cleanup errors

        threading.Thread(target=run_cleanup, daemon=True).start()

    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        try:
            # Th√™m cleanup khi ƒë√≥ng c·ª≠a s·ªï
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.root.mainloop()
        except KeyboardInterrupt:
            self.cleanup()

    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        self.cleanup()
        self.root.quit()
        self.root.destroy()

def main():
    """H√†m ch√≠nh"""
    app = None

    def signal_handler(signum, frame):
        """X·ª≠ l√Ω t√≠n hi·ªáu ƒë·ªÉ cleanup"""
        if app:
            app.cleanup()
        sys.exit(0)

    # ƒêƒÉng k√Ω signal handler
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        app = TeleDriveApp()
        app.run()
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")
    finally:
        if app:
            app.cleanup()

if __name__ == "__main__":
    main()
