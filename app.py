#!/usr/bin/env python3
"""
TeleDrive - ·ª®ng d·ª•ng qu·∫£n l√Ω file Telegram ƒë∆°n gi·∫£n
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import filedialog, messagebox
import threading
import asyncio
import os
from pathlib import Path
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from dotenv import load_dotenv

# Load c·∫•u h√¨nh
load_dotenv()

# C·∫•u h√¨nh giao di·ªán
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

class LoginWindow:
    """C·ª≠a s·ªï ƒëƒÉng nh·∫≠p Telegram"""
    
    def __init__(self, parent, client):
        self.parent = parent
        self.client = client
        self.result = None
        
        # T·∫°o c·ª≠a s·ªï ƒëƒÉng nh·∫≠p
        self.window = ctk.CTkToplevel(parent)
        self.window.title("ƒêƒÉng nh·∫≠p Telegram")
        self.window.geometry("400x500")
        self.window.resizable(False, False)
        self.window.transient(parent)
        self.window.grab_set()
        
        # CƒÉn gi·ªØa c·ª≠a s·ªï
        self.center_window()
        
        self.step = "phone"
        self.phone = ""
        self.code_hash = ""
        
        self.create_ui()
    
    def center_window(self):
        """CƒÉn gi·ªØa c·ª≠a s·ªï"""
        self.window.update_idletasks()
        x = (self.window.winfo_screenwidth() // 2) - (400 // 2)
        y = (self.window.winfo_screenheight() // 2) - (500 // 2)
        self.window.geometry(f"400x500+{x}+{y}")
    
    def create_ui(self):
        """T·∫°o giao di·ªán ƒëƒÉng nh·∫≠p"""
        # Header
        header = ctk.CTkFrame(self.window, fg_color="#4A90E2", height=100)
        header.pack(fill="x", padx=0, pady=(0, 20))
        header.pack_propagate(False)
        
        title = ctk.CTkLabel(header, text="üöÄ TeleDrive", font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(pady=30)
        
        # Content
        self.content = ctk.CTkFrame(self.window)
        self.content.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        self.create_phone_step()
        self.create_code_step()
        self.create_password_step()
        
        self.show_step("phone")
    
    def create_phone_step(self):
        """B∆∞·ªõc nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"""
        self.phone_frame = ctk.CTkFrame(self.content, fg_color="transparent")
        
        ctk.CTkLabel(self.phone_frame, text="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i", font=ctk.CTkFont(size=18, weight="bold")).pack(pady=(20, 10))
        
        self.phone_entry = ctk.CTkEntry(self.phone_frame, placeholder_text="+84123456789", font=ctk.CTkFont(size=14), height=40, width=300)
        self.phone_entry.pack(pady=10)
        self.phone_entry.bind("<Return>", lambda e: self.send_code())
        
        self.send_btn = ctk.CTkButton(self.phone_frame, text="G·ª≠i m√£ x√°c nh·∫≠n", height=40, width=300, command=self.send_code)
        self.send_btn.pack(pady=20)
        
        self.phone_status = ctk.CTkLabel(self.phone_frame, text="", text_color="red")
        self.phone_status.pack()
    
    def create_code_step(self):
        """B∆∞·ªõc nh·∫≠p m√£ x√°c nh·∫≠n"""
        self.code_frame = ctk.CTkFrame(self.content, fg_color="transparent")
        
        ctk.CTkLabel(self.code_frame, text="Nh·∫≠p m√£ x√°c nh·∫≠n", font=ctk.CTkFont(size=18, weight="bold")).pack(pady=(20, 10))
        
        self.phone_display = ctk.CTkLabel(self.code_frame, text="", font=ctk.CTkFont(size=12), text_color="gray")
        self.phone_display.pack(pady=5)
        
        self.code_entry = ctk.CTkEntry(self.code_frame, placeholder_text="12345", font=ctk.CTkFont(size=14), height=40, width=300)
        self.code_entry.pack(pady=10)
        self.code_entry.bind("<Return>", lambda e: self.verify_code())
        
        self.verify_btn = ctk.CTkButton(self.code_frame, text="X√°c nh·∫≠n", height=40, width=300, command=self.verify_code)
        self.verify_btn.pack(pady=20)
        
        back_btn = ctk.CTkButton(self.code_frame, text="‚Üê Quay l·∫°i", height=30, width=100, fg_color="transparent", text_color="gray", command=lambda: self.show_step("phone"))
        back_btn.pack(pady=5)
        
        self.code_status = ctk.CTkLabel(self.code_frame, text="", text_color="red")
        self.code_status.pack()
    
    def create_password_step(self):
        """B∆∞·ªõc nh·∫≠p m·∫≠t kh·∫©u 2FA"""
        self.password_frame = ctk.CTkFrame(self.content, fg_color="transparent")
        
        ctk.CTkLabel(self.password_frame, text="Nh·∫≠p m·∫≠t kh·∫©u 2FA", font=ctk.CTkFont(size=18, weight="bold")).pack(pady=(20, 10))
        
        self.password_entry = ctk.CTkEntry(self.password_frame, placeholder_text="M·∫≠t kh·∫©u", font=ctk.CTkFont(size=14), height=40, width=300, show="*")
        self.password_entry.pack(pady=10)
        self.password_entry.bind("<Return>", lambda e: self.verify_password())
        
        self.password_btn = ctk.CTkButton(self.password_frame, text="X√°c nh·∫≠n", height=40, width=300, command=self.verify_password)
        self.password_btn.pack(pady=20)
        
        self.password_status = ctk.CTkLabel(self.password_frame, text="", text_color="red")
        self.password_status.pack()
    
    def show_step(self, step):
        """Hi·ªÉn th·ªã b∆∞·ªõc"""
        self.phone_frame.pack_forget()
        self.code_frame.pack_forget()
        self.password_frame.pack_forget()
        
        if step == "phone":
            self.phone_frame.pack(fill="both", expand=True)
            self.phone_entry.focus()
        elif step == "code":
            self.code_frame.pack(fill="both", expand=True)
            self.code_entry.focus()
        elif step == "password":
            self.password_frame.pack(fill="both", expand=True)
            self.password_entry.focus()
        
        self.step = step
    
    def send_code(self):
        """G·ª≠i m√£ x√°c nh·∫≠n"""
        phone = self.phone_entry.get().strip()
        if not phone:
            self.phone_status.configure(text="Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i")
            return
        
        self.phone = phone
        self.send_btn.configure(state="disabled", text="ƒêang g·ª≠i...")
        self.phone_status.configure(text="ƒêang g·ª≠i m√£ x√°c nh·∫≠n...")
        
        def run_async():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.client.send_code_request(phone))
                self.code_hash = result.phone_code_hash
                self.window.after(0, self.on_code_sent)
            except Exception as e:
                self.window.after(0, lambda: self.on_code_error(str(e)))
        
        threading.Thread(target=run_async, daemon=True).start()
    
    def on_code_sent(self):
        """X·ª≠ l√Ω khi g·ª≠i m√£ th√†nh c√¥ng"""
        self.send_btn.configure(state="normal", text="G·ª≠i m√£ x√°c nh·∫≠n")
        self.phone_display.configure(text=f"M√£ ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn {self.phone}")
        self.show_step("code")
    
    def on_code_error(self, error):
        """X·ª≠ l√Ω l·ªói g·ª≠i m√£"""
        self.send_btn.configure(state="normal", text="G·ª≠i m√£ x√°c nh·∫≠n")
        self.phone_status.configure(text=f"L·ªói: {error}")
    
    def verify_code(self):
        """X√°c nh·∫≠n m√£"""
        code = self.code_entry.get().strip()
        if not code:
            self.code_status.configure(text="Vui l√≤ng nh·∫≠p m√£ x√°c nh·∫≠n")
            return
        
        self.verify_btn.configure(state="disabled", text="ƒêang x√°c nh·∫≠n...")
        self.code_status.configure(text="ƒêang x√°c nh·∫≠n...")
        
        def run_async():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                user = loop.run_until_complete(self.client.sign_in(phone=self.phone, code=code, phone_code_hash=self.code_hash))
                self.window.after(0, lambda: self.on_login_success(user))
            except SessionPasswordNeededError:
                self.window.after(0, lambda: self.show_step("password"))
            except Exception as e:
                self.window.after(0, lambda: self.on_verify_error(str(e)))
        
        threading.Thread(target=run_async, daemon=True).start()
    
    def on_verify_error(self, error):
        """X·ª≠ l√Ω l·ªói x√°c nh·∫≠n"""
        self.verify_btn.configure(state="normal", text="X√°c nh·∫≠n")
        self.code_status.configure(text=f"L·ªói: {error}")
    
    def verify_password(self):
        """X√°c nh·∫≠n m·∫≠t kh·∫©u 2FA"""
        password = self.password_entry.get().strip()
        if not password:
            self.password_status.configure(text="Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
            return
        
        self.password_btn.configure(state="disabled", text="ƒêang x√°c nh·∫≠n...")
        self.password_status.configure(text="ƒêang x√°c nh·∫≠n...")
        
        def run_async():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                user = loop.run_until_complete(self.client.sign_in(password=password))
                self.window.after(0, lambda: self.on_login_success(user))
            except Exception as e:
                self.window.after(0, lambda: self.on_password_error(str(e)))
        
        threading.Thread(target=run_async, daemon=True).start()
    
    def on_password_error(self, error):
        """X·ª≠ l√Ω l·ªói m·∫≠t kh·∫©u"""
        self.password_btn.configure(state="normal", text="X√°c nh·∫≠n")
        self.password_status.configure(text=f"L·ªói: {error}")
    
    def on_login_success(self, user):
        """X·ª≠ l√Ω ƒëƒÉng nh·∫≠p th√†nh c√¥ng"""
        self.result = user
        self.window.destroy()

class TeleDriveApp:
    """·ª®ng d·ª•ng ch√≠nh TeleDrive"""
    
    def __init__(self):
        # T·∫°o c·ª≠a s·ªï ch√≠nh
        self.root = ctk.CTk()
        self.root.title("TeleDrive - Qu·∫£n l√Ω file Telegram")
        self.root.geometry("1000x700")
        
        # Kh·ªüi t·∫°o Telegram client
        api_id = os.getenv('API_ID')
        api_hash = os.getenv('API_HASH')
        session_name = os.getenv('SESSION_NAME', 'session')
        
        if not api_id or not api_hash:
            messagebox.showerror("L·ªói", "Thi·∫øu API_ID ho·∫∑c API_HASH trong file .env")
            return
        
        self.client = TelegramClient(session_name, api_id, api_hash)
        self.user = None
        self.connected = False
        
        self.create_ui()
        self.check_login()
    
    def create_ui(self):
        """T·∫°o giao di·ªán ch√≠nh"""
        # Header
        header = ctk.CTkFrame(self.root, height=80, corner_radius=0, fg_color="#4A90E2")
        header.pack(fill="x")
        header.pack_propagate(False)
        
        # Logo v√† ti√™u ƒë·ªÅ
        title_frame = ctk.CTkFrame(header, fg_color="transparent")
        title_frame.pack(side="left", padx=20, pady=20)
        
        ctk.CTkLabel(title_frame, text="üöÄ TeleDrive", font=ctk.CTkFont(size=24, weight="bold"), text_color="white").pack()
        
        # Tr·∫°ng th√°i k·∫øt n·ªëi
        self.status_frame = ctk.CTkFrame(header, fg_color="transparent")
        self.status_frame.pack(side="right", padx=20, pady=20)
        
        self.status_label = ctk.CTkLabel(self.status_frame, text="‚óè Ch∆∞a k·∫øt n·ªëi", text_color="red", font=ctk.CTkFont(size=14, weight="bold"))
        self.status_label.pack(side="left", padx=(0, 10))
        
        self.connect_btn = ctk.CTkButton(self.status_frame, text="K·∫øt n·ªëi", width=100, height=35, command=self.toggle_connection)
        self.connect_btn.pack(side="left")
        
        # Main content
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Welcome message
        self.welcome_label = ctk.CTkLabel(self.main_frame, text="Ch√†o m·ª´ng ƒë·∫øn v·ªõi TeleDrive!\nVui l√≤ng k·∫øt n·ªëi Telegram ƒë·ªÉ b·∫Øt ƒë·∫ßu.", font=ctk.CTkFont(size=16))
        self.welcome_label.pack(expand=True)
    
    def check_login(self):
        """Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p"""
        def run_async():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.client.connect())
                
                if loop.run_until_complete(self.client.is_user_authorized()):
                    user = loop.run_until_complete(self.client.get_me())
                    self.root.after(0, lambda: self.on_login_success(user))
                else:
                    self.root.after(0, self.on_not_logged_in)
            except Exception as e:
                self.root.after(0, lambda: self.on_connection_error(str(e)))
        
        threading.Thread(target=run_async, daemon=True).start()
    
    def on_login_success(self, user):
        """X·ª≠ l√Ω ƒëƒÉng nh·∫≠p th√†nh c√¥ng"""
        self.user = user
        self.connected = True
        self.status_label.configure(text="‚óè ƒê√£ k·∫øt n·ªëi", text_color="green")
        self.connect_btn.configure(text="Ng·∫Øt k·∫øt n·ªëi")
        self.welcome_label.configure(text=f"Xin ch√†o {user.first_name}!\nB·∫°n ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Telegram.")
    
    def on_not_logged_in(self):
        """X·ª≠ l√Ω ch∆∞a ƒëƒÉng nh·∫≠p"""
        self.connected = False
        self.status_label.configure(text="‚óè Ch∆∞a ƒëƒÉng nh·∫≠p", text_color="orange")
        self.connect_btn.configure(text="ƒêƒÉng nh·∫≠p")
    
    def on_connection_error(self, error):
        """X·ª≠ l√Ω l·ªói k·∫øt n·ªëi"""
        self.connected = False
        self.status_label.configure(text="‚óè L·ªói k·∫øt n·ªëi", text_color="red")
        self.connect_btn.configure(text="K·∫øt n·ªëi")
        messagebox.showerror("L·ªói k·∫øt n·ªëi", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi: {error}")
    
    def toggle_connection(self):
        """Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i k·∫øt n·ªëi"""
        if self.connected:
            self.disconnect()
        else:
            self.login()
    
    def login(self):
        """ƒêƒÉng nh·∫≠p Telegram"""
        login_window = LoginWindow(self.root, self.client)
        self.root.wait_window(login_window.window)
        
        if login_window.result:
            self.on_login_success(login_window.result)
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi"""
        def run_async():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.client.disconnect())
                self.root.after(0, self.on_disconnected)
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói ng·∫Øt k·∫øt n·ªëi: {e}"))
        
        threading.Thread(target=run_async, daemon=True).start()
    
    def on_disconnected(self):
        """X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi"""
        self.connected = False
        self.user = None
        self.status_label.configure(text="‚óè ƒê√£ ng·∫Øt k·∫øt n·ªëi", text_color="gray")
        self.connect_btn.configure(text="K·∫øt n·ªëi")
        self.welcome_label.configure(text="ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi Telegram.")
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()

def main():
    """H√†m ch√≠nh"""
    try:
        app = TeleDriveApp()
        app.run()
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")

if __name__ == "__main__":
    main()
