#!/usr/bin/env python3
"""
Script ƒë·ªÉ s·ª≠a l·ªói database v√† ƒë·∫£m b·∫£o database ho·∫°t ƒë·ªông ƒë√∫ng
"""

import os
import sqlite3
from pathlib import Path

def fix_database():
    """S·ª≠a l·ªói database"""
    print("üîß ƒêang ki·ªÉm tra v√† s·ª≠a database...")
    
    # T·∫°o th∆∞ m·ª•c instance
    instance_dir = Path('instance')
    instance_dir.mkdir(exist_ok=True)
    print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: {instance_dir.absolute()}")
    
    # ƒê∆∞·ªùng d·∫´n database
    db_path = instance_dir / 'teledrive.db'
    
    try:
        # Ki·ªÉm tra database hi·ªán t·∫°i
        if db_path.exists():
            print(f"üìÅ Database t·ªìn t·∫°i: {db_path.absolute()}")
            
            # Ki·ªÉm tra c√≥ th·ªÉ k·∫øt n·ªëi kh√¥ng
            try:
                conn = sqlite3.connect(str(db_path))
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()
                conn.close()
                
                if tables:
                    print(f"‚úÖ Database ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng, c√≥ {len(tables)} b·∫£ng")
                    for table in tables:
                        print(f"   - {table[0]}")
                    return True
                else:
                    print("‚ö†Ô∏è Database tr·ªëng, c·∫ßn t·∫°o l·∫°i")
                    
            except Exception as e:
                print(f"‚ùå Database b·ªã l·ªói: {e}")
                print("üîÑ ƒêang t·∫°o l·∫°i database...")
                
                # X√≥a database c≈©
                db_path.unlink()
                
        # T·∫°o database m·ªõi
        print(f"üÜï T·∫°o database m·ªõi: {db_path.absolute()}")
        conn = sqlite3.connect(str(db_path))
        
        # T·∫°o b·∫£ng users c∆° b·∫£n
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username VARCHAR(80) UNIQUE NOT NULL,
                phone_number VARCHAR(20) UNIQUE NOT NULL,
                email VARCHAR(120) UNIQUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_login DATETIME,
                is_active BOOLEAN DEFAULT 1,
                is_admin BOOLEAN DEFAULT 0,
                is_verified BOOLEAN DEFAULT 1
            )
        ''')
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Database ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o database: {e}")
        
        # Th·ª≠ t·∫°o database trong th∆∞ m·ª•c hi·ªán t·∫°i
        try:
            print("üîÑ Th·ª≠ t·∫°o database trong th∆∞ m·ª•c hi·ªán t·∫°i...")
            fallback_db = Path('teledrive.db')
            
            conn = sqlite3.connect(str(fallback_db))
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username VARCHAR(80) UNIQUE NOT NULL,
                    phone_number VARCHAR(20) UNIQUE NOT NULL,
                    email VARCHAR(120) UNIQUE,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    last_login DATETIME,
                    is_active BOOLEAN DEFAULT 1,
                    is_admin BOOLEAN DEFAULT 0,
                    is_verified BOOLEAN DEFAULT 1
                )
            ''')
            conn.commit()
            conn.close()
            
            print(f"‚úÖ Database fallback t·∫°o th√†nh c√¥ng: {fallback_db.absolute()}")
            return True
            
        except Exception as fallback_error:
            print(f"‚ùå L·ªói t·∫°o database fallback: {fallback_error}")
            return False

def check_permissions():
    """Ki·ªÉm tra quy·ªÅn ghi"""
    try:
        test_file = Path('test_write.tmp')
        test_file.write_text('test')
        test_file.unlink()
        print("‚úÖ C√≥ quy·ªÅn ghi trong th∆∞ m·ª•c hi·ªán t·∫°i")
        return True
    except Exception as e:
        print(f"‚ùå Kh√¥ng c√≥ quy·ªÅn ghi: {e}")
        return False

def main():
    """Main function"""
    print("üîß TeleDrive Database Fix Tool")
    print("=" * 50)
    
    # Ki·ªÉm tra quy·ªÅn
    if not check_permissions():
        print("‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c do kh√¥ng c√≥ quy·ªÅn ghi")
        return False
    
    # S·ª≠a database
    if fix_database():
        print("\nüéâ Database ƒë√£ ƒë∆∞·ª£c s·ª≠a th√†nh c√¥ng!")
        print("üí° B√¢y gi·ªù c√≥ th·ªÉ ch·∫°y ·ª©ng d·ª•ng b√¨nh th∆∞·ªùng")
        return True
    else:
        print("\n‚ùå Kh√¥ng th·ªÉ s·ª≠a database")
        print("üí° Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p v√† th·ª≠ l·∫°i")
        return False

if __name__ == "__main__":
    main()
