#!/usr/bin/env python3
"""
Private Channel Scanner
Chuy√™n d·ª•ng cho vi·ªác qu√©t file trong private channel/group Telegram
"""

import asyncio
import sys
from scanner import TelegramFileScanner

class PrivateChannelScanner(TelegramFileScanner):
    """Scanner chuy√™n d·ª•ng cho private channel"""
    
    async def join_private_channel(self, invite_link: str):
        """Join private channel t·ª´ invite link"""
        try:
            print(f"üîó ƒêang join private channel t·ª´ link: {invite_link}")

            # L·∫•y hash t·ª´ link
            if 'joinchat' in invite_link:
                hash_part = invite_link.split('joinchat/')[-1]
            elif '+' in invite_link:
                hash_part = invite_link.split('+')[-1]
            else:
                print("‚ùå Link kh√¥ng h·ª£p l·ªá")
                return False

            # Import functions
            from telethon import functions

            # Join channel
            await self.client(functions.messages.ImportChatInviteRequest(
                hash=hash_part
            ))

            print("‚úÖ ƒê√£ join private channel th√†nh c√¥ng!")
            return True

        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ join private channel: {e}")
            print("üí° C√≥ th·ªÉ b·∫°n ƒë√£ l√† th√†nh vi√™n ho·∫∑c link ƒë√£ h·∫øt h·∫°n")
            return False
    
    async def scan_private_channel_interactive(self):
        """Qu√©t private channel v·ªõi giao di·ªán t∆∞∆°ng t√°c"""
        print("üîê PRIVATE CHANNEL SCANNER")
        print("=" * 50)
        
        await self.initialize()
        
        print("\nüìã Ch·ªçn c√°ch truy c·∫≠p private channel:")
        print("1. T√¥i ƒë√£ l√† th√†nh vi√™n (nh·∫≠p username ho·∫∑c link)")
        print("2. Join t·ª´ invite link")
        
        choice = input("\nüëâ L·ª±a ch·ªçn (1/2): ").strip()
        
        if choice == "2":
            invite_link = input("üëâ Nh·∫≠p invite link (https://t.me/joinchat/xxx ho·∫∑c https://t.me/+xxx): ").strip()
            if not invite_link:
                print("‚ùå Link kh√¥ng h·ª£p l·ªá!")
                return
                
            success = await self.join_private_channel(invite_link)
            if not success:
                return
                
            # Sau khi join, l·∫•y entity
            entity = await self.get_channel_entity(invite_link)
            
        else:
            channel_input = input("üëâ Nh·∫≠p username ho·∫∑c link channel: ").strip()
            if not channel_input:
                print("‚ùå Vui l√≤ng nh·∫≠p th√¥ng tin channel!")
                return
                
            entity = await self.get_channel_entity(channel_input)
        
        if not entity:
            return
            
        # Ki·ªÉm tra quy·ªÅn truy c·∫≠p chi ti·∫øt
        await self.check_channel_permissions(entity)
        
        # Qu√©t channel
        await self.scan_channel_by_entity(entity)
        
        if self.files_data:
            await self.save_results()
            print(f"\nüéâ Ho√†n th√†nh! ƒê√£ t√¨m th·∫•y {len(self.files_data)} file")
        else:
            print("\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file n√†o trong channel n√†y")
    
    async def check_channel_permissions(self, entity):
        """Ki·ªÉm tra quy·ªÅn truy c·∫≠p chi ti·∫øt"""
        try:
            # L·∫•y th√¥ng tin channel
            full_channel = await self.client.get_entity(entity)
            print(f"üìä Channel: {getattr(full_channel, 'title', 'Unknown')}")
            
            # Ki·ªÉm tra quy·ªÅn ƒë·ªçc tin nh·∫Øn
            await self.client.get_messages(entity, limit=1)
            print("‚úÖ C√≥ quy·ªÅn ƒë·ªçc tin nh·∫Øn")
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng tin nh·∫Øn
            total = 0
            async for _ in self.client.iter_messages(entity, limit=10):
                total += 1
                
            if total > 0:
                print(f"‚úÖ C√≥ th·ªÉ truy c·∫≠p tin nh·∫Øn (test: {total}/10)")
            else:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tin nh·∫Øn n√†o")
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra quy·ªÅn: {e}")
    
    async def scan_channel_by_entity(self, entity):
        """Qu√©t channel b·∫±ng entity ƒë√£ c√≥"""
        print(f"üì° B·∫Øt ƒë·∫ßu qu√©t channel: {getattr(entity, 'title', 'Unknown')}")
        print(f"üìä ƒêang ƒë·∫øm t·ªïng s·ªë tin nh·∫Øn...")
        
        # ƒê·∫øm t·ªïng s·ªë tin nh·∫Øn
        total_messages = 0
        try:
            async for _ in self.client.iter_messages(entity, limit=config.MAX_MESSAGES):
                total_messages += 1
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ƒë·∫øm tin nh·∫Øn: {e}")
            return
            
        print(f"üìù T·ªïng s·ªë tin nh·∫Øn: {total_messages:,}")
        
        if total_messages == 0:
            print("‚ùå Kh√¥ng c√≥ tin nh·∫Øn n√†o ƒë·ªÉ qu√©t")
            return
            
        print(f"üîç B·∫Øt ƒë·∫ßu qu√©t file...")
        
        # Qu√©t c√°c tin nh·∫Øn v√† t√¨m file
        from tqdm.asyncio import tqdm
        progress_bar = tqdm(total=total_messages, desc="ƒêang qu√©t")
        
        try:
            async for message in self.client.iter_messages(entity, limit=config.MAX_MESSAGES):
                file_info = self.extract_file_info(message)
                
                if file_info and self.should_include_file_type(file_info['file_type']):
                    self.files_data.append(file_info)
                    
                progress_bar.update(1)
                
        except Exception as e:
            print(f"\n‚ö†Ô∏è L·ªói trong qu√° tr√¨nh qu√©t: {e}")
        finally:
            progress_bar.close()
            
        print(f"‚úÖ Ho√†n th√†nh! T√¨m th·∫•y {len(self.files_data)} file")

async def main():
    """Main function cho private channel scanner"""
    scanner = PrivateChannelScanner()
    
    try:
        await scanner.scan_private_channel_interactive()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await scanner.close()

if __name__ == "__main__":
    import config

    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

    asyncio.run(main())
