#!/usr/bin/env python3
"""
Main Scanner - Qu√©t file trong k√™nh Telegram v·ªõi logging chi ti·∫øt
H·ªó tr·ª£ c·∫£ public v√† private channel
"""

import asyncio
import json
import pandas as pd
from datetime import datetime
from typing import Dict, Optional
from pathlib import Path

from telethon import TelegramClient
from telethon.tl.types import (
    MessageMediaDocument, MessageMediaPhoto,
    DocumentAttributeFilename, DocumentAttributeVideo,
    DocumentAttributeAudio, DocumentAttributeSticker,
    DocumentAttributeAnimated
)
from tqdm.asyncio import tqdm
import aiofiles

import config

# Import detailed logging
try:
    from logger import log_step, log_api_call, log_file_operation, log_progress, log_error, get_logger
    DETAILED_LOGGING_AVAILABLE = True
    logger = get_logger('engine')
except ImportError:
    DETAILED_LOGGING_AVAILABLE = False
    import logging
    logger = logging.getLogger(__name__)

class TelegramFileScanner:
    def __init__(self):
        self.client = None
        self.files_data = []
        self.output_dir = Path(config.OUTPUT_DIR)
        self.output_dir.mkdir(exist_ok=True)
        
    async def initialize(self):
        """Kh·ªüi t·∫°o Telegram client"""
        if DETAILED_LOGGING_AVAILABLE:
            log_step("KH·ªûI T·∫†O CLIENT", "B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o Telegram client")

        # Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
        if not config.PHONE_NUMBER or config.PHONE_NUMBER == '+84xxxxxxxxx':
            error_msg = "CHUA CAU HINH PHONE_NUMBER trong config"
            if DETAILED_LOGGING_AVAILABLE:
                log_step("VALIDATION ERROR", error_msg, "ERROR")
            raise ValueError(error_msg)

        try:
            if DETAILED_LOGGING_AVAILABLE:
                log_step("T·∫†O CLIENT", f"API_ID: {config.API_ID}, Session: {config.SESSION_NAME}")

            self.client = TelegramClient(
                config.SESSION_NAME,
                int(config.API_ID),
                config.API_HASH
            )

            if DETAILED_LOGGING_AVAILABLE:
                log_step("ƒêƒÇNG NH·∫¨P", f"ƒêƒÉng nh·∫≠p v·ªõi s·ªë: {config.PHONE_NUMBER}")
                log_api_call("client.start", {"phone": config.PHONE_NUMBER})

            await self.client.start(phone=config.PHONE_NUMBER)

            print("Da ket noi thanh cong voi Telegram!")
            if DETAILED_LOGGING_AVAILABLE:
                log_step("KH·ªûI T·∫†O TH√ÄNH C√îNG", "ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Telegram")

        except ValueError as e:
            if "invalid literal for int()" in str(e):
                error_msg = "API_ID phai la so nguyen, khong phai text"
                if DETAILED_LOGGING_AVAILABLE:
                    log_error(e, "API_ID validation")
                raise ValueError(error_msg)
            if DETAILED_LOGGING_AVAILABLE:
                log_error(e, "Client initialization")
            raise e
        except Exception as e:
            if DETAILED_LOGGING_AVAILABLE:
                log_error(e, "Client initialization - unexpected error")
            raise e
        
    async def get_channel_entity(self, channel_input: str):
        """L·∫•y entity c·ªßa k√™nh t·ª´ username ho·∫∑c invite link"""
        try:
            # X·ª≠ l√Ω invite link cho private channel
            if 'joinchat' in channel_input or '+' in channel_input:
                print("üîê Ph√°t hi·ªán private channel invite link")
                entity = await self.client.get_entity(channel_input)
                return entity

            # X·ª≠ l√Ω username ho·∫∑c public link
            if channel_input.startswith('https://t.me/'):
                channel_input = channel_input.replace('https://t.me/', '')
                # X·ª≠ l√Ω private channel link v·ªõi +
                if channel_input.startswith('+'):
                    entity = await self.client.get_entity(channel_input)
                    return entity

            if channel_input.startswith('@'):
                channel_input = channel_input[1:]

            entity = await self.client.get_entity(channel_input)

            # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
            try:
                # Th·ª≠ l·∫•y th√¥ng tin c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra quy·ªÅn
                await self.client.get_messages(entity, limit=1)
                print(f"‚úÖ C√≥ quy·ªÅn truy c·∫≠p k√™nh: {getattr(entity, 'title', 'Unknown')}")
            except Exception as access_error:
                print(f"‚ö†Ô∏è C·∫£nh b√°o quy·ªÅn truy c·∫≠p: {access_error}")
                print("üí° ƒê·∫£m b·∫£o b·∫°n l√† th√†nh vi√™n c·ªßa k√™nh private n√†y")

            return entity

        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ truy c·∫≠p k√™nh '{channel_input}': {e}")
            print("üí° G·ª£i √Ω:")
            print("   - ƒê·ªëi v·ªõi public channel: @channelname ho·∫∑c https://t.me/channelname")
            print("   - ƒê·ªëi v·ªõi private channel: https://t.me/joinchat/xxxxx ho·∫∑c https://t.me/+xxxxx")
            print("   - ƒê·∫£m b·∫£o b·∫°n ƒë√£ join k√™nh private tr∆∞·ªõc")
            return None
            
    def extract_file_info(self, message) -> Optional[Dict]:
        """Tr√≠ch xu·∫•t th√¥ng tin file t·ª´ message"""
        if not message.media:
            return None
            
        file_info = {
            'message_id': message.id,
            'date': message.date.isoformat(),
            'file_type': None,
            'file_name': None,
            'file_size': None,
            'mime_type': None,
            'duration': None,
            'width': None,
            'height': None,
            'download_link': None,
            'message_text': message.text or '',
            'sender_id': getattr(message.sender, 'id', None) if message.sender else None
        }
        
        # X·ª≠ l√Ω Document (files, videos, audio, etc.)
        if isinstance(message.media, MessageMediaDocument):
            doc = message.media.document
            file_info['file_size'] = doc.size
            file_info['mime_type'] = doc.mime_type
            
            # L·∫•y t√™n file v√† c√°c thu·ªôc t√≠nh
            for attr in doc.attributes:
                if isinstance(attr, DocumentAttributeFilename):
                    file_info['file_name'] = attr.file_name
                    file_info['file_type'] = 'document'
                elif isinstance(attr, DocumentAttributeVideo):
                    file_info['file_type'] = 'video'
                    file_info['duration'] = attr.duration
                    file_info['width'] = attr.w
                    file_info['height'] = attr.h
                elif isinstance(attr, DocumentAttributeAudio):
                    file_info['file_type'] = 'audio'
                    file_info['duration'] = attr.duration
                    if attr.voice:
                        file_info['file_type'] = 'voice'
                elif isinstance(attr, DocumentAttributeSticker):
                    file_info['file_type'] = 'sticker'
                elif isinstance(attr, DocumentAttributeAnimated):
                    file_info['file_type'] = 'animation'
                    
            # N·∫øu kh√¥ng c√≥ t√™n file, t·∫°o t√™n m·∫∑c ƒë·ªãnh
            if not file_info['file_name']:
                ext = self.get_extension_from_mime(file_info['mime_type'])
                file_info['file_name'] = f"file_{message.id}{ext}"
                
        # X·ª≠ l√Ω Photo
        elif isinstance(message.media, MessageMediaPhoto):
            photo = message.media.photo
            file_info['file_type'] = 'photo'
            file_info['file_name'] = f"photo_{message.id}.jpg"
            if photo.sizes:
                largest_size = max(photo.sizes, key=lambda x: getattr(x, 'size', 0))
                file_info['file_size'] = getattr(largest_size, 'size', None)
                file_info['width'] = getattr(largest_size, 'w', None)
                file_info['height'] = getattr(largest_size, 'h', None)
                
        # T·∫°o download link n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if config.GENERATE_DOWNLOAD_LINKS and file_info['file_type']:
            # T·∫°o link download ph√π h·ª£p cho c·∫£ public v√† private channel
            if hasattr(message.chat, 'username') and message.chat.username:
                # Public channel
                file_info['download_link'] = f"https://t.me/{message.chat.username}/{message.id}"
            else:
                # Private channel ho·∫∑c group - s·ª≠ d·ª•ng chat_id
                chat_id = message.chat.id
                if str(chat_id).startswith('-100'):
                    # Supergroup/Channel
                    clean_id = str(chat_id)[4:]  # Remove -100 prefix
                    file_info['download_link'] = f"https://t.me/c/{clean_id}/{message.id}"
                else:
                    # Fallback
                    file_info['download_link'] = f"tg://openmessage?chat_id={chat_id}&message_id={message.id}"
            
        return file_info if file_info['file_type'] else None

    async def join_private_channel(self, invite_link: str):
        """Join private channel t·ª´ invite link"""
        try:
            print(f"üîó ƒêang join private channel t·ª´ link: {invite_link}")

            # L·∫•y hash t·ª´ link
            if 'joinchat' in invite_link:
                hash_part = invite_link.split('joinchat/')[-1]
            elif '+' in invite_link:
                hash_part = invite_link.split('+')[-1]
            else:
                print("‚ùå Link kh√¥ng h·ª£p l·ªá")
                return False

            # Import functions
            from telethon import functions

            # Join channel
            await self.client(functions.messages.ImportChatInviteRequest(
                hash=hash_part
            ))

            print("‚úÖ ƒê√£ join private channel th√†nh c√¥ng!")
            return True

        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ join private channel: {e}")
            print("üí° C√≥ th·ªÉ b·∫°n ƒë√£ l√† th√†nh vi√™n ho·∫∑c link ƒë√£ h·∫øt h·∫°n")
            return False

    async def check_channel_permissions(self, entity):
        """Ki·ªÉm tra quy·ªÅn truy c·∫≠p chi ti·∫øt"""
        try:
            # L·∫•y th√¥ng tin channel
            full_channel = await self.client.get_entity(entity)
            print(f"üìä Channel: {getattr(full_channel, 'title', 'Unknown')}")

            # Ki·ªÉm tra quy·ªÅn ƒë·ªçc tin nh·∫Øn
            await self.client.get_messages(entity, limit=1)
            print("‚úÖ C√≥ quy·ªÅn ƒë·ªçc tin nh·∫Øn")

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng tin nh·∫Øn
            total = 0
            async for _ in self.client.iter_messages(entity, limit=10):
                total += 1

            if total > 0:
                print(f"‚úÖ C√≥ th·ªÉ truy c·∫≠p tin nh·∫Øn (test: {total}/10)")
            else:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tin nh·∫Øn n√†o")

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra quy·ªÅn: {e}")

    async def scan_channel_by_entity(self, entity):
        """Qu√©t channel b·∫±ng entity ƒë√£ c√≥"""
        print(f"üì° B·∫Øt ƒë·∫ßu qu√©t channel: {getattr(entity, 'title', 'Unknown')}")
        print(f"üìä ƒêang ƒë·∫øm t·ªïng s·ªë tin nh·∫Øn...")

        # ƒê·∫øm t·ªïng s·ªë tin nh·∫Øn
        total_messages = 0
        try:
            async for _ in self.client.iter_messages(entity, limit=config.MAX_MESSAGES):
                total_messages += 1
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ƒë·∫øm tin nh·∫Øn: {e}")
            return

        print(f"üìù T·ªïng s·ªë tin nh·∫Øn: {total_messages:,}")

        if total_messages == 0:
            print("‚ùå Kh√¥ng c√≥ tin nh·∫Øn n√†o ƒë·ªÉ qu√©t")
            return

        print(f"üîç B·∫Øt ƒë·∫ßu qu√©t file...")

        # Qu√©t c√°c tin nh·∫Øn v√† t√¨m file
        progress_bar = tqdm(total=total_messages, desc="ƒêang qu√©t")

        try:
            async for message in self.client.iter_messages(entity, limit=config.MAX_MESSAGES):
                file_info = self.extract_file_info(message)

                if file_info and self.should_include_file_type(file_info['file_type']):
                    self.files_data.append(file_info)

                progress_bar.update(1)

        except Exception as e:
            print(f"\n‚ö†Ô∏è L·ªói trong qu√° tr√¨nh qu√©t: {e}")
        finally:
            progress_bar.close()

        print(f"‚úÖ Ho√†n th√†nh! T√¨m th·∫•y {len(self.files_data)} file")

    async def scan_private_channel_interactive(self):
        """Qu√©t private channel v·ªõi giao di·ªán t∆∞∆°ng t√°c"""
        print("\nüîß ƒêang kh·ªüi t·∫°o k·∫øt n·ªëi Telegram...")
        await self.initialize()
        print("‚úÖ K·∫øt n·ªëi Telegram ƒë√£ s·∫µn s√†ng")

        print("\nüìã Ch·ªçn c√°ch truy c·∫≠p private channel:")
        print("   1. T√¥i ƒë√£ l√† th√†nh vi√™n (nh·∫≠p username ho·∫∑c link)")
        print("   2. Join t·ª´ invite link")

        choice = input("\nüëâ L·ª±a ch·ªçn (1/2): ").strip()
        print(f"üìù B·∫°n ƒë√£ ch·ªçn: {choice}")

        if choice == "2":
            print("\nüîó Ch·∫ø ƒë·ªô: Join t·ª´ invite link")
            invite_link = input("üëâ Nh·∫≠p invite link (https://t.me/joinchat/xxx ho·∫∑c https://t.me/+xxx): ").strip()
            if not invite_link:
                print("‚ùå Link kh√¥ng h·ª£p l·ªá!")
                return

            print(f"üîó ƒêang x·ª≠ l√Ω link: {invite_link}")
            success = await self.join_private_channel(invite_link)
            if not success:
                print("‚ùå Kh√¥ng th·ªÉ join channel")
                return

            print("üîç ƒêang l·∫•y th√¥ng tin channel sau khi join...")
            # Sau khi join, l·∫•y entity
            entity = await self.get_channel_entity(invite_link)

        else:
            print("\nüë§ Ch·∫ø ƒë·ªô: ƒê√£ l√† th√†nh vi√™n")
            channel_input = input("üëâ Nh·∫≠p username ho·∫∑c link channel: ").strip()
            if not channel_input:
                print("‚ùå Vui l√≤ng nh·∫≠p th√¥ng tin channel!")
                return

            print(f"üîç ƒêang t√¨m channel: {channel_input}")
            entity = await self.get_channel_entity(channel_input)

        if not entity:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin channel")
            return

        print("‚úÖ ƒê√£ l·∫•y th√¥ng tin channel th√†nh c√¥ng")

        # Ki·ªÉm tra quy·ªÅn truy c·∫≠p chi ti·∫øt
        print("\nüîê ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p...")
        await self.check_channel_permissions(entity)

        # Qu√©t channel
        print("\nüîç B·∫Øt ƒë·∫ßu qu√©t channel...")
        await self.scan_channel_by_entity(entity)

        if self.files_data:
            print(f"\nüíæ ƒêang l∆∞u k·∫øt qu·∫£ ({len(self.files_data)} file)...")
            await self.save_results()
            print(f"üéâ Ho√†n th√†nh! ƒê√£ t√¨m th·∫•y v√† l∆∞u {len(self.files_data)} file")
            print("üìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c 'output/'")
        else:
            print("\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file n√†o trong channel n√†y")

    def get_extension_from_mime(self, mime_type: str) -> str:
        """L·∫•y extension t·ª´ MIME type"""
        mime_map = {
            'image/jpeg': '.jpg',
            'image/png': '.png',
            'image/gif': '.gif',
            'video/mp4': '.mp4',
            'video/avi': '.avi',
            'audio/mpeg': '.mp3',
            'audio/ogg': '.ogg',
            'application/pdf': '.pdf',
            'application/zip': '.zip',
            'text/plain': '.txt'
        }
        return mime_map.get(mime_type, '')
        
    def should_include_file_type(self, file_type: str) -> bool:
        """Ki·ªÉm tra c√≥ n√™n include file type n√†y kh√¥ng"""
        type_config = {
            'document': config.SCAN_DOCUMENTS,
            'photo': config.SCAN_PHOTOS,
            'video': config.SCAN_VIDEOS,
            'audio': config.SCAN_AUDIO,
            'voice': config.SCAN_VOICE,
            'sticker': config.SCAN_STICKERS,
            'animation': config.SCAN_ANIMATIONS
        }
        return type_config.get(file_type, True)
        
    async def scan_channel(self, channel_input: str):
        """Qu√©t t·∫•t c·∫£ file trong k√™nh"""
        if DETAILED_LOGGING_AVAILABLE:
            log_step("B·∫ÆT ƒê·∫¶U QU√âT", f"K√™nh: {channel_input}")

        entity = await self.get_channel_entity(channel_input)
        if not entity:
            if DETAILED_LOGGING_AVAILABLE:
                log_step("L·ªñI ENTITY", "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin k√™nh", "ERROR")
            return

        print(f"üì° B·∫Øt ƒë·∫ßu qu√©t k√™nh: {entity.title}")
        if DETAILED_LOGGING_AVAILABLE:
            log_step("TH√îNG TIN K√äNH", f"T√™n: {entity.title}, ID: {entity.id}")

        print(f"üìä ƒêang ƒë·∫øm t·ªïng s·ªë tin nh·∫Øn...")
        if DETAILED_LOGGING_AVAILABLE:
            log_step("ƒê·∫æM TIN NH·∫ÆN", "B·∫Øt ƒë·∫ßu ƒë·∫øm t·ªïng s·ªë tin nh·∫Øn")

        # ƒê·∫øm t·ªïng s·ªë tin nh·∫Øn
        total_messages = 0
        async for _ in self.client.iter_messages(entity, limit=config.MAX_MESSAGES):
            total_messages += 1

        print(f"üìù T·ªïng s·ªë tin nh·∫Øn: {total_messages:,}")
        if DETAILED_LOGGING_AVAILABLE:
            log_step("T·ªîNG TIN NH·∫ÆN", f"T√¨m th·∫•y {total_messages:,} tin nh·∫Øn")
            log_api_call("iter_messages", {"entity": entity.title, "limit": config.MAX_MESSAGES}, f"{total_messages} messages")

        print(f"üîç B·∫Øt ƒë·∫ßu qu√©t file...")
        if DETAILED_LOGGING_AVAILABLE:
            log_step("B·∫ÆT ƒê·∫¶U QU√âT FILE", f"Qu√©t {total_messages:,} tin nh·∫Øn ƒë·ªÉ t√¨m file")

        # Qu√©t c√°c tin nh·∫Øn v√† t√¨m file
        progress_bar = tqdm(total=total_messages, desc="ƒêang qu√©t")
        processed_count = 0

        async for message in self.client.iter_messages(entity, limit=config.MAX_MESSAGES):
            file_info = self.extract_file_info(message)

            if file_info and self.should_include_file_type(file_info['file_type']):
                self.files_data.append(file_info)
                if DETAILED_LOGGING_AVAILABLE and len(self.files_data) % 10 == 0:
                    log_progress(len(self.files_data), total_messages, "files found")

            processed_count += 1
            progress_bar.update(1)

        progress_bar.close()

        print(f"‚úÖ Ho√†n th√†nh! T√¨m th·∫•y {len(self.files_data)} file")
        if DETAILED_LOGGING_AVAILABLE:
            log_step("HO√ÄN TH√ÄNH QU√âT", f"ƒê√£ qu√©t {processed_count:,} tin nh·∫Øn, t√¨m th·∫•y {len(self.files_data)} file")
        
    async def save_results(self):
        """L∆∞u k·∫øt qu·∫£ ra c√°c file"""
        if DETAILED_LOGGING_AVAILABLE:
            log_step("B·∫ÆT ƒê·∫¶U L∆ØU K·∫æT QU·∫¢", f"C√≥ {len(self.files_data)} file ƒë·ªÉ l∆∞u")

        if not self.files_data:
            print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u")
            if DETAILED_LOGGING_AVAILABLE:
                log_step("KH√îNG C√ì D·ªÆ LI·ªÜU", "Kh√¥ng c√≥ file n√†o ƒë·ªÉ l∆∞u", "WARNING")
            return

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        if DETAILED_LOGGING_AVAILABLE:
            log_step("CHU·∫®N B·ªä L∆ØU", f"Timestamp: {timestamp}")

        # L∆∞u CSV
        csv_path = self.output_dir / f"{timestamp}_{config.CSV_FILENAME}"
        df = pd.DataFrame(self.files_data)
        df.to_csv(csv_path, index=False, encoding='utf-8-sig')
        print(f"üíæ ƒê√£ l∆∞u CSV: {csv_path}")
        if DETAILED_LOGGING_AVAILABLE:
            log_file_operation("SAVE", str(csv_path), f"CSV v·ªõi {len(self.files_data)} records")

        # L∆∞u Excel
        excel_path = self.output_dir / f"{timestamp}_{config.EXCEL_FILENAME}"
        df.to_excel(excel_path, index=False, engine='openpyxl')
        print(f"üíæ ƒê√£ l∆∞u Excel: {excel_path}")
        if DETAILED_LOGGING_AVAILABLE:
            log_file_operation("SAVE", str(excel_path), f"Excel v·ªõi {len(self.files_data)} records")

        # T·∫°o JSON v·ªõi format t·ªëi ∆∞u cho file v√† link
        json_data = {
            "scan_info": {
                "timestamp": timestamp,
                "total_files": len(self.files_data),
                "scan_date": datetime.now().isoformat()
            },
            "files": []
        }

        # Format l·∫°i data cho JSON v·ªõi focus v√†o t√™n file v√† link
        for file_data in self.files_data:
            json_file = {
                "file_name": file_data['file_name'],
                "download_link": file_data['download_link'],
                "file_info": {
                    "type": file_data['file_type'],
                    "size": file_data['file_size'],
                    "size_formatted": self.format_size(file_data['file_size']) if file_data['file_size'] else "N/A",
                    "mime_type": file_data['mime_type'],
                    "upload_date": file_data['date']
                },
                "message_info": {
                    "message_id": file_data['message_id'],
                    "message_text": file_data['message_text'],
                    "sender_id": file_data['sender_id']
                }
            }

            # Th√™m th√¥ng tin media n·∫øu c√≥
            if file_data['duration']:
                json_file['file_info']['duration'] = file_data['duration']
            if file_data['width'] and file_data['height']:
                json_file['file_info']['dimensions'] = {
                    "width": file_data['width'],
                    "height": file_data['height']
                }

            json_data["files"].append(json_file)

        # L∆∞u JSON
        json_path = self.output_dir / f"{timestamp}_{config.JSON_FILENAME}"
        async with aiofiles.open(json_path, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(json_data, ensure_ascii=False, indent=2))
        print(f"üíæ ƒê√£ l∆∞u JSON: {json_path}")
        if DETAILED_LOGGING_AVAILABLE:
            log_file_operation("SAVE", str(json_path), f"JSON chi ti·∫øt v·ªõi {len(self.files_data)} files")

        # L∆∞u JSON ƒë∆°n gi·∫£n ch·ªâ t√™n file v√† link
        simple_json_data = [
            {
                "file_name": file_data['file_name'],
                "download_link": file_data['download_link'],
                "file_size": self.format_size(file_data['file_size']) if file_data['file_size'] else "N/A",
                "file_type": file_data['file_type']
            }
            for file_data in self.files_data
        ]

        simple_json_path = self.output_dir / f"{timestamp}_simple_files.json"
        async with aiofiles.open(simple_json_path, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(simple_json_data, ensure_ascii=False, indent=2))
        print(f"üíæ ƒê√£ l∆∞u JSON ƒë∆°n gi·∫£n: {simple_json_path}")
        if DETAILED_LOGGING_AVAILABLE:
            log_file_operation("SAVE", str(simple_json_path), f"JSON ƒë∆°n gi·∫£n v·ªõi {len(self.files_data)} files")

        # Th·ªëng k√™
        self.print_statistics()

        if DETAILED_LOGGING_AVAILABLE:
            log_step("HO√ÄN TH√ÄNH L∆ØU K·∫æT QU·∫¢", f"ƒê√£ l∆∞u th√†nh c√¥ng {len(self.files_data)} files v√†o 4 ƒë·ªãnh d·∫°ng")
        
    def print_statistics(self):
        """In th·ªëng k√™"""
        if not self.files_data:
            return
            
        df = pd.DataFrame(self.files_data)
        
        print("\nüìä TH·ªêNG K√ä:")
        print(f"T·ªïng s·ªë file: {len(self.files_data):,}")
        
        # Th·ªëng k√™ theo lo·∫°i file
        type_counts = df['file_type'].value_counts()
        print("\nPh√¢n lo·∫°i theo type:")
        for file_type, count in type_counts.items():
            print(f"  {file_type}: {count:,}")
            
        # Th·ªëng k√™ k√≠ch th∆∞·ªõc
        total_size = df['file_size'].sum()
        if total_size > 0:
            print(f"\nT·ªïng k√≠ch th∆∞·ªõc: {self.format_size(total_size)}")
            print(f"K√≠ch th∆∞·ªõc trung b√¨nh: {self.format_size(df['file_size'].mean())}")
            
    def format_size(self, size_bytes: float) -> str:
        """Format k√≠ch th∆∞·ªõc file"""
        if pd.isna(size_bytes):
            return "N/A"
            
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} PB"
        
    async def close(self):
        """ƒê√≥ng k·∫øt n·ªëi"""
        if self.client:
            await self.client.disconnect()

async def main():
    scanner = TelegramFileScanner()
    
    try:
        await scanner.initialize()
        
        # Nh·∫≠p th√¥ng tin k√™nh
        channel_input = input("Nh·∫≠p username k√™nh (v√≠ d·ª•: @channelname) ho·∫∑c link: ").strip()
        if not channel_input:
            print("‚ùå Vui l√≤ng nh·∫≠p username ho·∫∑c link k√™nh")
            return
            
        await scanner.scan_channel(channel_input)
        await scanner.save_results()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
    finally:
        await scanner.close()

if __name__ == "__main__":
    asyncio.run(main())
