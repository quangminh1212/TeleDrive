#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Smart Logger for TeleDrive
Ch·ªâ log nh·ªØng th√¥ng tin c·∫ßn thi·∫øt, b·ªè qua spam logs
"""

import logging
import sys
from datetime import datetime
from typing import Optional

class SmartLogger:
    """Logger th√¥ng minh - ch·ªâ log nh·ªØng g√¨ c·∫ßn thi·∫øt"""
    
    def __init__(self, name: str = "teledrive", level: str = "INFO"):
        self.name = name
        self.level = level
        self._setup_logger()
        
        # Danh s√°ch c√°c message c·∫ßn b·ªè qua
        self.ignore_patterns = [
            "GET /static/",
            "POST /static/",
            "favicon.ico",
            "127.0.0.1",
            "localhost",
            "werkzeug",
            "urllib3",
            "requests",
            "asyncio",
            "telethon.network",
            "telethon.client",
            "Connection pool is full",
            "Starting new HTTP connection",
            "Resetting dropped connection",
        ]
        
        # Ch·ªâ log nh·ªØng event quan tr·ªçng
        self.important_events = [
            "login",
            "logout", 
            "admin",
            "error",
            "exception",
            "failed",
            "success",
            "started",
            "stopped",
            "connected",
            "disconnected",
            "scan",
            "download",
            "upload",
            "delete",
            "create",
            "update"
        ]
    
    def _setup_logger(self):
        """Setup logger v·ªõi format ƒë·∫πp"""
        self.logger = logging.getLogger(self.name)
        self.logger.setLevel(getattr(logging, self.level.upper()))
        
        # X√≥a handlers c≈©
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)
        
        # T·∫°o handler m·ªõi
        handler = logging.StreamHandler(sys.stdout)
        
        # Format ƒë·∫πp v√† ng·∫Øn g·ªçn
        formatter = logging.Formatter(
            '%(asctime)s [%(levelname)s] %(message)s',
            datefmt='%H:%M:%S'
        )
        handler.setFormatter(formatter)
        
        self.logger.addHandler(handler)
        self.logger.propagate = False
    
    def _should_log(self, message: str) -> bool:
        """Ki·ªÉm tra xem c√≥ n√™n log message n√†y kh√¥ng"""
        message_lower = message.lower()
        
        # B·ªè qua c√°c pattern kh√¥ng c·∫ßn thi·∫øt
        for pattern in self.ignore_patterns:
            if pattern.lower() in message_lower:
                return False
        
        # Ch·ªâ log c√°c event quan tr·ªçng
        for event in self.important_events:
            if event in message_lower:
                return True
        
        # Log c√°c level cao (WARNING, ERROR)
        return True
    
    def info(self, message: str, **kwargs):
        """Log info message n·∫øu c·∫ßn thi·∫øt"""
        if self._should_log(message):
            self.logger.info(message)
    
    def warning(self, message: str, **kwargs):
        """Log warning message"""
        self.logger.warning(message)
    
    def error(self, message: str, **kwargs):
        """Log error message"""
        self.logger.error(message)
    
    def debug(self, message: str, **kwargs):
        """Log debug message n·∫øu c·∫ßn thi·∫øt"""
        if self._should_log(message):
            self.logger.debug(message)
    
    def critical(self, message: str, **kwargs):
        """Log critical message"""
        self.logger.critical(message)

# Global smart logger instance
smart_logger = SmartLogger()

def get_smart_logger(name: Optional[str] = None) -> SmartLogger:
    """Get smart logger instance"""
    if name:
        return SmartLogger(name)
    return smart_logger

def setup_smart_logging():
    """Setup smart logging cho to√†n b·ªô ·ª©ng d·ª•ng"""
    
    # T·∫Øt c√°c logger spam
    spam_loggers = [
        'werkzeug',
        'urllib3.connectionpool',
        'requests.packages.urllib3.connectionpool',
        'telethon.network.mtprotosender',
        'telethon.client.telegramclient',
        'asyncio',
        'concurrent.futures'
    ]
    
    for logger_name in spam_loggers:
        logging.getLogger(logger_name).setLevel(logging.WARNING)
        logging.getLogger(logger_name).disabled = True
    
    # Setup root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    
    # Ch·ªâ gi·ªØ l·∫°i handler c·ªßa smart logger
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    print("‚úÖ Smart logging initialized - ch·ªâ log nh·ªØng g√¨ c·∫ßn thi·∫øt")

def log_important(message: str, level: str = "INFO"):
    """Log message quan tr·ªçng"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    level_colors = {
        "INFO": "üí°",
        "SUCCESS": "‚úÖ", 
        "WARNING": "‚ö†Ô∏è",
        "ERROR": "‚ùå",
        "DEBUG": "üîç"
    }
    
    icon = level_colors.get(level.upper(), "üìù")
    print(f"{timestamp} {icon} {message}")

def log_startup(message: str):
    """Log startup message"""
    log_important(message, "SUCCESS")

def log_error_important(message: str):
    """Log error quan tr·ªçng"""
    log_important(message, "ERROR")

def log_warning_important(message: str):
    """Log warning quan tr·ªçng"""
    log_important(message, "WARNING")

def log_debug_important(message: str):
    """Log debug quan tr·ªçng"""
    log_important(message, "DEBUG")
