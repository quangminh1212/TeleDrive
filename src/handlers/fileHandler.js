const fileManager = require('../utils/fileManager');
const logger = require('../utils/logger');
const { formatSize } = require('../utils/helpers');

// X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c file
exports.handleFileUpload = async (bot, msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        // L·∫•y th√¥ng tin file
        const document = msg.document;
        const fileId = document.file_id;
        const fileName = document.file_name || `file_${Date.now()}`;
        
        // G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
        const processingMsg = await bot.sendMessage(chatId, `‚è≥ ƒêang x·ª≠ l√Ω file "${fileName}"...`);
        
        // L∆∞u file v√†o h·ªá th·ªëng
        const result = await fileManager.saveFile(userId, fileId, bot, fileName, 'document');
        
        // C·∫≠p nh·∫≠t th√¥ng b√°o
        if (result.success) {
            const size = formatSize(result.size);
            await bot.editMessageText(
                `‚úÖ ƒê√£ t·∫£i l√™n file "${fileName}" (${size})`,
                {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                }
            );
            
            // Hi·ªÉn th·ªã c√°c t√πy ch·ªçn cho file
            await bot.sendMessage(chatId, `B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán c√°c thao t√°c v·ªõi file "${fileName}":`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚¨áÔ∏è T·∫£i xu·ªëng', callback_data: `download:${fileName}` },
                            { text: 'üóëÔ∏è X√≥a', callback_data: `delete:${fileName}` }
                        ],
                        [
                            { text: 'üìã Xem danh s√°ch file', callback_data: 'list' }
                        ]
                    ]
                }
            });
        } else {
            await bot.editMessageText(
                `‚ùå L·ªói khi t·∫£i l√™n file: ${result.error}`,
                {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                }
            );
        }
    } catch (error) {
        logger.error(`L·ªói khi x·ª≠ l√Ω file upload cho ng∆∞·ªùi d√πng ${userId}: ${error.message}`);
        await bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i l√™n file. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
};

// X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c ·∫£nh
exports.handlePhotoUpload = async (bot, msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        // L·∫•y ·∫£nh ch·∫•t l∆∞·ª£ng cao nh·∫•t (cu·ªëi c√πng trong m·∫£ng)
        const photos = msg.photo;
        const photo = photos[photos.length - 1];
        const fileId = photo.file_id;
        
        // T·∫°o t√™n file d·ª±a tr√™n th·ªùi gian
        const fileName = `photo_${Date.now()}.jpg`;
        
        // G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
        const processingMsg = await bot.sendMessage(chatId, `‚è≥ ƒêang x·ª≠ l√Ω ·∫£nh "${fileName}"...`);
        
        // L∆∞u ·∫£nh v√†o h·ªá th·ªëng
        const result = await fileManager.saveFile(userId, fileId, bot, fileName, 'photo');
        
        // C·∫≠p nh·∫≠t th√¥ng b√°o
        if (result.success) {
            const size = formatSize(result.size);
            await bot.editMessageText(
                `‚úÖ ƒê√£ t·∫£i l√™n ·∫£nh "${fileName}" (${size})`,
                {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                }
            );
            
            // Hi·ªÉn th·ªã c√°c t√πy ch·ªçn cho file ·∫£nh
            await bot.sendMessage(chatId, `B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán c√°c thao t√°c v·ªõi ·∫£nh "${fileName}":`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚¨áÔ∏è T·∫£i xu·ªëng', callback_data: `download:${fileName}` },
                            { text: 'üóëÔ∏è X√≥a', callback_data: `delete:${fileName}` }
                        ],
                        [
                            { text: 'üìã Xem danh s√°ch file', callback_data: 'list' }
                        ]
                    ]
                }
            });
        } else {
            await bot.editMessageText(
                `‚ùå L·ªói khi t·∫£i l√™n ·∫£nh: ${result.error}`,
                {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                }
            );
        }
    } catch (error) {
        logger.error(`L·ªói khi x·ª≠ l√Ω photo upload cho ng∆∞·ªùi d√πng ${userId}: ${error.message}`);
        await bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i l√™n ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
};

// X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c video
exports.handleVideoUpload = async (bot, msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        // L·∫•y th√¥ng tin video
        const video = msg.video;
        const fileId = video.file_id;
        const fileName = video.file_name || `video_${Date.now()}.mp4`;
        
        // G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
        const processingMsg = await bot.sendMessage(chatId, `‚è≥ ƒêang x·ª≠ l√Ω video "${fileName}"...`);
        
        // L∆∞u video v√†o h·ªá th·ªëng
        const result = await fileManager.saveFile(userId, fileId, bot, fileName, 'video');
        
        // C·∫≠p nh·∫≠t th√¥ng b√°o
        if (result.success) {
            const size = formatSize(result.size);
            await bot.editMessageText(
                `‚úÖ ƒê√£ t·∫£i l√™n video "${fileName}" (${size})`,
                {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                }
            );
            
            // Hi·ªÉn th·ªã c√°c t√πy ch·ªçn cho file video
            await bot.sendMessage(chatId, `B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán c√°c thao t√°c v·ªõi video "${fileName}":`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚¨áÔ∏è T·∫£i xu·ªëng', callback_data: `download:${fileName}` },
                            { text: 'üóëÔ∏è X√≥a', callback_data: `delete:${fileName}` }
                        ],
                        [
                            { text: 'üìã Xem danh s√°ch file', callback_data: 'list' }
                        ]
                    ]
                }
            });
        } else {
            await bot.editMessageText(
                `‚ùå L·ªói khi t·∫£i l√™n video: ${result.error}`,
                {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                }
            );
        }
    } catch (error) {
        logger.error(`L·ªói khi x·ª≠ l√Ω video upload cho ng∆∞·ªùi d√πng ${userId}: ${error.message}`);
        await bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i l√™n video. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
};

// X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c √¢m thanh
exports.handleAudioUpload = async (bot, msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        // L·∫•y th√¥ng tin audio
        const audio = msg.audio;
        const fileId = audio.file_id;
        const fileName = audio.title || audio.file_name || `audio_${Date.now()}.mp3`;
        
        // G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
        const processingMsg = await bot.sendMessage(chatId, `‚è≥ ƒêang x·ª≠ l√Ω √¢m thanh "${fileName}"...`);
        
        // L∆∞u audio v√†o h·ªá th·ªëng
        const result = await fileManager.saveFile(userId, fileId, bot, fileName, 'audio');
        
        // C·∫≠p nh·∫≠t th√¥ng b√°o
        if (result.success) {
            const size = formatSize(result.size);
            await bot.editMessageText(
                `‚úÖ ƒê√£ t·∫£i l√™n √¢m thanh "${fileName}" (${size})`,
                {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                }
            );
            
            // Hi·ªÉn th·ªã c√°c t√πy ch·ªçn cho file audio
            await bot.sendMessage(chatId, `B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán c√°c thao t√°c v·ªõi √¢m thanh "${fileName}":`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚¨áÔ∏è T·∫£i xu·ªëng', callback_data: `download:${fileName}` },
                            { text: 'üóëÔ∏è X√≥a', callback_data: `delete:${fileName}` }
                        ],
                        [
                            { text: 'üìã Xem danh s√°ch file', callback_data: 'list' }
                        ]
                    ]
                }
            });
        } else {
            await bot.editMessageText(
                `‚ùå L·ªói khi t·∫£i l√™n √¢m thanh: ${result.error}`,
                {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                }
            );
        }
    } catch (error) {
        logger.error(`L·ªói khi x·ª≠ l√Ω audio upload cho ng∆∞·ªùi d√πng ${userId}: ${error.message}`);
        await bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i l√™n √¢m thanh. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
};

// X·ª≠ l√Ω t·∫£i file xu·ªëng
exports.handleDownload = async (bot, msg, fileName) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        // L·∫•y th√¥ng tin file
        const fileInfo = fileManager.getFileInfo(userId, fileName);
        
        if (!fileInfo.success) {
            await bot.sendMessage(chatId, `‚ùå L·ªói khi t·∫£i xu·ªëng: ${fileInfo.error}`);
            return;
        }
        
        // L·∫•y file ƒë·ªÉ g·ª≠i
        const fileForSending = fileManager.getFileForSending(userId, fileName);
        
        if (!fileForSending.success) {
            await bot.sendMessage(chatId, `‚ùå L·ªói khi t·∫£i xu·ªëng: ${fileForSending.error}`);
            return;
        }
        
        // G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
        const processingMsg = await bot.sendMessage(chatId, `‚è≥ ƒêang chu·∫©n b·ªã t·∫£i xu·ªëng "${fileName}"...`);
        
        // X√°c ƒë·ªãnh lo·∫°i media ƒë·ªÉ g·ª≠i ph√π h·ª£p
        const mimeType = fileInfo.mimeType || 'application/octet-stream';
        
        if (mimeType.startsWith('image/')) {
            // G·ª≠i d∆∞·ªõi d·∫°ng ·∫£nh n·∫øu l√† file h√¨nh ·∫£nh
            await bot.sendPhoto(chatId, fileForSending.stream, {
                caption: `T√™n file: ${fileName}\nK√≠ch th∆∞·ªõc: ${formatSize(fileInfo.size)}`
            });
        } else if (mimeType.startsWith('video/')) {
            // G·ª≠i d∆∞·ªõi d·∫°ng video n·∫øu l√† file video
            await bot.sendVideo(chatId, fileForSending.stream, {
                caption: `T√™n file: ${fileName}\nK√≠ch th∆∞·ªõc: ${formatSize(fileInfo.size)}`
            });
        } else if (mimeType.startsWith('audio/')) {
            // G·ª≠i d∆∞·ªõi d·∫°ng audio n·∫øu l√† file √¢m thanh
            await bot.sendAudio(chatId, fileForSending.stream, {
                caption: `T√™n file: ${fileName}\nK√≠ch th∆∞·ªõc: ${formatSize(fileInfo.size)}`
            });
        } else {
            // G·ª≠i d∆∞·ªõi d·∫°ng file th√¥ng th∆∞·ªùng cho c√°c lo·∫°i kh√°c
            await bot.sendDocument(chatId, fileForSending.stream, {
                caption: `T√™n file: ${fileName}\nK√≠ch th∆∞·ªõc: ${formatSize(fileInfo.size)}`
            });
        }
        
        // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        await bot.deleteMessage(chatId, processingMsg.message_id);
        
        logger.info(`Ng∆∞·ªùi d√πng ${userId} ƒë√£ t·∫£i xu·ªëng file: ${fileName}`);
    } catch (error) {
        logger.error(`L·ªói khi x·ª≠ l√Ω download cho ng∆∞·ªùi d√πng ${userId}: ${error.message}`);
        await bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i xu·ªëng file. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
};

// X·ª≠ l√Ω xem tr∆∞·ªõc file
exports.handlePreview = async (bot, msg, fileName) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        // L·∫•y th√¥ng tin file
        const fileInfo = fileManager.getFileInfo(userId, fileName);
        
        if (!fileInfo.success) {
            await bot.sendMessage(chatId, `‚ùå L·ªói khi xem tr∆∞·ªõc: ${fileInfo.error}`);
            return;
        }
        
        // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ file
        const createdDate = formatDate(fileInfo.created);
        const modifiedDate = formatDate(fileInfo.modified);
        const size = formatSize(fileInfo.size);
        
        const previewMessage = `
üìÑ *Th√¥ng tin file*

üìù T√™n: ${fileInfo.name}
üíæ K√≠ch th∆∞·ªõc: ${size}
üìÅ Lo·∫°i: ${fileInfo.mimeType}
üìÖ Ng√†y t·∫°o: ${createdDate}
üîÑ S·ª≠a ƒë·ªïi l·∫ßn cu·ªëi: ${modifiedDate}
        `;
        
        // Hi·ªÉn th·ªã c√°c t√πy ch·ªçn cho file
        await bot.sendMessage(chatId, previewMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚¨áÔ∏è T·∫£i xu·ªëng', callback_data: `download:${fileName}` },
                        { text: '‚úèÔ∏è ƒê·ªïi t√™n', callback_data: `rename:${fileName}` },
                        { text: 'üóëÔ∏è X√≥a', callback_data: `delete:${fileName}` }
                    ],
                    [
                        { text: '‚óÄÔ∏è Quay l·∫°i', callback_data: 'list' }
                    ]
                ]
            }
        });
    } catch (error) {
        logger.error(`L·ªói khi x·ª≠ l√Ω preview cho ng∆∞·ªùi d√πng ${userId}: ${error.message}`);
        await bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi xem tr∆∞·ªõc file. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
};

// X·ª≠ l√Ω x√≥a file
exports.handleDelete = async (bot, msg, itemPath) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        // Th·ª±c hi·ªán x√≥a
        const result = fileManager.deleteItem(userId, itemPath);
        
        if (result.success) {
            await bot.sendMessage(chatId, `‚úÖ ƒê√£ x√≥a: ${itemPath}`);
            
            // C·∫≠p nh·∫≠t l·∫°i danh s√°ch file
            const commandHandler = require('./commandHandler');
            commandHandler.handleList(bot, msg);
        } else {
            await bot.sendMessage(chatId, `‚ùå L·ªói khi x√≥a: ${result.error}`);
        }
    } catch (error) {
        logger.error(`L·ªói khi x·ª≠ l√Ω delete cho ng∆∞·ªùi d√πng ${userId}: ${error.message}`);
        await bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x√≥a. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
}; 