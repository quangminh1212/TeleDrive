/**
 * TeleDrive - D·ªãch v·ª• Telegram
 * File n√†y qu·∫£n l√Ω t∆∞∆°ng t√°c v·ªõi Telegram Bot API
 */

const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const config = require('../config/config');

// Bot instance
let bot = null;
let botActive = false;

/**
 * Kh·ªüi t·∫°o v√† k·∫øt n·ªëi ƒë·∫øn Telegram Bot
 * @returns {Object} Bot instance v√† tr·∫°ng th√°i
 */
async function startBot() {
  try {
    console.log('===== KH·ªûI T·∫†O BOT TELEGRAM =====');
    
    // ƒê·∫£m b·∫£o ƒë√£ ƒë·ªçc file .env m·ªõi nh·∫•t
    dotenv.config({ path: path.resolve(process.cwd(), '.env') });
    
    // L·∫•y token bot v√† chat ID t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    const botToken = process.env.BOT_TOKEN || '';
    const chatId = process.env.CHAT_ID || '';
    
    // Ki·ªÉm tra token v√† chat ID
    if (!botToken) {
      console.error('L·ªói: BOT_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
      return { bot: null, botActive: false };
    }
    
    if (!chatId) {
      console.error('L·ªói: CHAT_ID kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
      return { bot: null, botActive: false };
    }
    
    // Hi·ªÉn th·ªã m·ªôt ph·∫ßn token ƒë·ªÉ debug (kh√¥ng hi·ªÉn th·ªã to√†n b·ªô v√¨ l√Ω do b·∫£o m·∫≠t)
    console.log(`Bot Token: ***${botToken.slice(-8)}`);
    console.log(`Chat ID: ${chatId}`);
    
    // T·∫°o instance m·ªõi c·ªßa bot
    bot = new Telegraf(botToken);
    
    // Thi·∫øt l·∫≠p c√°c event handlers
    setupBotHandlers(bot);
    
    // K·∫øt n·ªëi ƒë·∫øn Telegram API
    console.log('ƒêang k·∫øt n·ªëi ƒë·∫øn Telegram API...');
    
    try {
      // Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch l·∫•y th√¥ng tin bot
      const botInfo = await bot.telegram.getMe();
      console.log(`K·∫øt n·ªëi th√†nh c√¥ng. Bot name: ${botInfo.first_name}`);
      
      // Kh·ªüi ƒë·ªông bot
      bot.launch();
      botActive = true;
      
      // Th√¥ng b√°o ƒë√£ kh·ªüi ƒë·ªông bot th√†nh c√¥ng
      try {
        await bot.telegram.sendMessage(chatId, `üöÄ TeleDrive Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông\nüïí ${new Date().toLocaleString('vi-VN')}`);
      } catch (msgError) {
        console.warn('C·∫£nh b√°o: Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ch√†o m·ª´ng', msgError.message);
        // Kh√¥ng d·ª´ng qu√° tr√¨nh kh·ªüi t·∫°o bot n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn ch√†o m·ª´ng
      }
      
      return { bot, botActive: true };
    } catch (error) {
      console.error('L·ªói khi k·∫øt n·ªëi ƒë·∫øn Telegram API:', error.message);
      return { bot: null, botActive: false };
    }
  } catch (error) {
    console.error('L·ªói khi kh·ªüi t·∫°o bot:', error);
    return { bot: null, botActive: false };
  }
}

/**
 * Thi·∫øt l·∫≠p c√°c event handlers cho bot
 * @param {Object} bot Bot instance
 */
function setupBotHandlers(bot) {
  // X·ª≠ l√Ω l·ªánh /start
  bot.command('start', async (ctx) => {
    await ctx.reply('üëã Xin ch√†o! T√¥i l√† TeleDrive Bot. T√¥i gi√∫p l∆∞u tr·ªØ file c·ªßa b·∫°n tr√™n Telegram.');
    await ctx.reply('üëâ S·ª≠ d·ª•ng /help ƒë·ªÉ xem danh s√°ch l·ªánh.');
  });
  
  // X·ª≠ l√Ω l·ªánh /help
  bot.command('help', async (ctx) => {
    const helpText = `
üìö *TeleDrive Bot - Tr·ª£ gi√∫p*

*C√°c l·ªánh c√≥ s·∫µn:*
- /start - Kh·ªüi ƒë·ªông bot
- /help - Hi·ªÉn th·ªã tr·ª£ gi√∫p
- /status - Ki·ªÉm tra tr·∫°ng th√°i
- /count - ƒê·∫øm s·ªë file ƒëang l∆∞u tr·ªØ

‚ÑπÔ∏è Bot n√†y ƒë∆∞·ª£c qu·∫£n l√Ω t·ª± ƒë·ªông b·ªüi TeleDrive.
    `;
    
    await ctx.replyWithMarkdown(helpText);
  });
  
  // X·ª≠ l√Ω l·ªánh /status
  bot.command('status', async (ctx) => {
    await ctx.reply('‚úÖ Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
  });
  
  // X·ª≠ l√Ω l·ªánh /count
  bot.command('count', async (ctx) => {
    try {
      // ƒê·ªçc database files
      const dbPath = path.join(config.STORAGE_PATH, 'db', 'files.json');
      if (!fs.existsSync(dbPath)) {
        return ctx.reply('üìÇ Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c l∆∞u tr·ªØ');
      }
      
      const data = fs.readFileSync(dbPath, 'utf8');
      const files = JSON.parse(data);
      
      if (!Array.isArray(files)) {
        return ctx.reply('üìÇ Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c l∆∞u tr·ªØ');
      }
      
      // ƒê·∫øm s·ªë file ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô
      const syncedFiles = files.filter(file => file.telegramFileId).length;
      
      await ctx.reply(`üìä *Th·ªëng k√™ l∆∞u tr·ªØ*\n\nüìÇ T·ªïng s·ªë file: ${files.length}\n‚úÖ ƒê√£ ƒë·ªìng b·ªô: ${syncedFiles}`, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω l·ªánh count:', error);
      await ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ƒë·∫øm s·ªë file');
    }
  });
  
  // X·ª≠ l√Ω khi tin nh·∫Øn ƒë∆∞·ª£c nh·∫≠n
  bot.on('message', async (ctx) => {
    // B·ªè qua c√°c tin nh·∫Øn kh√¥ng ph·∫£i t·ª´ chatId ƒë√£ c·∫•u h√¨nh
    const chatId = process.env.CHAT_ID;
    if (ctx.chat.id.toString() !== chatId) {
      console.log(`B·ªè qua tin nh·∫Øn t·ª´ chat ID kh√¥ng ƒë∆∞·ª£c ph√©p: ${ctx.chat.id}`);
      return;
    }
    
    const message = ctx.message;
    
    // X·ª≠ l√Ω tin nh·∫Øn c√≥ file ƒë√≠nh k√®m
    if (message.document) {
      await ctx.reply(`üìÅ ƒê√£ nh·∫≠n file: ${message.document.file_name}`);
    } else if (message.photo) {
      await ctx.reply('üñºÔ∏è ƒê√£ nh·∫≠n h√¨nh ·∫£nh');
    } else if (message.video) {
      await ctx.reply('üé• ƒê√£ nh·∫≠n video');
    } else if (message.audio) {
      await ctx.reply('üéµ ƒê√£ nh·∫≠n audio');
    } else if (message.voice) {
      await ctx.reply('üé§ ƒê√£ nh·∫≠n voice message');
    } else {
      // N·∫øu l√† tin nh·∫Øn vƒÉn b·∫£n b√¨nh th∆∞·ªùng (kh√¥ng ph·∫£i l·ªánh)
      if (!message.text.startsWith('/')) {
        await ctx.reply('üëã Xin ch√†o! S·ª≠ d·ª•ng /help ƒë·ªÉ xem danh s√°ch l·ªánh.');
      }
    }
  });
  
  // X·ª≠ l√Ω l·ªói
  bot.catch((err, ctx) => {
    console.error(`L·ªói bot cho ${ctx.updateType}`, err);
  });
}

/**
 * Ki·ªÉm tra xem bot c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
 * @returns {boolean} Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot
 */
function isBotActive() {
  return botActive;
}

/**
 * L·∫•y instance hi·ªán t·∫°i c·ªßa bot
 * @returns {Object} Bot instance
 */
function getBot() {
  return bot;
}

/**
 * ƒê·∫∑t instance m·ªõi cho bot
 * @param {Object} newBot Bot instance m·ªõi
 */
function setBot(newBot) {
  bot = newBot;
}

/**
 * ƒê·∫∑t tr·∫°ng th√°i ho·∫°t ƒë·ªông m·ªõi cho bot
 * @param {boolean} active Tr·∫°ng th√°i ho·∫°t ƒë·ªông m·ªõi
 */
function setBotActive(active) {
  botActive = active;
}

/**
 * Kh·ªüi ƒë·ªông l·∫°i bot
 * @returns {Object} K·∫øt qu·∫£ kh·ªüi ƒë·ªông l·∫°i
 */
async function restartBot() {
  try {
    console.log('===== KH·ªûI ƒê·ªòNG L·∫†I BOT =====');
    
    // D·ª´ng bot hi·ªán t·∫°i n·∫øu ƒëang ho·∫°t ƒë·ªông
    if (bot && botActive) {
      console.log('D·ª´ng bot hi·ªán t·∫°i...');
      await bot.stop();
      bot = null;
      botActive = false;
    }
    
    // Kh·ªüi ƒë·ªông l·∫°i bot
    const result = await startBot();
    return { 
      success: result.botActive, 
      message: result.botActive ? 'Kh·ªüi ƒë·ªông l·∫°i bot th√†nh c√¥ng' : 'Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i bot'
    };
  } catch (error) {
    console.error('L·ªói khi kh·ªüi ƒë·ªông l·∫°i bot:', error);
    return { success: false, error: error.message };
  }
}

/**
 * G·ª≠i file l√™n Telegram
 * @param {string} filePath ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫ßn g·ª≠i
 * @param {string} caption Ch√∫ th√≠ch cho file
 * @returns {Object} K·∫øt qu·∫£ g·ª≠i file
 */
async function sendFileToTelegram(filePath, caption = '') {
  try {
    console.log(`===== G·ª¨I FILE L√äN TELEGRAM =====`);
    console.log(`File path: ${filePath}`);
    
    // Ki·ªÉm tra bot v√† k·∫øt n·ªëi
    if (!bot || !botActive) {
      console.log('Bot kh√¥ng ho·∫°t ƒë·ªông, th·ª≠ kh·ªüi t·∫°o l·∫°i...');
      const result = await startBot();
      if (!result.botActive) {
        return { success: false, error: 'Bot kh√¥ng ho·∫°t ƒë·ªông' };
      }
      bot = result.bot;
      botActive = result.botActive;
    }
    
    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa file
    if (!fs.existsSync(filePath)) {
      return { success: false, error: 'File kh√¥ng t·ªìn t·∫°i' };
    }
    
    // L·∫•y th√¥ng tin file
    const fileName = path.basename(filePath);
    const fileSize = fs.statSync(filePath).size;
    
    // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file (50MB)
    const maxFileSize = config.MAX_FILE_SIZE;
    if (fileSize > maxFileSize) {
      return { success: false, error: `File qu√° l·ªõn (${fileSize} bytes). Gi·ªõi h·∫°n l√† ${maxFileSize} bytes` };
    }
    
    // L·∫•y chat ID t·ª´ config
    const chatId = process.env.CHAT_ID;
    
    if (!chatId) {
      return { success: false, error: 'CHAT_ID kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh' };
    }
    
    console.log(`ƒêang g·ª≠i file ${fileName} (${fileSize} bytes) ƒë·∫øn chat ${chatId}...`);
    
    // S·ªë l·∫ßn th·ª≠ l·∫°i
    const maxRetries = config.TELEGRAM_RETRY_COUNT;
    let retries = 0;
    let lastError = null;
    
    // Th·ª≠ g·ª≠i file v·ªõi s·ªë l·∫ßn th·ª≠ l·∫°i
    while (retries < maxRetries) {
      try {
        // G·ª≠i file l√™n Telegram
        const message = await bot.telegram.sendDocument(
          chatId,
          { source: filePath },
          { caption: caption || fileName }
        );
        
        // L·∫•y file_id t·ª´ k·∫øt qu·∫£
        const fileId = message.document.file_id;
        
        console.log(`G·ª≠i file th√†nh c√¥ng. File ID: ${fileId}`);
        
        // Tr·∫£ v·ªÅ th√¥ng tin file ƒë√£ g·ª≠i
        return {
          success: true,
          fileId: fileId,
          messageId: message.message_id,
          fileInfo: message.document
        };
      } catch (error) {
        lastError = error;
        retries++;
        console.error(`L·∫ßn th·ª≠ ${retries}/${maxRetries} - L·ªói khi g·ª≠i file:`, error.message);
        
        // Ch·ªù m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi th·ª≠ l·∫°i
        if (retries < maxRetries) {
          const delay = config.TELEGRAM_RETRY_DELAY;
          console.log(`Ch·ªù ${delay}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }
    
    // N·∫øu t·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i
    return {
      success: false,
      error: lastError ? lastError.message : 'Kh√¥ng th·ªÉ g·ª≠i file sau nhi·ªÅu l·∫ßn th·ª≠',
      retries: retries
    };
  } catch (error) {
    console.error('L·ªói khi g·ª≠i file l√™n Telegram:', error);
    return { success: false, error: error.message };
  }
}

/**
 * L·∫•y link t·∫£i file t·ª´ Telegram
 * @param {string} fileId ID c·ªßa file tr√™n Telegram
 * @returns {string} Link t·∫£i file
 */
async function getTelegramFileLink(fileId) {
  try {
    console.log(`===== L·∫§Y LINK T·∫¢I FILE T·ª™ TELEGRAM =====`);
    console.log(`File ID: ${fileId}`);
    
    // Ki·ªÉm tra bot v√† k·∫øt n·ªëi
    if (!bot || !botActive) {
      console.log('Bot kh√¥ng ho·∫°t ƒë·ªông, th·ª≠ kh·ªüi t·∫°o l·∫°i...');
      const result = await startBot();
      if (!result.botActive) {
        throw new Error('Bot kh√¥ng ho·∫°t ƒë·ªông');
      }
      bot = result.bot;
      botActive = result.botActive;
    }
    
    // L·∫•y th√¥ng tin file t·ª´ Telegram
    const file = await bot.telegram.getFile(fileId);
    
    // L·∫•y token bot t·ª´ config
    const botToken = process.env.BOT_TOKEN;
    
    if (!botToken) {
      throw new Error('BOT_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
    
    // T·∫°o link t·∫£i file
    const fileLink = `https://api.telegram.org/file/bot${botToken}/${file.file_path}`;
    
    console.log(`Link t·∫£i file: ${fileLink}`);
    
    return fileLink;
  } catch (error) {
    console.error('L·ªói khi l·∫•y link t·∫£i file t·ª´ Telegram:', error);
    throw error;
  }
}

module.exports = {
  startBot,
  isBotActive,
  getBot,
  setBot,
  setBotActive,
  restartBot,
  sendFileToTelegram,
  getTelegramFileLink
}; 