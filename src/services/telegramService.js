/**
 * TeleDrive - Telegram Service
 * D·ªãch v·ª• t∆∞∆°ng t√°c v·ªõi Telegram ƒë·ªÉ l∆∞u tr·ªØ v√† qu·∫£n l√Ω file
 */

const { Telegraf } = require('telegraf');
const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const config = require('../config/config');
const { log, generateId, ensureDirectoryExists } = require('../utils/helpers');
const { message } = require('telegraf/filters');
const fileService = require('./fileService');
const dbService = require('./dbService');
const crypto = require('crypto');

// Ensure temp directories exist
const tempDir = path.join(__dirname, '../../temp');
const uploadsDir = path.join(tempDir, 'uploads');
ensureDirectoryExists(uploadsDir);

// Bi·∫øn tr·∫°ng th√°i
let bot = null;
let isReady = false;
let botStarting = false; // Bi·∫øn c·ªù ƒë·ªÉ theo d√µi khi bot ƒëang kh·ªüi ƒë·ªông
let lastInitTime = 0; // Th·ªùi gian l·∫ßn cu·ªëi kh·ªüi t·∫°o bot th√†nh c√¥ng

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i kh·ªüi t·∫°o g·∫ßn ƒë√¢y
let lastInitFailed = false;
let lastInitAttempt = 0;
const INIT_COOLDOWN = 60000; // 1 ph√∫t gi·ªØa c√°c l·∫ßn th·ª≠ initBot
const TELEGRAM_CONFLICT_WAIT = 10000; // 10 gi√¢y ƒë·ª£i khi xung ƒë·ªôt

/**
 * Kh·ªüi t·∫°o bot Telegram
 * @param {Boolean} force Bu·ªôc kh·ªüi t·∫°o l·∫°i bot
 * @returns {Promise<Boolean>} K·∫øt qu·∫£ kh·ªüi t·∫°o
 */
async function initBot(force = false) {
  // N·∫øu ƒëang c√≥ ti·∫øn tr√¨nh kh·ªüi ƒë·ªông bot, ƒë·ª£i
  if (botStarting) {
    log('Bot ƒëang trong qu√° tr√¨nh kh·ªüi ƒë·ªông, ƒë·ª£i...', 'info');
    // ƒê·ª£i t·ªëi ƒëa 5 gi√¢y
    for (let i = 0; i < 10; i++) {
      await new Promise(resolve => setTimeout(resolve, 500));
      if (!botStarting) {
        return isReady; // Tr·∫£ v·ªÅ tr·∫°ng th√°i hi·ªán t·∫°i
      }
    }
    log('ƒê·ª£i bot kh·ªüi ƒë·ªông qu√° l√¢u', 'warning');
    return false;
  }
  
  try {
    botStarting = true;
    
    // Ki·ªÉm tra xem bot ƒë√£ s·∫µn s√†ng ch∆∞a v√† kh√¥ng bu·ªôc kh·ªüi t·∫°o l·∫°i
    if (!force && bot && isReady) {
      log('Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥ v√† ƒëang ho·∫°t ƒë·ªông', 'info');
      lastInitFailed = false;
      botStarting = false;
      return true;
    }
    
    // Ki·ªÉm tra th·ªùi gian cooldown n·∫øu l·∫ßn kh·ªüi t·∫°o g·∫ßn ƒë√¢y th·∫•t b·∫°i
    const now = Date.now();
    if (lastInitFailed && (now - lastInitAttempt < INIT_COOLDOWN) && !force) {
      log(`Cooldown ƒëang ho·∫°t ƒë·ªông, vui l√≤ng ƒë·ª£i ${Math.ceil((INIT_COOLDOWN - (now - lastInitAttempt)) / 1000)} gi√¢y n·ªØa`, 'warning');
      botStarting = false;
      return false;
    }
    
    // N·∫øu ƒëang c√≥ bot instance, d·ª´ng n√≥ tr∆∞·ªõc
    if (bot) {
      log('D·ª´ng bot hi·ªán t·∫°i tr∆∞·ªõc khi kh·ªüi t·∫°o l·∫°i', 'info');
      try {
        await stopBot(true); // D·ª´ng bot hi·ªán t·∫°i
        // ƒê·ª£i m·ªôt kho·∫£ng th·ªùi gian ƒë·ªÉ Telegram gi·∫£i ph√≥ng t√†i nguy√™n
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error) {
        log(`L·ªói khi d·ª´ng bot hi·ªán t·∫°i: ${error.message}`, 'warning');
      }
    }
    
    // ƒê·∫£m b·∫£o c√°c bi·∫øn tr·∫°ng th√°i ƒë√£ reset
    resetBotStatus();
    
    // C·∫≠p nh·∫≠t th·ªùi gian th·ª≠ kh·ªüi t·∫°o
    lastInitAttempt = now;
    
    // Ki·ªÉm tra c·∫•u h√¨nh
    if (!config.TELEGRAM_BOT_TOKEN) {
      log('Kh√¥ng t√¨m th·∫•y TELEGRAM_BOT_TOKEN trong c·∫•u h√¨nh', 'error');
      lastInitFailed = true;
      botStarting = false;
      return false;
    }
    
    if (!config.TELEGRAM_CHAT_ID) {
      log('Kh√¥ng t√¨m th·∫•y TELEGRAM_CHAT_ID trong c·∫•u h√¨nh', 'error');
      lastInitFailed = true;
      botStarting = false;
      return false;
    }
    
    // Kh·ªüi t·∫°o bot v·ªõi t√πy ch·ªçn ƒë·ªÉ tr√°nh xung ƒë·ªôt
    try {
      bot = new Telegraf(config.TELEGRAM_BOT_TOKEN, {
        telegram: {
          // T·∫Øt webhook ƒë·ªÉ s·ª≠ d·ª•ng long polling
          webhookReply: false
        }
      });
      
      // Thi·∫øt l·∫≠p x·ª≠ l√Ω s·ª± ki·ªán nh·∫≠n file
      setupMessageHandlers();
      
      // L·ªánh ki·ªÉm tra
      bot.command('ping', (ctx) => ctx.reply('Pong!'));
      
      // Kh·ªüi ƒë·ªông bot v·ªõi c∆° ch·∫ø retry
      const maxRetries = 3;
      let retries = 0;
      let success = false;
      
      while (!success && retries < maxRetries) {
        try {
          await bot.launch({
            dropPendingUpdates: true,
            allowedUpdates: ['message', 'callback_query']
          });
          success = true;
        } catch (error) {
          retries++;
          const isConflict = error.message && (
            error.message.includes('409: Conflict') || 
            error.message.includes('terminated by other getUpdates')
          );
          
          if (isConflict) {
            log(`Ph√°t hi·ªán xung ƒë·ªôt bot (l·∫ßn th·ª≠ ${retries}/${maxRetries}), ƒë·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i...`, 'warning');
            // D·ªçn d·∫πp bot hi·ªán t·∫°i
            try {
              bot.stop();
            } catch (e) { /* B·ªè qua l·ªói stop */ }
            
            // ƒê·ª£i th·ªùi gian d√†i h∆°n sau m·ªói l·∫ßn th·ª≠
            const waitTime = TELEGRAM_CONFLICT_WAIT * retries;
            log(`ƒê·ª£i ${waitTime/1000} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`, 'info');
            await new Promise(resolve => setTimeout(resolve, waitTime));
            
            // T·∫°o l·∫°i bot instance
            bot = new Telegraf(config.TELEGRAM_BOT_TOKEN, {
              telegram: {
                webhookReply: false
              }
            });
            
            // Thi·∫øt l·∫≠p handlers l·∫°i
            setupMessageHandlers();
            bot.command('ping', (ctx) => ctx.reply('Pong!'));
          } else {
            log(`L·ªói kh√¥ng ph·∫£i xung ƒë·ªôt khi kh·ªüi t·∫°o bot: ${error.message}`, 'error');
            throw error; // N·∫øu kh√¥ng ph·∫£i l·ªói xung ƒë·ªôt, throw l·ªói
          }
        }
      }
      
      if (!success) {
        throw new Error(`Kh√¥ng th·ªÉ kh·ªüi t·∫°o bot sau ${maxRetries} l·∫ßn th·ª≠`);
      }
      
      isReady = true;
      lastInitTime = Date.now();
      lastInitFailed = false;
      
      log('Kh·ªüi t·∫°o bot Telegram th√†nh c√¥ng', 'info');
      return true;
    } catch (error) {
      log(`L·ªói kh·ªüi t·∫°o bot Telegram: ${error.message}`, 'error');
      // Reset bot state n·∫øu c√≥ l·ªói
      resetBotStatus();
      lastInitFailed = true;
      return false;
    } finally {
      botStarting = false;
    }
  } catch (outerError) {
    log(`L·ªói ngo·∫°i l·ªá khi kh·ªüi t·∫°o bot: ${outerError.message}`, 'error');
    botStarting = false;
    return false;
  }
}

/**
 * D·ª´ng bot Telegram
 * @param {Boolean} force Bu·ªôc d·ª´ng ngay c·∫£ khi c√≥ l·ªói
 * @returns {Promise<Boolean>} K·∫øt qu·∫£ d·ª´ng bot
 */
async function stopBot(force = false) {
  try {
    if (!bot) {
      log('Bot ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, kh√¥ng c·∫ßn d·ª´ng', 'warning');
      return true;
    }
    
    // G·ªçi h√†m d·ª´ng bot
    await bot.stop();
    
    // Reset tr·∫°ng th√°i
    resetBotStatus();
    
    log('D·ª´ng bot Telegram th√†nh c√¥ng', 'info');
    return true;
  } catch (error) {
    log(`L·ªói khi d·ª´ng bot Telegram: ${error.message}`, 'error');
    
    // N·∫øu force = true, v·∫´n reset tr·∫°ng th√°i k·ªÉ c·∫£ khi c√≥ l·ªói
    if (force) {
      resetBotStatus();
      return true;
    }
    
    return false;
  }
}

/**
 * Ki·ªÉm tra xem bot c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
 * @returns {Boolean} Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot
 */
function isBotActive() {
  return bot !== null && isReady;
}

/**
 * Set up message handlers for the bot
 */
const setupMessageHandlers = () => {
  if (!bot) return;
  
  // X·ª≠ l√Ω l·ªánh /start
  bot.start((ctx) => {
    try {
      const startPayload = ctx.startPayload; // L·∫•y d·ªØ li·ªáu sau l·ªánh /start
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu x√°c th·ª±c kh√¥ng
      if (startPayload && startPayload.startsWith('auth_')) {
        const authCode = startPayload.replace('auth_', '');
        handleAuth(ctx, authCode);
      } else {
        ctx.reply('üëã Xin ch√†o! T√¥i l√† bot l∆∞u tr·ªØ file c·ªßa TeleDrive.\n\n‚úÖ S·ª≠ d·ª•ng l·ªánh /auth <m√£ x√°c th·ª±c> ƒë·ªÉ k·∫øt n·ªëi v·ªõi ·ª©ng d·ª•ng web TeleDrive.\nüìÅ Ho·∫∑c g·ª≠i file cho t√¥i ƒë·ªÉ l∆∞u tr·ªØ.');
      }
    } catch (error) {
      log(`L·ªói khi x·ª≠ l√Ω l·ªánh /start: ${error.message}`, 'error');
      ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  });
  
  // X·ª≠ l√Ω l·ªánh /auth <m√£ x√°c th·ª±c>
  bot.command('auth', (ctx) => {
    try {
      const text = ctx.message.text.trim();
      const parts = text.split(' ');
      
      if (parts.length < 2) {
        return ctx.reply('‚ö†Ô∏è Vui l√≤ng cung c·∫•p m√£ x√°c th·ª±c. V√≠ d·ª•: /auth abc123');
      }
      
      const authCode = parts[1].trim();
      handleAuth(ctx, authCode);
    } catch (error) {
      log(`L·ªói khi x·ª≠ l√Ω l·ªánh /auth: ${error.message}`, 'error');
      ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  });
  
  // H√†m x·ª≠ l√Ω x√°c th·ª±c chung
  async function handleAuth(ctx, authCode) {
    const userId = ctx.from.id;
    const username = ctx.from.username || '';
    const firstName = ctx.from.first_name || '';
    const lastName = ctx.from.last_name || '';
    
    log(`Nh·∫≠n y√™u c·∫ßu x√°c th·ª±c v·ªõi m√£ ${authCode} t·ª´ ng∆∞·ªùi d√πng: ${userId} (${username})`, 'info');
    
    try {
      // Ki·ªÉm tra xem m√£ x√°c th·ª±c c√≥ t·ªìn t·∫°i kh√¥ng
      const db = await loadDb('auth_requests', []);
      const request = db.find(r => r.code === authCode);
      
      if (!request) {
        log(`M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá: ${authCode}`, 'warning');
        return ctx.reply('‚ö†Ô∏è M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c t·∫°o m√£ m·ªõi t·ª´ trang web.');
      }
      
      // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng li√™n k·∫øt v·ªõi m√£ n√†y
      request.telegramId = userId;
      request.username = username;
      request.firstName = firstName;
      request.lastName = lastName;
      request.verified = true;
      request.verifiedAt = Date.now();
      
      // L∆∞u l·∫°i v√†o DB
      await saveDb('auth_requests', db);
      
      ctx.reply('‚úÖ X√°c th·ª±c th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ quay l·∫°i trang web v√† ƒëƒÉng nh·∫≠p.');
      log(`Ng∆∞·ªùi d√πng ${userId} (${username}) ƒë√£ x√°c th·ª±c th√†nh c√¥ng v·ªõi m√£ ${authCode}`, 'info');
    } catch (error) {
      log(`L·ªói khi x·ª≠ l√Ω x√°c th·ª±c: ${error.message}`, 'error');
      ctx.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
  
  // Handle document messages
  bot.on(message('document'), async (ctx) => {
    try {
      const document = ctx.message.document;
      const messageId = ctx.message.message_id;
      const caption = ctx.message.caption || '';
      
      log(`Received document: ${document.file_name} (${document.file_size} bytes)`);
      
      // Check if file already exists in database
      const existingFile = await fileService.getFileByMessageId(messageId);
      
      if (existingFile) {
        log(`File already exists in database with ID: ${existingFile.id}`);
        return;
      }
      
      // Save file to database
      const fileData = {
        name: document.file_name,
        size: document.file_size,
        mimeType: document.mime_type,
        telegramMessageId: messageId,
        caption
      };
      
      const savedFile = await fileService.saveFile(fileData);
      log(`Saved file to database with ID: ${savedFile.id}`);
    } catch (err) {
      log(`Error handling document message: ${err.message}`, 'error');
    }
  });
  
  // Handle photo messages
  bot.on(message('photo'), async (ctx) => {
    try {
      const photos = ctx.message.photo;
      const messageId = ctx.message.message_id;
      const caption = ctx.message.caption || '';
      
      // Get the largest photo
      const photo = photos[photos.length - 1];
      
      log(`Received photo: ${photo.file_id} (${photo.file_size} bytes)`);
      
      // Check if file already exists in database
      const existingFile = await fileService.getFileByMessageId(messageId);
      
      if (existingFile) {
        log(`File already exists in database with ID: ${existingFile.id}`);
        return;
      }
      
      // Generate a filename
      const fileName = `photo_${Date.now()}.jpg`;
      
      // Save file to database
      const fileData = {
        name: fileName,
        size: photo.file_size,
        mimeType: 'image/jpeg',
        telegramMessageId: messageId,
        caption
      };
      
      const savedFile = await fileService.saveFile(fileData);
      log(`Saved photo to database with ID: ${savedFile.id}`);
    } catch (err) {
      log(`Error handling photo message: ${err.message}`, 'error');
    }
  });
  
  // Handle video messages
  bot.on(message('video'), async (ctx) => {
    try {
      const video = ctx.message.video;
      const messageId = ctx.message.message_id;
      const caption = ctx.message.caption || '';
      
      log(`Received video: ${video.file_name || 'unnamed'} (${video.file_size} bytes)`);
      
      // Check if file already exists in database
      const existingFile = await fileService.getFileByMessageId(messageId);
      
      if (existingFile) {
        log(`File already exists in database with ID: ${existingFile.id}`);
        return;
      }
      
      // Generate a filename if not provided
      const fileName = video.file_name || `video_${Date.now()}.mp4`;
      
      // Save file to database
      const fileData = {
        name: fileName,
        size: video.file_size,
        mimeType: video.mime_type,
        telegramMessageId: messageId,
        caption
      };
      
      const savedFile = await fileService.saveFile(fileData);
      log(`Saved video to database with ID: ${savedFile.id}`);
    } catch (err) {
      log(`Error handling video message: ${err.message}`, 'error');
    }
  });
  
  // Handle audio messages
  bot.on(message('audio'), async (ctx) => {
    try {
      const audio = ctx.message.audio;
      const messageId = ctx.message.message_id;
      const caption = ctx.message.caption || '';
      
      log(`Received audio: ${audio.file_name || audio.title || 'unnamed'} (${audio.file_size} bytes)`);
      
      // Check if file already exists in database
      const existingFile = await fileService.getFileByMessageId(messageId);
      
      if (existingFile) {
        log(`File already exists in database with ID: ${existingFile.id}`);
        return;
      }
      
      // Generate a filename if not provided
      const fileName = audio.file_name || audio.title || `audio_${Date.now()}.mp3`;
      
      // Save file to database
      const fileData = {
        name: fileName,
        size: audio.file_size,
        mimeType: audio.mime_type,
        telegramMessageId: messageId,
        caption
      };
      
      const savedFile = await fileService.saveFile(fileData);
      log(`Saved audio to database with ID: ${savedFile.id}`);
    } catch (err) {
      log(`Error handling audio message: ${err.message}`, 'error');
    }
  });
};

/**
 * T·∫£i file t·ª´ Telegram
 * @param {String} fileId ID file tr√™n Telegram
 * @param {String} savePath ƒê∆∞·ªùng d·∫´n l∆∞u file
 * @returns {Promise<Object>} Th√¥ng tin file ƒë√£ t·∫£i
 */
async function downloadFile(fileId, savePath) {
  try {
    if (!fileId) {
      throw new Error('File ID kh√¥ng ƒë∆∞·ª£c cung c·∫•p');
    }
    
    if (!isReady || !bot) {
      throw new Error('Bot ch∆∞a s·∫µn s√†ng. Vui l√≤ng kh·ªüi t·∫°o bot tr∆∞·ªõc');
    }
    
    // L·∫•y th√¥ng tin file
    const fileInfo = await bot.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${config.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    
    // T·∫°o th∆∞ m·ª•c l∆∞u file n·∫øu c·∫ßn
    await fs.ensureDir(path.dirname(savePath));
    
    // T·∫£i file
    const response = await axios({
      method: 'GET',
      url: fileUrl,
      responseType: 'stream'
    });
    
    // L∆∞u file
    const writer = fs.createWriteStream(savePath);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        resolve({
          path: savePath,
          size: fileInfo.file_size,
          name: path.basename(savePath)
        });
      });
      
      writer.on('error', (error) => {
        reject(error);
      });
    });
  } catch (error) {
    log(`L·ªói t·∫£i file t·ª´ Telegram: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * G·ª≠i file l√™n Telegram
 * @param {String} filePath ƒê∆∞·ªùng d·∫´n file c·∫ßn g·ª≠i
 * @param {String} caption Ch√∫ th√≠ch cho file
 * @returns {Promise<Object>} Th√¥ng tin file ƒë√£ g·ª≠i
 */
async function sendFile(filePath, caption = '') {
  try {
    if (!isReady || !bot) {
      throw new Error('Bot ch∆∞a s·∫µn s√†ng. Vui l√≤ng kh·ªüi t·∫°o bot tr∆∞·ªõc');
    }
    
    if (!fs.existsSync(filePath)) {
      throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
    }
    
    // G·ª≠i file
    const message = await bot.telegram.sendDocument(
      config.TELEGRAM_CHAT_ID,
      { source: filePath },
      { caption }
    );
    
    // Tr·∫£ v·ªÅ th√¥ng tin file ƒë√£ g·ª≠i
    return {
      file_id: message.document.file_id,
      message_id: message.message_id,
      chat_id: message.chat.id,
      file_name: message.document.file_name,
      file_size: message.document.file_size,
      mime_type: message.document.mime_type
    };
  } catch (error) {
    log(`L·ªói g·ª≠i file l√™n Telegram: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * L·∫•y link t·∫£i file t·ª´ Telegram
 * @param {String} fileId ID file tr√™n Telegram
 * @returns {Promise<String>} URL t·∫£i file
 */
async function getFileLink(fileId) {
  try {
    if (!isReady || !bot) {
      throw new Error('Bot ch∆∞a s·∫µn s√†ng. Vui l√≤ng kh·ªüi t·∫°o bot tr∆∞·ªõc');
    }
    
    const fileInfo = await bot.telegram.getFile(fileId);
    return `https://api.telegram.org/file/bot${config.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
  } catch (error) {
    log(`L·ªói l·∫•y link file t·ª´ Telegram: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * L·∫•y danh s√°ch file t·ª´ chat
 * @param {Number} limit S·ªë l∆∞·ª£ng file t·ªëi ƒëa
 * @returns {Promise<Array>} Danh s√°ch file
 */
async function getFilesFromChat(limit = 100) {
  try {
    if (!isReady || !bot) {
      log('Bot ch∆∞a s·∫µn s√†ng, ƒëang kh·ªüi ƒë·ªông l·∫°i...', 'warning');
      const success = await initBot();
      if (!success) {
        throw new Error('Bot ch∆∞a s·∫µn s√†ng. Vui l√≤ng kh·ªüi t·∫°o bot tr∆∞·ªõc');
      }
    }
    
    const chatId = config.TELEGRAM_CHAT_ID;
    let messages = [];
    let lastMessageId = 0;
    
    log(`ƒêang l·∫•y t·ªëi ƒëa ${limit} tin nh·∫Øn t·ª´ Telegram chat ${chatId}`);
    
    // L·∫•y tin nh·∫Øn theo chunk
    while (messages.length < limit) {
      const chunkSize = Math.min(100, limit - messages.length);
      
      try {
        const messagesChunk = await bot.telegram.getMessages(chatId, {
          limit: chunkSize,
          offset_id: lastMessageId
        });
        
        if (!messagesChunk || messagesChunk.length === 0) {
          log('Kh√¥ng c√≥ th√™m tin nh·∫Øn n√†o', 'info');
          break;
        }
        
        log(`ƒê√£ t·∫£i ${messagesChunk.length} tin nh·∫Øn`, 'debug');
        
        // L·ªçc nh·ªØng tin nh·∫Øn c√≥ file (document, photo, video, audio, voice)
        const fileMessages = messagesChunk.filter(msg => 
          msg.document || msg.photo || msg.video || msg.audio || msg.voice
        );
        
        messages.push(...fileMessages);
        lastMessageId = messagesChunk[messagesChunk.length - 1].message_id;
      } catch (error) {
        log(`L·ªói khi l·∫•y tin nh·∫Øn: ${error.message}. Th·ª≠ ph∆∞∆°ng ph√°p kh√°c.`, 'warning');
        
        // Th·ª≠ ph∆∞∆°ng ph√°p kh√°c: l·∫•y tin nh·∫Øn g·∫ßn ƒë√¢y
        try {
          const history = await bot.telegram.getChatHistory(chatId, {
            limit: chunkSize
          });
          
          if (!history || history.length === 0) {
            log('Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ chat', 'warning');
            break;
          }
          
          log(`ƒê√£ t·∫£i ${history.length} tin nh·∫Øn s·ª≠ d·ª•ng getChatHistory`, 'debug');
          
          // L·ªçc tin nh·∫Øn c√≥ file
          const fileMessages = history.filter(msg => 
            msg.document || msg.photo || msg.video || msg.audio || msg.voice
          );
          
          messages.push(...fileMessages);
          break; // Ch·ªâ l·∫•y m·ªôt l·∫ßn v·ªõi ph∆∞∆°ng ph√°p n√†y
        } catch (fallbackError) {
          log(`Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ chat: ${fallbackError.message}`, 'error');
          break;
        }
      }
    }
    
    // S·∫Øp x·∫øp tin nh·∫Øn theo th·ªùi gian gi·∫£m d·∫ßn (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
    messages.sort((a, b) => b.date - a.date);
    
    log(`ƒê√£ t√¨m th·∫•y ${messages.length} tin nh·∫Øn c√≥ file`, 'info');
    
    // Chuy·ªÉn ƒë·ªïi th√†nh th√¥ng tin file
    const files = messages.map(msg => {
      let fileInfo = null;
      
      if (msg.document) {
        fileInfo = {
          file_id: msg.document.file_id,
          file_name: msg.document.file_name || `document_${msg.date}.bin`,
          mime_type: msg.document.mime_type || 'application/octet-stream',
          file_size: msg.document.file_size || 0,
          type: 'document'
        };
      } else if (msg.photo) {
        // L·∫•y ·∫£nh ch·∫•t l∆∞·ª£ng cao nh·∫•t (ph·∫ßn t·ª≠ cu·ªëi c√πng)
        const photo = msg.photo[msg.photo.length - 1];
        fileInfo = {
          file_id: photo.file_id,
          file_name: `photo_${msg.date}.jpg`,
          mime_type: 'image/jpeg',
          file_size: photo.file_size || 0,
          type: 'photo'
        };
      } else if (msg.video) {
        fileInfo = {
          file_id: msg.video.file_id,
          file_name: msg.video.file_name || `video_${msg.date}.mp4`,
          mime_type: msg.video.mime_type || 'video/mp4',
          file_size: msg.video.file_size || 0,
          type: 'video'
        };
      } else if (msg.audio) {
        fileInfo = {
          file_id: msg.audio.file_id,
          file_name: msg.audio.title || msg.audio.file_name || `audio_${msg.date}.mp3`,
          mime_type: msg.audio.mime_type || 'audio/mpeg',
          file_size: msg.audio.file_size || 0,
          type: 'audio'
        };
      } else if (msg.voice) {
        fileInfo = {
          file_id: msg.voice.file_id,
          file_name: `voice_${msg.date}.ogg`,
          mime_type: msg.voice.mime_type || 'audio/ogg',
          file_size: msg.voice.file_size || 0,
          type: 'voice'
        };
      }
      
      if (fileInfo) {
        fileInfo.message_id = msg.message_id;
        fileInfo.chat_id = msg.chat.id;
        fileInfo.date = msg.date * 1000; // Convert to milliseconds
        fileInfo.caption = msg.caption || '';
      }
      
      return fileInfo;
    }).filter(Boolean);
    
    log(`ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh ${files.length} th√¥ng tin file`, 'info');
    return files;
  } catch (error) {
    log(`L·ªói l·∫•y danh s√°ch file t·ª´ chat: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * ƒê·ªìng b·ªô danh s√°ch file t·ª´ Telegram
 * @returns {Promise<Object>} K·∫øt qu·∫£ ƒë·ªìng b·ªô
 */
async function syncFilesFromTelegram() {
  try {
    log('B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô file t·ª´ Telegram', 'info');
    
    // Ki·ªÉm tra xem c√≥ n√™n th·ª≠ kh·ªüi t·∫°o bot kh√¥ng
    const now = Date.now();
    if (!isReady || !bot) {
      // N·∫øu l·∫ßn kh·ªüi t·∫°o g·∫ßn ƒë√¢y th·∫•t b·∫°i v√† ch∆∞a ƒë·∫øn th·ªùi gian cooldown
      if (lastInitFailed && (now - lastInitAttempt < INIT_COOLDOWN)) {
        throw new Error('Kh·ªüi t·∫°o bot th·∫•t b·∫°i g·∫ßn ƒë√¢y, vui l√≤ng ƒë·ª£i v√† th·ª≠ l·∫°i sau');
      }
      
      log('Bot ch∆∞a s·∫µn s√†ng, ti·∫øn h√†nh kh·ªüi t·∫°o...', 'info');
      lastInitAttempt = now;
      const initResult = await initBot();
      
      if (!initResult || !isReady) {
        lastInitFailed = true;
        throw new Error('Kh√¥ng th·ªÉ kh·ªüi t·∫°o bot Telegram');
      }
      
      lastInitFailed = false;
    } else {
      log('Bot ƒë√£ s·∫µn s√†ng, ti·∫øp t·ª•c ƒë·ªìng b·ªô file', 'info');
    }
    
    // L·∫•y danh s√°ch file t·ª´ Telegram
    const telegramFiles = await getFilesFromChat(500); // L·∫•y t·ªëi ƒëa 500 file
    
    const result = await fileService.syncFilesFromTelegram(telegramFiles);
    
    log(`ƒê·ªìng b·ªô ho√†n t·∫•t: ${result.added} file m·ªõi, ${result.updated} c·∫≠p nh·∫≠t, ${result.unchanged} kh√¥ng thay ƒë·ªïi`);
    
    return result;
  } catch (error) {
    log(`L·ªói ƒë·ªìng b·ªô file t·ª´ Telegram: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * Reset c√°c bi·∫øn theo d√µi tr·∫°ng th√°i bot
 */
function resetBotStatus() {
  bot = null;
  isReady = false;
}

/**
 * Ki·ªÉm tra y√™u c·∫ßu x√°c th·ª±c
 * @param {String} authCode Code x√°c th·ª±c
 * @returns {Promise<Object|Boolean>} Th√¥ng tin y√™u c·∫ßu x√°c th·ª±c ho·∫∑c false n·∫øu kh√¥ng t√¨m th·∫•y
 */
async function verifyAuthRequest(authCode) {
  try {
    if (!authCode) {
      log('Kh√¥ng c√≥ m√£ x√°c th·ª±c ƒë∆∞·ª£c cung c·∫•p', 'warning');
      return false;
    }
    
    // Lo·∫°i b·ªè ti·ªÅn t·ªë "auth_" n·∫øu c√≥
    const cleanAuthCode = authCode.replace('auth_', '');
    
    // L·∫•y y√™u c·∫ßu x√°c th·ª±c t·ª´ DB
    log(`ƒêang ki·ªÉm tra m√£ x√°c th·ª±c: ${cleanAuthCode}`, 'info');
    
    const db = await loadDb('auth_requests', []);
    log(`ƒê√£ t√¨m th·∫•y ${db.length} y√™u c·∫ßu x√°c th·ª±c trong DB`, 'debug');
    
    if (db.length === 0) {
      log('Kh√¥ng c√≥ y√™u c·∫ßu x√°c th·ª±c n√†o trong DB', 'warning');
      return false;
    }
    
    // Debug: hi·ªÉn th·ªã m√£ x√°c th·ª±c ƒëang ki·ªÉm tra v√† m√£ trong DB ƒë·ªÉ so s√°nh
    if (db.length > 0) {
      const codes = db.map(r => r.code).join(', ');
      log(`C√°c m√£ x√°c th·ª±c trong DB: ${codes}`, 'debug');
    }
    
    const request = db.find(r => r.code === cleanAuthCode);
    
    if (!request) {
      log(`Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu x√°c th·ª±c: ${cleanAuthCode}`, 'warning');
      return false;
    }
    
    // Ki·ªÉm tra h·∫øt h·∫°n, th·ªùi gian h·ª£p l·ªá l√† 10 ph√∫t
    const now = Date.now();
    const validUntil = request.timestamp + (10 * 60 * 1000);
    
    if (now > validUntil) {
      log(`Y√™u c·∫ßu x√°c th·ª±c ƒë√£ h·∫øt h·∫°n: ${cleanAuthCode}`, 'warning');
      
      // X√≥a y√™u c·∫ßu h·∫øt h·∫°n
      const newDb = db.filter(r => r.code !== cleanAuthCode);
      await saveDb('auth_requests', newDb);
      
      return false;
    }
    
    // X√≥a y√™u c·∫ßu ƒë√£ s·ª≠ d·ª•ng
    const newDb = db.filter(r => r.code !== cleanAuthCode);
    await saveDb('auth_requests', newDb);
    
    log(`X√°c th·ª±c th√†nh c√¥ng v·ªõi m√£: ${cleanAuthCode}`, 'info');
    return request;
  } catch (error) {
    log(`L·ªói khi x√°c th·ª±c y√™u c·∫ßu: ${error.message}`, 'error');
    log(error.stack, 'error');
    return false;
  }
}

/**
 * T·∫°o m√£ x√°c th·ª±c m·ªõi
 * @returns {Promise<String|Boolean>} M√£ x√°c th·ª±c ho·∫∑c false n·∫øu c√≥ l·ªói
 */
async function generateAuthCode() {
  try {
    // Kh·ªüi t·∫°o bot n·∫øu c·∫ßn
    const botInitialized = await initBot(false);
    if (!botInitialized) {
      log('Kh√¥ng th·ªÉ t·∫°o m√£ x√°c th·ª±c: Bot ch∆∞a kh·ªüi t·∫°o', 'error');
      return false;
    }
    
    // T·∫°o m√£ x√°c th·ª±c ng·∫´u nhi√™n (12 k√Ω t·ª± ƒë·ªÉ ƒë∆°n gi·∫£n h∆°n)
    const authCode = crypto.randomBytes(6).toString('hex');
    log(`T·∫°o m√£ x√°c th·ª±c m·ªõi: ${authCode}`, 'info');
    
    // L∆∞u v√†o db
    const db = await loadDb('auth_requests', []);
    
    // X√≥a c√°c y√™u c·∫ßu c≈© h∆°n 1 gi·ªù
    const now = Date.now();
    const oneHourAgo = now - (60 * 60 * 1000);
    const filteredDb = db.filter(r => r.timestamp > oneHourAgo);
    
    // Th√™m y√™u c·∫ßu m·ªõi
    filteredDb.push({
      code: authCode,
      timestamp: now
    });
    
    // Debug - hi·ªÉn th·ªã c√°c m√£ x√°c th·ª±c hi·ªán c√≥
    log(`L∆∞u m√£ x√°c th·ª±c ${authCode} v√†o DB. T·ªïng s·ªë m√£: ${filteredDb.length}`, 'debug');
    
    const saveResult = await saveDb('auth_requests', filteredDb);
    if (!saveResult) {
      log('Kh√¥ng th·ªÉ l∆∞u m√£ x√°c th·ª±c v√†o DB', 'error');
      return false;
    }
    
    // G·ª≠i m√£ x√°c th·ª±c t·ªõi Telegram
    try {
      const chatId = config.TELEGRAM_CHAT_ID;
      const message = `üîê M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: *${authCode}*\n\nM√£ n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t. N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu x√°c th·ª±c n√†y, vui l√≤ng b·ªè qua tin nh·∫Øn.`;
      
      if (bot && isReady) {
        await bot.telegram.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        log(`ƒê√£ g·ª≠i m√£ x√°c th·ª±c ƒë·∫øn Telegram chat: ${chatId}`, 'info');
      } else {
        log('Bot kh√¥ng s·∫µn s√†ng, kh√¥ng th·ªÉ g·ª≠i m√£ x√°c th·ª±c', 'error');
        return false;
      }
    } catch (error) {
      log(`L·ªói khi g·ª≠i m√£ x√°c th·ª±c ƒë·∫øn Telegram: ${error.message}`, 'error');
      return false;
    }
    
    return authCode;
  } catch (error) {
    log(`L·ªói khi t·∫°o m√£ x√°c th·ª±c: ${error.message}`, 'error');
    log(error.stack, 'error');
    return false;
  }
}

// C√°c h√†m ti·ªán √≠ch thao t√°c v·ªõi database
/**
 * T·∫£i d·ªØ li·ªáu t·ª´ file DB
 * @param {String} dbName T√™n file DB
 * @param {Array|Object} defaultValue Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y file
 * @returns {Promise<Array|Object>} D·ªØ li·ªáu ƒë√£ t·∫£i
 */
async function loadDb(dbName, defaultValue = []) {
  try {
    const dbDir = path.join(__dirname, '../../storage/db');
    ensureDirectoryExists(dbDir);
    
    const dbPath = path.join(dbDir, `${dbName}.json`);
    
    if (!await fs.pathExists(dbPath)) {
      return defaultValue;
    }
    
    const data = await fs.readFile(dbPath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    log(`L·ªói khi t·∫£i DB ${dbName}: ${error.message}`, 'error');
    return defaultValue;
  }
}

/**
 * L∆∞u d·ªØ li·ªáu v√†o file DB
 * @param {String} dbName T√™n file DB
 * @param {Array|Object} data D·ªØ li·ªáu c·∫ßn l∆∞u
 * @returns {Promise<Boolean>} K·∫øt qu·∫£ l∆∞u
 */
async function saveDb(dbName, data) {
  try {
    const dbDir = path.join(__dirname, '../../storage/db');
    ensureDirectoryExists(dbDir);
    
    const dbPath = path.join(dbDir, `${dbName}.json`);
    
    await fs.writeFile(dbPath, JSON.stringify(data, null, 2), 'utf8');
    return true;
  } catch (error) {
    log(`L·ªói khi l∆∞u DB ${dbName}: ${error.message}`, 'error');
    return false;
  }
}

module.exports = {
  initBot,
  stopBot,
  isBotActive,
  downloadFile,
  sendFile,
  getFileLink,
  getFilesFromChat,
  syncFilesFromTelegram,
  verifyAuthRequest,
  resetBotStatus,
  generateAuthCode
}; 