#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram OTP Service
D·ªãch v·ª• g·ª≠i m√£ OTP qua Telegram s·ª≠ d·ª•ng Telethon
"""

import asyncio
import logging
from typing import Optional, Tuple
from telethon import TelegramClient
from telethon.errors import (
    PhoneNumberInvalidError,
    FloodWaitError,
    NotFoundError,
    PeerIdInvalidError
)
from src.config import config
from src.models.otp import OTPManager, format_phone_number, validate_phone_number

# Setup logging
logger = logging.getLogger(__name__)

class TelegramOTPService:
    """Service g·ª≠i OTP qua Telegram"""
    
    def __init__(self):
        self.client = None
        self._initialized = False
    
    async def initialize(self):
        """Kh·ªüi t·∫°o Telegram client"""
        if self._initialized:
            return True
            
        try:
            self.client = TelegramClient(
                config.telegram.session_name,
                config.telegram.api_id,
                config.telegram.api_hash
            )

            await self.client.start(phone=config.telegram.phone_number)
            self._initialized = True
            logger.info("Telegram OTP Service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o Telegram client: {e}")
            return False
    
    async def send_otp_to_user(self, phone_number: str) -> Tuple[bool, str]:
        """G·ª≠i m√£ OTP ƒë·∫øn user qua Telegram"""
        try:
            # Validate s·ªë ƒëi·ªán tho·∫°i
            is_valid, result = validate_phone_number(phone_number)
            if not is_valid:
                return False, result
            
            formatted_phone = result
            
            # Kh·ªüi t·∫°o client n·∫øu ch∆∞a c√≥
            if not self._initialized:
                init_success = await self.initialize()
                if not init_success:
                    return False, "Kh√¥ng th·ªÉ k·∫øt n·ªëi Telegram"
            
            # T·∫°o m√£ OTP
            otp_code = OTPManager.create_otp(formatted_phone)
            
            # T·∫°o tin nh·∫Øn OTP
            message = self._create_otp_message(otp_code)
            
            # G·ª≠i tin nh·∫Øn ƒë·∫øn user
            success = await self._send_message_to_phone(formatted_phone, message)
            
            if success:
                return True, "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn Telegram c·ªßa b·∫°n"
            else:
                return False, "Kh√¥ng th·ªÉ g·ª≠i m√£ OTP. Vui l√≤ng ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i"
                
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i OTP: {e}")
            return False, f"L·ªói h·ªá th·ªëng: {str(e)}"
    
    async def _send_message_to_phone(self, phone_number: str, message: str) -> bool:
        """G·ª≠i tin nh·∫Øn ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i qua Telegram"""
        try:
            # T√¨m user theo s·ªë ƒëi·ªán tho·∫°i
            try:
                user = await self.client.get_entity(phone_number)
            except (NotFoundError, PeerIdInvalidError, ValueError):
                # Th·ª≠ t√¨m b·∫±ng c√°ch kh√°c
                try:
                    # T√¨m trong danh b·∫°
                    contacts = await self.client.get_contacts()
                    user = None
                    for contact in contacts:
                        if hasattr(contact, 'phone') and contact.phone:
                            contact_phone = '+' + contact.phone
                            if contact_phone == phone_number:
                                user = contact
                                break
                    
                    if not user:
                        logger.warning(f"Kh√¥ng t√¨m th·∫•y user v·ªõi s·ªë {phone_number}")
                        return False
                        
                except Exception as e:
                    logger.error(f"L·ªói t√¨m user: {e}")
                    return False
            
            # G·ª≠i tin nh·∫Øn
            await self.client.send_message(user, message)
            logger.info(f"ƒê√£ g·ª≠i OTP ƒë·∫øn {phone_number}")
            return True
            
        except FloodWaitError as e:
            logger.warning(f"Rate limit: ph·∫£i ch·ªù {e.seconds} gi√¢y")
            return False
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i tin nh·∫Øn: {e}")
            return False
    
    def _create_otp_message(self, otp_code: str) -> str:
        """T·∫°o n·ªôi dung tin nh·∫Øn OTP"""
        return f"""üîê **TeleDrive - M√£ x√°c th·ª±c**

M√£ OTP c·ªßa b·∫°n l√†: **{otp_code}**

‚è∞ M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t
üîí Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai

N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua tin nh·∫Øn."""
    
    async def close(self):
        """ƒê√≥ng k·∫øt n·ªëi Telegram"""
        if self.client and self._initialized:
            await self.client.disconnect()
            self._initialized = False
            logger.info("ƒê√£ ƒë√≥ng k·∫øt n·ªëi Telegram OTP Service")

# Singleton instance
_telegram_otp_service = None

async def get_telegram_otp_service() -> TelegramOTPService:
    """L·∫•y instance c·ªßa TelegramOTPService"""
    global _telegram_otp_service
    if _telegram_otp_service is None:
        _telegram_otp_service = TelegramOTPService()
        await _telegram_otp_service.initialize()
    return _telegram_otp_service

async def send_otp_async(phone_number: str) -> Tuple[bool, str]:
    """Helper function ƒë·ªÉ g·ª≠i OTP (async)"""
    service = await get_telegram_otp_service()
    return await service.send_otp_to_user(phone_number)

def send_otp_sync(phone_number: str) -> Tuple[bool, str]:
    """Helper function ƒë·ªÉ g·ª≠i OTP (sync)"""
    try:
        # Ki·ªÉm tra xem c√≥ event loop ƒëang ch·∫°y kh√¥ng
        try:
            loop = asyncio.get_running_loop()
            # N·∫øu c√≥ event loop ƒëang ch·∫°y, s·ª≠ d·ª•ng thread pool
            import concurrent.futures
            import threading

            def run_in_thread():
                # T·∫°o event loop m·ªõi trong thread ri√™ng
                new_loop = asyncio.new_event_loop()
                asyncio.set_event_loop(new_loop)
                try:
                    return new_loop.run_until_complete(send_otp_async(phone_number))
                finally:
                    new_loop.close()

            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(run_in_thread)
                return future.result(timeout=30)  # 30 second timeout

        except RuntimeError:
            # Kh√¥ng c√≥ event loop ƒëang ch·∫°y, t·∫°o m·ªõi
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                return loop.run_until_complete(send_otp_async(phone_number))
            finally:
                loop.close()

    except Exception as e:
        logger.error(f"L·ªói g·ª≠i OTP sync: {e}")
        return False, f"L·ªói h·ªá th·ªëng: {str(e)}"

# Alternative: S·ª≠ d·ª•ng bot thay v√¨ client (n·∫øu c·∫ßn)
class TelegramBotOTPService:
    """Service g·ª≠i OTP qua Telegram Bot (alternative approach)"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    async def send_otp_via_bot(self, chat_id: str, otp_code: str) -> bool:
        """G·ª≠i OTP qua Telegram Bot API"""
        import aiohttp
        
        message = f"""üîê **TeleDrive - M√£ x√°c th·ª±c**

M√£ OTP c·ªßa b·∫°n l√†: **{otp_code}**

‚è∞ M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t
üîí Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai"""
        
        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    if response.status == 200:
                        logger.info(f"ƒê√£ g·ª≠i OTP qua bot ƒë·∫øn chat_id: {chat_id}")
                        return True
                    else:
                        logger.error(f"L·ªói g·ª≠i OTP qua bot: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i OTP qua bot: {e}")
            return False

# Cleanup function
async def cleanup_telegram_otp_service():
    """D·ªçn d·∫πp service khi t·∫Øt ·ª©ng d·ª•ng"""
    global _telegram_otp_service
    if _telegram_otp_service:
        await _telegram_otp_service.close()
        _telegram_otp_service = None
