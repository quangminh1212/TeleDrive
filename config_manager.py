#!/usr/bin/env python3
"""
Config Manager cho Telegram File Scanner
Qu·∫£n l√Ω c·∫•u h√¨nh trong config.json v·ªõi validation
"""

import json
import os
from datetime import datetime
from config_validator import ConfigValidator

class ConfigManager:
    def __init__(self, config_file='config.json'):
        self.config_file = config_file
        self.config = self.load_config()
    
    def load_config(self):
        """Load configuration from JSON file"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"Kh√¥ng t√¨m th·∫•y {self.config_file}")
            return self.get_default_config()
        except json.JSONDecodeError as e:
            print(f"L·ªói ƒë·ªçc {self.config_file}: {e}")
            return self.get_default_config()
    
    def save_config(self):
        """Save configuration to JSON file with validation"""
        try:
            # Validate before saving
            validator = ConfigValidator()
            temp_file = self.config_file + '.tmp'

            # Save to temp file first
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)

            # Validate temp file
            if validator.validate_config_json(temp_file):
                # Move temp file to actual file
                os.rename(temp_file, self.config_file)
                print(f"‚úÖ ƒê√£ l∆∞u v√† validate c·∫•u h√¨nh v√†o {self.config_file}")
                return True
            else:
                # Remove temp file and show errors
                os.remove(temp_file)
                print("‚ùå C·∫•u h√¨nh kh√¥ng h·ª£p l·ªá:")
                print(validator.get_validation_report())
                return False

        except Exception as e:
            print(f"L·ªói l∆∞u {self.config_file}: {e}")
            return False
    
    def get_default_config(self):
        """Get default configuration"""
        return {
            "telegram": {
                "api_id": "",
                "api_hash": "",
                "phone_number": "",
                "session_name": "telegram_scanner_session"
            },
            "output": {
                "directory": "output",
                "formats": {
                    "csv": {"enabled": True, "filename": "telegram_files.csv"},
                    "json": {"enabled": True, "filename": "telegram_files.json"},
                    "excel": {"enabled": True, "filename": "telegram_files.xlsx"}
                }
            },
            "scanning": {
                "max_messages": None,
                "batch_size": 100,
                "file_types": {
                    "documents": True, "photos": True, "videos": True,
                    "audio": True, "voice": True, "stickers": True, "animations": True
                }
            },
            "download": {
                "generate_links": True, "include_preview": False,
                "auto_download": False, "download_directory": "downloads"
            },
            "display": {
                "show_progress": True, "show_file_details": True,
                "language": "vi", "date_format": "DD/MM/YYYY HH:mm:ss"
            },
            "filters": {
                "min_file_size": 0, "max_file_size": None,
                "file_extensions": [], "exclude_extensions": [],
                "date_from": None, "date_to": None
            }
        }
    
    def update_telegram_config(self, api_id=None, api_hash=None, phone_number=None):
        """Update Telegram configuration"""
        if api_id:
            self.config['telegram']['api_id'] = str(api_id)
        if api_hash:
            self.config['telegram']['api_hash'] = str(api_hash)
        if phone_number:
            self.config['telegram']['phone_number'] = str(phone_number)
        return self.save_config()
    
    def update_output_config(self, directory=None, csv_enabled=None, json_enabled=None, excel_enabled=None):
        """Update output configuration"""
        if directory:
            self.config['output']['directory'] = directory
        if csv_enabled is not None:
            self.config['output']['formats']['csv']['enabled'] = csv_enabled
        if json_enabled is not None:
            self.config['output']['formats']['json']['enabled'] = json_enabled
        if excel_enabled is not None:
            self.config['output']['formats']['excel']['enabled'] = excel_enabled
        return self.save_config()
    
    def update_scanning_config(self, max_messages=None, batch_size=None, file_types=None):
        """Update scanning configuration"""
        if max_messages is not None:
            self.config['scanning']['max_messages'] = max_messages
        if batch_size:
            self.config['scanning']['batch_size'] = batch_size
        if file_types:
            self.config['scanning']['file_types'].update(file_types)
        return self.save_config()
    
    def update_filter_config(self, min_size=None, max_size=None, extensions=None, exclude_ext=None):
        """Update filter configuration"""
        if min_size is not None:
            self.config['filters']['min_file_size'] = min_size
        if max_size is not None:
            self.config['filters']['max_file_size'] = max_size
        if extensions is not None:
            self.config['filters']['file_extensions'] = extensions
        if exclude_ext is not None:
            self.config['filters']['exclude_extensions'] = exclude_ext
        return self.save_config()
    
    def get_config(self, section=None):
        """Get configuration section or full config"""
        if section:
            return self.config.get(section, {})
        return self.config
    
    def print_config(self):
        """Print current configuration"""
        print("\n" + "="*60)
        print("           C·∫§U H√åNH TELEGRAM FILE SCANNER")
        print("="*60)
        
        # Telegram settings
        telegram = self.config.get('telegram', {})
        print(f"\nüì± TELEGRAM:")
        print(f"   API ID: {telegram.get('api_id', 'Ch∆∞a c·∫•u h√¨nh')}")
        print(f"   API Hash: {'*' * len(telegram.get('api_hash', '')) if telegram.get('api_hash') else 'Ch∆∞a c·∫•u h√¨nh'}")
        print(f"   S·ªë ƒëi·ªán tho·∫°i: {telegram.get('phone_number', 'Ch∆∞a c·∫•u h√¨nh')}")
        
        # Output settings
        output = self.config.get('output', {})
        formats = output.get('formats', {})
        print(f"\nüìÅ OUTPUT:")
        print(f"   Th∆∞ m·ª•c: {output.get('directory', 'output')}")
        print(f"   CSV: {'‚úì' if formats.get('csv', {}).get('enabled') else '‚úó'}")
        print(f"   JSON: {'‚úì' if formats.get('json', {}).get('enabled') else '‚úó'}")
        print(f"   Excel: {'‚úì' if formats.get('excel', {}).get('enabled') else '‚úó'}")
        
        # Scanning settings
        scanning = self.config.get('scanning', {})
        file_types = scanning.get('file_types', {})
        print(f"\nüîç SCANNING:")
        print(f"   Max messages: {scanning.get('max_messages', 'Kh√¥ng gi·ªõi h·∫°n')}")
        print(f"   Batch size: {scanning.get('batch_size', 100)}")
        print(f"   File types: {', '.join([k for k, v in file_types.items() if v])}")
        
        # Filter settings
        filters = self.config.get('filters', {})
        print(f"\nüîß FILTERS:")
        print(f"   Min size: {filters.get('min_file_size', 0)} bytes")
        print(f"   Max size: {filters.get('max_file_size', 'Kh√¥ng gi·ªõi h·∫°n')}")
        print(f"   Extensions: {filters.get('file_extensions', []) or 'T·∫•t c·∫£'}")
        
        print("="*60)

def main():
    """Interactive config manager"""
    config_mgr = ConfigManager()
    
    while True:
        print("\n" + "="*50)
        print("        QU·∫¢N L√ù C·∫§U H√åNH")
        print("="*50)
        print("1. Xem c·∫•u h√¨nh hi·ªán t·∫°i")
        print("2. C·∫•u h√¨nh Telegram API")
        print("3. C·∫•u h√¨nh Output")
        print("4. C·∫•u h√¨nh Scanning")
        print("5. C·∫•u h√¨nh Filters")
        print("6. Ki·ªÉm tra validation")
        print("7. Reset v·ªÅ m·∫∑c ƒë·ªãnh")
        print("0. Tho√°t")
        print("-"*50)

        choice = input("Ch·ªçn (0-7): ").strip()

        if choice == '0':
            break
        elif choice == '1':
            config_mgr.print_config()
        elif choice == '2':
            configure_telegram(config_mgr)
        elif choice == '3':
            configure_output(config_mgr)
        elif choice == '4':
            configure_scanning(config_mgr)
        elif choice == '5':
            configure_filters(config_mgr)
        elif choice == '6':
            validate_configuration()
        elif choice == '7':
            config_mgr.config = config_mgr.get_default_config()
            config_mgr.save_config()
            print("ƒê√£ reset v·ªÅ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh!")
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

def configure_telegram(config_mgr):
    """Configure Telegram settings"""
    print("\nüì± C·∫§U H√åNH TELEGRAM API")
    print("-"*30)
    
    api_id = input("API ID (Enter ƒë·ªÉ b·ªè qua): ").strip()
    api_hash = input("API Hash (Enter ƒë·ªÉ b·ªè qua): ").strip()
    phone = input("S·ªë ƒëi·ªán tho·∫°i (+84xxxxxxxxx) (Enter ƒë·ªÉ b·ªè qua): ").strip()
    
    config_mgr.update_telegram_config(
        api_id=api_id if api_id else None,
        api_hash=api_hash if api_hash else None,
        phone_number=phone if phone else None
    )

def configure_output(config_mgr):
    """Configure output settings"""
    print("\nüìÅ C·∫§U H√åNH OUTPUT")
    print("-"*25)
    
    directory = input("Th∆∞ m·ª•c output (Enter ƒë·ªÉ b·ªè qua): ").strip()
    
    csv_input = input("Xu·∫•t CSV? (y/n/Enter ƒë·ªÉ b·ªè qua): ").strip().lower()
    csv_enabled = True if csv_input == 'y' else False if csv_input == 'n' else None
    
    json_input = input("Xu·∫•t JSON? (y/n/Enter ƒë·ªÉ b·ªè qua): ").strip().lower()
    json_enabled = True if json_input == 'y' else False if json_input == 'n' else None
    
    excel_input = input("Xu·∫•t Excel? (y/n/Enter ƒë·ªÉ b·ªè qua): ").strip().lower()
    excel_enabled = True if excel_input == 'y' else False if excel_input == 'n' else None
    
    config_mgr.update_output_config(
        directory=directory if directory else None,
        csv_enabled=csv_enabled,
        json_enabled=json_enabled,
        excel_enabled=excel_enabled
    )

def configure_scanning(config_mgr):
    """Configure scanning settings"""
    print("\nüîç C·∫§U H√åNH SCANNING")
    print("-"*28)
    
    max_msg = input("S·ªë message t·ªëi ƒëa (Enter = kh√¥ng gi·ªõi h·∫°n): ").strip()
    max_messages = int(max_msg) if max_msg.isdigit() else None
    
    batch = input("Batch size (Enter ƒë·ªÉ b·ªè qua): ").strip()
    batch_size = int(batch) if batch.isdigit() else None
    
    config_mgr.update_scanning_config(
        max_messages=max_messages,
        batch_size=batch_size
    )

def configure_filters(config_mgr):
    """Configure filter settings"""
    print("\nüîß C·∫§U H√åNH FILTERS")
    print("-"*26)

    min_size = input("K√≠ch th∆∞·ªõc file t·ªëi thi·ªÉu (bytes, Enter ƒë·ªÉ b·ªè qua): ").strip()
    min_file_size = int(min_size) if min_size.isdigit() else None

    max_size = input("K√≠ch th∆∞·ªõc file t·ªëi ƒëa (bytes, Enter ƒë·ªÉ b·ªè qua): ").strip()
    max_file_size = int(max_size) if max_size.isdigit() else None

    extensions = input("Ph·∫ßn m·ªü r·ªông cho ph√©p (c√°ch nhau b·ªüi d·∫•u ph·∫©y, Enter ƒë·ªÉ b·ªè qua): ").strip()
    file_extensions = [ext.strip() for ext in extensions.split(',')] if extensions else None

    config_mgr.update_filter_config(
        min_size=min_file_size,
        max_size=max_file_size,
        extensions=file_extensions
    )

def validate_configuration():
    """Validate current configuration"""
    print("\nüîç KI·ªÇM TRA C·∫§U H√åNH")
    print("-"*30)

    validator = ConfigValidator()

    # Validate .env
    print("üìÑ Ki·ªÉm tra .env...")
    env_valid = validator.validate_env_file()
    if env_valid:
        print("‚úÖ .env h·ª£p l·ªá!")
    else:
        print("‚ùå .env c√≥ l·ªói:")
        print(validator.get_validation_report())

    # Validate config.json
    print("\nüìÑ Ki·ªÉm tra config.json...")
    config_valid = validator.validate_config_json()
    if config_valid:
        print("‚úÖ config.json h·ª£p l·ªá!")
    else:
        print("‚ùå config.json c√≥ l·ªói:")
        print(validator.get_validation_report())

    # Overall result
    print("\n" + "-"*30)
    if env_valid and config_valid:
        print("üéâ T·∫§T C·∫¢ C·∫§U H√åNH H·ª¢P L·ªÜ!")
    else:
        print("‚ö†Ô∏è C√ì L·ªñI TRONG C·∫§U H√åNH!")

    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

if __name__ == "__main__":
    main()
